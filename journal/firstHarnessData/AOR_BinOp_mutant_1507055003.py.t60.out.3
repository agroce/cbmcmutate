Random testing using config=Config(swarmSwitch=None, maxMustHitBranch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, internal=False, exploit=None, seed=None, generalize=False, fastQuickAnalysis=False, stopWhenNoCoverage=None, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, maxMustHitStatement=None, noCoverageExploit=False, quickTests=False, relax=False, startExploitStall=0, enumerateEnabled=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, stopWhenHitStatement=None, biasLOC=None, progress=False, postCover=False, swarmLength=None, generateLOC=None, noSwarmDependencies=False, profile=False, LOCBaseline=0.2, noEnumerateEnabled=False, full=True, multiple=False, timedProgress=30, silentFail=False, ddmin=False, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.53260.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, markovP=1.0, logging=None, stopWhenHitBranch=None, LOCProbs=False, stopWhenStatements=None, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.0, depth=200, trackMaxCoverage=None, throughput=False, noCover=True, timeout=60, stutter=None, uncaught=False, markov=None, showActions=False, startExploit=0.0)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.TypeError'>, TypeError("unsupported operand type(s) for /: 'str' and 'str'",), <traceback object at 0x10470a710>)
TRACEBACK:
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 48329, in safely
    act[2]()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 66, in act0
    self.p_os[0] = newFakeOS()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 21, in newFakeOS
    fs.CreateDirectory('/Volumes')
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 2055, in CreateDirectory
    if self.Exists(directory_path):
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1624, in Exists
    file_path = self.ResolvePath(file_path)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1766, in ResolvePath
    return _ComponentsToPath(resolved_components)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1662, in _ComponentsToPath
    path = (sep / path)
Original test has 16 steps

SAVING TEST AS failure.53260.test
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
component1 = "f"                                                         # STEP 0
ACTION: component1 = "f" 
component1 = None : <type 'NoneType'>
=> component1 = 'f' : <type 'str'>
==================================================
component4 = "phi"                                                       # STEP 1
ACTION: component4 = "phi" 
component4 = None : <type 'NoneType'>
=> component4 = 'phi' : <type 'str'>
==================================================
str4 = ""                                                                # STEP 2
ACTION: str4 = "" 
str4 = None : <type 'NoneType'>
=> str4 = '' : <type 'str'>
==================================================
component3 = "epsilon"                                                   # STEP 3
ACTION: component3 = "epsilon" 
component3 = None : <type 'NoneType'>
=> component3 = 'epsilon' : <type 'str'>
==================================================
component0 = "f"                                                         # STEP 4
ACTION: component0 = "f" 
component0 = None : <type 'NoneType'>
=> component0 = 'f' : <type 'str'>
==================================================
component2 = "alpha"                                                     # STEP 5
ACTION: component2 = "alpha" 
component2 = None : <type 'NoneType'>
=> component2 = 'alpha' : <type 'str'>
==================================================
str4 += 'i'                                                              # STEP 6
ACTION: str4 += 'i' 
str4 = '' : <type 'str'>
=> str4 = 'i' : <type 'str'>
==================================================
str4 += 'm'                                                              # STEP 7
ACTION: str4 += 'm' 
str4 = 'i' : <type 'str'>
=> str4 = 'im' : <type 'str'>
==================================================
str4 += 'p'                                                              # STEP 8
ACTION: str4 += 'p' 
str4 = 'im' : <type 'str'>
=> str4 = 'imp' : <type 'str'>
==================================================
str4 += 'm'                                                              # STEP 9
ACTION: str4 += 'm' 
str4 = 'imp' : <type 'str'>
=> str4 = 'impm' : <type 'str'>
==================================================
str4 += 'y'                                                             # STEP 10
ACTION: str4 += 'y' 
str4 = 'impm' : <type 'str'>
=> str4 = 'impmy' : <type 'str'>
==================================================
str4 += 's'                                                             # STEP 11
ACTION: str4 += 's' 
str4 = 'impmy' : <type 'str'>
=> str4 = 'impmys' : <type 'str'>
==================================================
str4 += 'a'                                                             # STEP 12
ACTION: str4 += 'a' 
str4 = 'impmys' : <type 'str'>
=> str4 = 'impmysa' : <type 'str'>
==================================================
str4 += 'f'                                                             # STEP 13
ACTION: str4 += 'f' 
str4 = 'impmysa' : <type 'str'>
=> str4 = 'impmysaf' : <type 'str'>
==================================================
str4 += 'j'                                                             # STEP 14
ACTION: str4 += 'j' 
str4 = 'impmysaf' : <type 'str'>
=> str4 = 'impmysafj' : <type 'str'>
==================================================
os0 = newFakeOS()                                                       # STEP 15
ACTION: os0 = newFakeOS() 
os0 = None : <type 'NoneType'>
os_REF0 = None : <type 'NoneType'>
RAISED EXCEPTION: <type 'exceptions.TypeError'> unsupported operand type(s) for /: 'str' and 'str'
ERROR: (<type 'exceptions.TypeError'>, TypeError("unsupported operand type(s) for /: 'str' and 'str'",), <traceback object at 0x104713ea8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 48329, in safely
    act[2]()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 66, in act0
    self.p_os[0] = newFakeOS()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 21, in newFakeOS
    fs.CreateDirectory('/Volumes')
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 2055, in CreateDirectory
    if self.Exists(directory_path):
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1624, in Exists
    file_path = self.ResolvePath(file_path)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1766, in ResolvePath
    return _ComponentsToPath(resolved_components)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1662, in _ComponentsToPath
    path = (sep / path)
STOPPING TESTING DUE TO FAILED TEST
0.0271987915039 TOTAL RUNTIME
1 EXECUTED
16 TOTAL TEST OPERATIONS
0.000654697418213 TIME SPENT EXECUTING TEST OPERATIONS
0.00149130821228 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
5.72204589844e-06 TIME SPENT CHECKING PROPERTIES
0.000660419464111 TOTAL TIME SPENT RUNNING SUT
0.00789904594421 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
