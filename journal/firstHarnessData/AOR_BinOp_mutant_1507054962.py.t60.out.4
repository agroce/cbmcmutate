Random testing using config=Config(swarmSwitch=None, maxMustHitBranch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, internal=False, exploit=None, seed=None, generalize=False, fastQuickAnalysis=False, stopWhenNoCoverage=None, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, maxMustHitStatement=None, noCoverageExploit=False, quickTests=False, relax=False, startExploitStall=0, enumerateEnabled=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, stopWhenHitStatement=None, biasLOC=None, progress=False, postCover=False, swarmLength=None, generateLOC=None, noSwarmDependencies=False, profile=False, LOCBaseline=0.2, noEnumerateEnabled=False, full=True, multiple=False, timedProgress=30, silentFail=False, ddmin=False, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.62584.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, markovP=1.0, logging=None, stopWhenHitBranch=None, LOCProbs=False, stopWhenStatements=None, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.0, depth=200, trackMaxCoverage=None, throughput=False, noCover=True, timeout=60, stutter=None, uncaught=False, markov=None, showActions=False, startExploit=0.0)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.TypeError'>, TypeError("unsupported operand type(s) for //: 'str' and 'str'",), <traceback object at 0x1039782d8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 48329, in safely
    act[2]()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 66, in act0
    self.p_os[0] = newFakeOS()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 21, in newFakeOS
    fs.CreateDirectory('/Volumes')
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 2055, in CreateDirectory
    if self.Exists(directory_path):
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1624, in Exists
    file_path = self.ResolvePath(file_path)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1718, in ResolvePath
    file_path = self.NormalizePath(self.NormalizeCase(file_path))
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1329, in NormalizeCase
    return components_to_path()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1305, in components_to_path
    normalized_path = (sep // normalized_path)
Original test has 35 steps

SAVING TEST AS failure.62584.test
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
component1 = "lambda"                                                    # STEP 0
ACTION: component1 = "lambda" 
component1 = None : <type 'NoneType'>
=> component1 = 'lambda' : <type 'str'>
==================================================
component3 = "f"                                                         # STEP 1
ACTION: component3 = "f" 
component3 = None : <type 'NoneType'>
=> component3 = 'f' : <type 'str'>
==================================================
component0 = "delta"                                                     # STEP 2
ACTION: component0 = "delta" 
component0 = None : <type 'NoneType'>
=> component0 = 'delta' : <type 'str'>
==================================================
bytes2 = 0                                                               # STEP 3
ACTION: bytes2 = 0 
bytes2 = None : <type 'NoneType'>
=> bytes2 = 0 : <type 'int'>
==================================================
component4 = "g"                                                         # STEP 4
ACTION: component4 = "g" 
component4 = None : <type 'NoneType'>
=> component4 = 'g' : <type 'str'>
==================================================
component2 = "b"                                                         # STEP 5
ACTION: component2 = "b" 
component2 = None : <type 'NoneType'>
=> component2 = 'b' : <type 'str'>
==================================================
path3 = "/Volumes/ramdisk/test"                                          # STEP 6
ACTION: path3 = "/Volumes/ramdisk/test" 
path3 = None : <type 'NoneType'>
=> path3 = '/Volumes/ramdisk/test' : <type 'str'>
==================================================
path3 += "/" + component0                                                # STEP 7
ACTION: path3 += "/" + component0 
component0 = 'delta' : <type 'str'>
path3 = '/Volumes/ramdisk/test' : <type 'str'>
=> path3 = '/Volumes/ramdisk/test/delta' : <type 'str'>
==================================================
component0 = "e"                                                         # STEP 8
ACTION: component0 = "e" 
component0 = 'delta' : <type 'str'>
=> component0 = 'e' : <type 'str'>
==================================================
str1 = ""                                                                # STEP 9
ACTION: str1 = "" 
str1 = None : <type 'NoneType'>
=> str1 = '' : <type 'str'>
==================================================
str1 += 'e'                                                             # STEP 10
ACTION: str1 += 'e' 
str1 = '' : <type 'str'>
=> str1 = 'e' : <type 'str'>
==================================================
str1 += 'm'                                                             # STEP 11
ACTION: str1 += 'm' 
str1 = 'e' : <type 'str'>
=> str1 = 'em' : <type 'str'>
==================================================
bytes3 = 0                                                              # STEP 12
ACTION: bytes3 = 0 
bytes3 = None : <type 'NoneType'>
=> bytes3 = 0 : <type 'int'>
==================================================
str1 += 'f'                                                             # STEP 13
ACTION: str1 += 'f' 
str1 = 'em' : <type 'str'>
=> str1 = 'emf' : <type 'str'>
==================================================
str1 += 't'                                                             # STEP 14
ACTION: str1 += 't' 
str1 = 'emf' : <type 'str'>
=> str1 = 'emft' : <type 'str'>
==================================================
str1 += 'l'                                                             # STEP 15
ACTION: str1 += 'l' 
str1 = 'emft' : <type 'str'>
=> str1 = 'emftl' : <type 'str'>
==================================================
str1 += 'n'                                                             # STEP 16
ACTION: str1 += 'n' 
str1 = 'emftl' : <type 'str'>
=> str1 = 'emftln' : <type 'str'>
==================================================
str1 += 'q'                                                             # STEP 17
ACTION: str1 += 'q' 
str1 = 'emftln' : <type 'str'>
=> str1 = 'emftlnq' : <type 'str'>
==================================================
str1 += 'f'                                                             # STEP 18
ACTION: str1 += 'f' 
str1 = 'emftlnq' : <type 'str'>
=> str1 = 'emftlnqf' : <type 'str'>
==================================================
path3 = "/Volumes/ramdisk/test"                                         # STEP 19
ACTION: path3 = "/Volumes/ramdisk/test" 
path3 = '/Volumes/ramdisk/test/delta' : <type 'str'>
=> path3 = '/Volumes/ramdisk/test' : <type 'str'>
==================================================
path3 += "/" + component1                                               # STEP 20
ACTION: path3 += "/" + component1 
component1 = 'lambda' : <type 'str'>
path3 = '/Volumes/ramdisk/test' : <type 'str'>
=> path3 = '/Volumes/ramdisk/test/lambda' : <type 'str'>
==================================================
str1 += 'u'                                                             # STEP 21
ACTION: str1 += 'u' 
str1 = 'emftlnqf' : <type 'str'>
=> str1 = 'emftlnqfu' : <type 'str'>
==================================================
component1 = "epsilon"                                                  # STEP 22
ACTION: component1 = "epsilon" 
component1 = 'lambda' : <type 'str'>
=> component1 = 'epsilon' : <type 'str'>
==================================================
str1 += 'f'                                                             # STEP 23
ACTION: str1 += 'f' 
str1 = 'emftlnqfu' : <type 'str'>
=> str1 = 'emftlnqfuf' : <type 'str'>
==================================================
str1 += 'y'                                                             # STEP 24
ACTION: str1 += 'y' 
str1 = 'emftlnqfuf' : <type 'str'>
=> str1 = 'emftlnqfufy' : <type 'str'>
==================================================
str1 += 'c'                                                             # STEP 25
ACTION: str1 += 'c' 
str1 = 'emftlnqfufy' : <type 'str'>
=> str1 = 'emftlnqfufyc' : <type 'str'>
==================================================
str1 += 'w'                                                             # STEP 26
ACTION: str1 += 'w' 
str1 = 'emftlnqfufyc' : <type 'str'>
=> str1 = 'emftlnqfufycw' : <type 'str'>
==================================================
str1 += 'q'                                                             # STEP 27
ACTION: str1 += 'q' 
str1 = 'emftlnqfufycw' : <type 'str'>
=> str1 = 'emftlnqfufycwq' : <type 'str'>
==================================================
str1 += 't'                                                             # STEP 28
ACTION: str1 += 't' 
str1 = 'emftlnqfufycwq' : <type 'str'>
=> str1 = 'emftlnqfufycwqt' : <type 'str'>
==================================================
str1 += 'k'                                                             # STEP 29
ACTION: str1 += 'k' 
str1 = 'emftlnqfufycwqt' : <type 'str'>
=> str1 = 'emftlnqfufycwqtk' : <type 'str'>
==================================================
str1 += 'm'                                                             # STEP 30
ACTION: str1 += 'm' 
str1 = 'emftlnqfufycwqtk' : <type 'str'>
=> str1 = 'emftlnqfufycwqtkm' : <type 'str'>
==================================================
bytes1 = 0                                                              # STEP 31
ACTION: bytes1 = 0 
bytes1 = None : <type 'NoneType'>
=> bytes1 = 0 : <type 'int'>
==================================================
str1 += 'x'                                                             # STEP 32
ACTION: str1 += 'x' 
str1 = 'emftlnqfufycwqtkm' : <type 'str'>
=> str1 = 'emftlnqfufycwqtkmx' : <type 'str'>
==================================================
path1 = "/Volumes/ramdisk/test"                                         # STEP 33
ACTION: path1 = "/Volumes/ramdisk/test" 
path1 = None : <type 'NoneType'>
=> path1 = '/Volumes/ramdisk/test' : <type 'str'>
==================================================
os0 = newFakeOS()                                                       # STEP 34
ACTION: os0 = newFakeOS() 
os0 = None : <type 'NoneType'>
os_REF0 = None : <type 'NoneType'>
RAISED EXCEPTION: <type 'exceptions.TypeError'> unsupported operand type(s) for //: 'str' and 'str'
ERROR: (<type 'exceptions.TypeError'>, TypeError("unsupported operand type(s) for //: 'str' and 'str'",), <traceback object at 0x1021c3368>)
TRACEBACK:
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 48329, in safely
    act[2]()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 66, in act0
    self.p_os[0] = newFakeOS()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 21, in newFakeOS
    fs.CreateDirectory('/Volumes')
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 2055, in CreateDirectory
    if self.Exists(directory_path):
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1624, in Exists
    file_path = self.ResolvePath(file_path)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1718, in ResolvePath
    file_path = self.NormalizePath(self.NormalizeCase(file_path))
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1329, in NormalizeCase
    return components_to_path()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1305, in components_to_path
    normalized_path = (sep // normalized_path)
STOPPING TESTING DUE TO FAILED TEST
0.0258600711823 TOTAL RUNTIME
1 EXECUTED
35 TOTAL TEST OPERATIONS
0.000965356826782 TIME SPENT EXECUTING TEST OPERATIONS
0.00392580032349 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
1.4066696167e-05 TIME SPENT CHECKING PROPERTIES
0.000979423522949 TOTAL TIME SPENT RUNNING SUT
0.00373816490173 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
