Random testing using config=Config(swarmSwitch=None, maxMustHitBranch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, internal=False, exploit=None, seed=None, generalize=False, fastQuickAnalysis=False, stopWhenNoCoverage=None, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, maxMustHitStatement=None, noCoverageExploit=False, quickTests=False, relax=False, startExploitStall=0, enumerateEnabled=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, stopWhenHitStatement=None, biasLOC=None, progress=False, postCover=False, swarmLength=None, generateLOC=None, noSwarmDependencies=False, profile=False, LOCBaseline=0.2, noEnumerateEnabled=False, full=True, multiple=False, timedProgress=30, silentFail=False, ddmin=False, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.53915.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, markovP=1.0, logging=None, stopWhenHitBranch=None, LOCProbs=False, stopWhenStatements=None, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.0, depth=200, trackMaxCoverage=None, throughput=False, noCover=True, timeout=60, stutter=None, uncaught=False, markov=None, showActions=False, startExploit=0.0)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102e9e7a0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 48329, in safely
    act[2]()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 29241, in act548
    assert (type(raised) == type(refRaised))
Original test has 22 steps

SAVING TEST AS failure.53915.test
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
component1 = "c"                                                         # STEP 0
ACTION: component1 = "c" 
component1 = None : <type 'NoneType'>
=> component1 = 'c' : <type 'str'>
==================================================
component2 = "alpha"                                                     # STEP 1
ACTION: component2 = "alpha" 
component2 = None : <type 'NoneType'>
=> component2 = 'alpha' : <type 'str'>
==================================================
component4 = "d"                                                         # STEP 2
ACTION: component4 = "d" 
component4 = None : <type 'NoneType'>
=> component4 = 'd' : <type 'str'>
==================================================
component0 = "c"                                                         # STEP 3
ACTION: component0 = "c" 
component0 = None : <type 'NoneType'>
=> component0 = 'c' : <type 'str'>
==================================================
bytes1 = 0                                                               # STEP 4
ACTION: bytes1 = 0 
bytes1 = None : <type 'NoneType'>
=> bytes1 = 0 : <type 'int'>
==================================================
path1 = "/Volumes/ramdisk/test"                                          # STEP 5
ACTION: path1 = "/Volumes/ramdisk/test" 
path1 = None : <type 'NoneType'>
=> path1 = '/Volumes/ramdisk/test' : <type 'str'>
==================================================
os0 = newFakeOS()                                                        # STEP 6
ACTION: os0 = newFakeOS() 
os0 = None : <type 'NoneType'>
os_REF0 = None : <type 'NoneType'>
=> os0 = <pyfakefs.fake_filesystem.FakeOsModule object at 0x102ea0a50> : <class 'pyfakefs.fake_filesystem.FakeOsModule'>
REFERENCE ACTION: os_REF0 = os 
=> os_REF0 = <module 'os' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'> : <type 'module'>
==================================================
component3 = "phi"                                                       # STEP 7
ACTION: component3 = "phi" 
component3 = None : <type 'NoneType'>
=> component3 = 'phi' : <type 'str'>
==================================================
bytes2 = 0                                                               # STEP 8
ACTION: bytes2 = 0 
bytes2 = None : <type 'NoneType'>
=> bytes2 = 0 : <type 'int'>
==================================================
result = os0.path.abspath(path1)                                         # STEP 9
ACTION: result = os0.path.abspath(path1) 
os0 = <pyfakefs.fake_filesystem.FakeOsModule object at 0x102ea0a50> : <class 'pyfakefs.fake_filesystem.FakeOsModule'>
path1 = '/Volumes/ramdisk/test' : <type 'str'>
os_REF0 = <module 'os' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'> : <type 'module'>
REFERENCE ACTION: result_REF = os_REF0.path.abspath(path1) 
==================================================
path4 = "/Volumes/ramdisk/test"                                         # STEP 10
ACTION: path4 = "/Volumes/ramdisk/test" 
path4 = None : <type 'NoneType'>
=> path4 = '/Volumes/ramdisk/test' : <type 'str'>
==================================================
result = os0.readlink(path1)                                            # STEP 11
ACTION: result = os0.readlink(path1) 
os0 = <pyfakefs.fake_filesystem.FakeOsModule object at 0x102ea0a50> : <class 'pyfakefs.fake_filesystem.FakeOsModule'>
path1 = '/Volumes/ramdisk/test' : <type 'str'>
os_REF0 = <module 'os' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'> : <type 'module'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.OSError'> [Errno 22] Fake filesystem: not a symlink: '/Volumes/ramdisk/test'
REFERENCE ACTION: result_REF = os_REF0.readlink(path1) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.OSError'> [Errno 22] Invalid argument: '/Volumes/ramdisk/test'
==================================================
path0 = "/Volumes/ramdisk/test"                                         # STEP 12
ACTION: path0 = "/Volumes/ramdisk/test" 
path0 = None : <type 'NoneType'>
=> path0 = '/Volumes/ramdisk/test' : <type 'str'>
==================================================
str1 = ""                                                               # STEP 13
ACTION: str1 = "" 
str1 = None : <type 'NoneType'>
=> str1 = '' : <type 'str'>
==================================================
path4 += "/" + component3                                               # STEP 14
ACTION: path4 += "/" + component3 
component3 = 'phi' : <type 'str'>
path4 = '/Volumes/ramdisk/test' : <type 'str'>
=> path4 = '/Volumes/ramdisk/test/phi' : <type 'str'>
==================================================
str1 += 'z'                                                             # STEP 15
ACTION: str1 += 'z' 
str1 = '' : <type 'str'>
=> str1 = 'z' : <type 'str'>
==================================================
os0.link(path1,path0)                                                   # STEP 16
ACTION: os0.link(path1,path0) 
os0 = <pyfakefs.fake_filesystem.FakeOsModule object at 0x102ea0a50> : <class 'pyfakefs.fake_filesystem.FakeOsModule'>
path1 = '/Volumes/ramdisk/test' : <type 'str'>
path0 = '/Volumes/ramdisk/test' : <type 'str'>
os_REF0 = <module 'os' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'> : <type 'module'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.OSError'> [Errno 17] File already exists in fake filesystem: '/Volumes/ramdisk/test'
REFERENCE ACTION: os_REF0.link(path1,path0) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.OSError'> [Errno 17] File exists
==================================================
fd1 = os0.open(path4, os.O_CREAT)                                       # STEP 17
ACTION: fd1 = os0.open(path4, os.O_CREAT) 
os0 = <pyfakefs.fake_filesystem.FakeOsModule object at 0x102ea0a50> : <class 'pyfakefs.fake_filesystem.FakeOsModule'>
path4 = '/Volumes/ramdisk/test/phi' : <type 'str'>
fd1 = None : <type 'NoneType'>
os_REF0 = <module 'os' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'> : <type 'module'>
fd_REF1 = None : <type 'NoneType'>
=> fd1 = 0 : <type 'int'>
REFERENCE ACTION: fd_REF1 = os_REF0.open(path4, os.O_CREAT) 
=> fd_REF1 = 4 : <type 'int'>
==================================================
result = os0.path.islink(path4)                                         # STEP 18
ACTION: result = os0.path.islink(path4) 
os0 = <pyfakefs.fake_filesystem.FakeOsModule object at 0x102ea0a50> : <class 'pyfakefs.fake_filesystem.FakeOsModule'>
path4 = '/Volumes/ramdisk/test/phi' : <type 'str'>
os_REF0 = <module 'os' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'> : <type 'module'>
REFERENCE ACTION: result_REF = os_REF0.path.islink(path4) 
==================================================
path1 += "/" + component4                                               # STEP 19
ACTION: path1 += "/" + component4 
component4 = 'd' : <type 'str'>
path1 = '/Volumes/ramdisk/test' : <type 'str'>
=> path1 = '/Volumes/ramdisk/test/d' : <type 'str'>
==================================================
str1 += 'f'                                                             # STEP 20
ACTION: str1 += 'f' 
str1 = 'z' : <type 'str'>
=> str1 = 'zf' : <type 'str'>
==================================================
os0.rename(path4,path0)                                                 # STEP 21
ACTION: os0.rename(path4,path0) 
os0 = <pyfakefs.fake_filesystem.FakeOsModule object at 0x102ea0a50> : <class 'pyfakefs.fake_filesystem.FakeOsModule'>
path4 = '/Volumes/ramdisk/test/phi' : <type 'str'>
path0 = '/Volumes/ramdisk/test' : <type 'str'>
os_REF0 = <module 'os' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'> : <type 'module'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IOError'> [Errno 2] No such file or directory in fake filesystem: '/Volumes/ramdisk/test'
REFERENCE ACTION: os_REF0.rename(path4,path0) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.OSError'> [Errno 21] Is a directory
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x104706b00>)
TRACEBACK:
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 48329, in safely
    act[2]()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 29241, in act548
    assert (type(raised) == type(refRaised))
STOPPING TESTING DUE TO FAILED TEST
0.613502025604 TOTAL RUNTIME
11 EXECUTED
2022 TOTAL TEST OPERATIONS
0.451777219772 TIME SPENT EXECUTING TEST OPERATIONS
0.0928347110748 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
0.00110340118408 TIME SPENT CHECKING PROPERTIES
0.452880620956 TOTAL TIME SPENT RUNNING SUT
0.0316064357758 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
