Random testing using config=Config(swarmSwitch=None, maxMustHitBranch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, internal=False, exploit=None, seed=None, generalize=False, fastQuickAnalysis=False, stopWhenNoCoverage=None, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, maxMustHitStatement=None, noCoverageExploit=False, quickTests=False, relax=False, startExploitStall=0, enumerateEnabled=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, stopWhenHitStatement=None, biasLOC=None, progress=False, postCover=False, swarmLength=None, generateLOC=None, noSwarmDependencies=False, profile=False, LOCBaseline=0.2, noEnumerateEnabled=False, full=True, multiple=False, timedProgress=30, silentFail=False, ddmin=False, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.52831.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, markovP=1.0, logging=None, stopWhenHitBranch=None, LOCProbs=False, stopWhenStatements=None, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.0, depth=200, trackMaxCoverage=None, throughput=False, noCover=True, timeout=60, stutter=None, uncaught=False, markov=None, showActions=False, startExploit=0.0)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.TypeError'>, TypeError("can't multiply sequence by non-int of type 'str'",), <traceback object at 0x1033088c0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 48329, in safely
    act[2]()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 66, in act0
    self.p_os[0] = newFakeOS()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 21, in newFakeOS
    fs.CreateDirectory('/Volumes')
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 2055, in CreateDirectory
    if self.Exists(directory_path):
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1624, in Exists
    file_path = self.ResolvePath(file_path)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1718, in ResolvePath
    file_path = self.NormalizePath(self.NormalizeCase(file_path))
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1329, in NormalizeCase
    return components_to_path()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1305, in components_to_path
    normalized_path = (sep * normalized_path)
Original test has 78 steps

SAVING TEST AS failure.52831.test
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
str1 = ""                                                                # STEP 0
ACTION: str1 = "" 
str1 = None : <type 'NoneType'>
=> str1 = '' : <type 'str'>
==================================================
str1 += 'e'                                                              # STEP 1
ACTION: str1 += 'e' 
str1 = '' : <type 'str'>
=> str1 = 'e' : <type 'str'>
==================================================
str1 += 'u'                                                              # STEP 2
ACTION: str1 += 'u' 
str1 = 'e' : <type 'str'>
=> str1 = 'eu' : <type 'str'>
==================================================
component3 = "lambda"                                                    # STEP 3
ACTION: component3 = "lambda" 
component3 = None : <type 'NoneType'>
=> component3 = 'lambda' : <type 'str'>
==================================================
str3 = ""                                                                # STEP 4
ACTION: str3 = "" 
str3 = None : <type 'NoneType'>
=> str3 = '' : <type 'str'>
==================================================
str1 += 'k'                                                              # STEP 5
ACTION: str1 += 'k' 
str1 = 'eu' : <type 'str'>
=> str1 = 'euk' : <type 'str'>
==================================================
str3 += 'd'                                                              # STEP 6
ACTION: str3 += 'd' 
str3 = '' : <type 'str'>
=> str3 = 'd' : <type 'str'>
==================================================
component1 = "delta"                                                     # STEP 7
ACTION: component1 = "delta" 
component1 = None : <type 'NoneType'>
=> component1 = 'delta' : <type 'str'>
==================================================
component4 = "d"                                                         # STEP 8
ACTION: component4 = "d" 
component4 = None : <type 'NoneType'>
=> component4 = 'd' : <type 'str'>
==================================================
str1 += 'h'                                                              # STEP 9
ACTION: str1 += 'h' 
str1 = 'euk' : <type 'str'>
=> str1 = 'eukh' : <type 'str'>
==================================================
component0 = "e"                                                        # STEP 10
ACTION: component0 = "e" 
component0 = None : <type 'NoneType'>
=> component0 = 'e' : <type 'str'>
==================================================
bytes2 = 0                                                              # STEP 11
ACTION: bytes2 = 0 
bytes2 = None : <type 'NoneType'>
=> bytes2 = 0 : <type 'int'>
==================================================
component2 = "c"                                                        # STEP 12
ACTION: component2 = "c" 
component2 = None : <type 'NoneType'>
=> component2 = 'c' : <type 'str'>
==================================================
str3 += 'n'                                                             # STEP 13
ACTION: str3 += 'n' 
str3 = 'd' : <type 'str'>
=> str3 = 'dn' : <type 'str'>
==================================================
str4 = ""                                                               # STEP 14
ACTION: str4 = "" 
str4 = None : <type 'NoneType'>
=> str4 = '' : <type 'str'>
==================================================
str0 = ""                                                               # STEP 15
ACTION: str0 = "" 
str0 = None : <type 'NoneType'>
=> str0 = '' : <type 'str'>
==================================================
str0 += 'm'                                                             # STEP 16
ACTION: str0 += 'm' 
str0 = '' : <type 'str'>
=> str0 = 'm' : <type 'str'>
==================================================
str1 += 'l'                                                             # STEP 17
ACTION: str1 += 'l' 
str1 = 'eukh' : <type 'str'>
=> str1 = 'eukhl' : <type 'str'>
==================================================
str2 = ""                                                               # STEP 18
ACTION: str2 = "" 
str2 = None : <type 'NoneType'>
=> str2 = '' : <type 'str'>
==================================================
str3 += 'u'                                                             # STEP 19
ACTION: str3 += 'u' 
str3 = 'dn' : <type 'str'>
=> str3 = 'dnu' : <type 'str'>
==================================================
str1 += 'q'                                                             # STEP 20
ACTION: str1 += 'q' 
str1 = 'eukhl' : <type 'str'>
=> str1 = 'eukhlq' : <type 'str'>
==================================================
str0 += 'j'                                                             # STEP 21
ACTION: str0 += 'j' 
str0 = 'm' : <type 'str'>
=> str0 = 'mj' : <type 'str'>
==================================================
str2 += 'j'                                                             # STEP 22
ACTION: str2 += 'j' 
str2 = '' : <type 'str'>
=> str2 = 'j' : <type 'str'>
==================================================
str2 += 'n'                                                             # STEP 23
ACTION: str2 += 'n' 
str2 = 'j' : <type 'str'>
=> str2 = 'jn' : <type 'str'>
==================================================
str2 += 'u'                                                             # STEP 24
ACTION: str2 += 'u' 
str2 = 'jn' : <type 'str'>
=> str2 = 'jnu' : <type 'str'>
==================================================
str0 += 'h'                                                             # STEP 25
ACTION: str0 += 'h' 
str0 = 'mj' : <type 'str'>
=> str0 = 'mjh' : <type 'str'>
==================================================
str3 += 'a'                                                             # STEP 26
ACTION: str3 += 'a' 
str3 = 'dnu' : <type 'str'>
=> str3 = 'dnua' : <type 'str'>
==================================================
str3 += 't'                                                             # STEP 27
ACTION: str3 += 't' 
str3 = 'dnua' : <type 'str'>
=> str3 = 'dnuat' : <type 'str'>
==================================================
str2 += 'h'                                                             # STEP 28
ACTION: str2 += 'h' 
str2 = 'jnu' : <type 'str'>
=> str2 = 'jnuh' : <type 'str'>
==================================================
str1 += 'q'                                                             # STEP 29
ACTION: str1 += 'q' 
str1 = 'eukhlq' : <type 'str'>
=> str1 = 'eukhlqq' : <type 'str'>
==================================================
str1 += 'n'                                                             # STEP 30
ACTION: str1 += 'n' 
str1 = 'eukhlqq' : <type 'str'>
=> str1 = 'eukhlqqn' : <type 'str'>
==================================================
str4 += 'u'                                                             # STEP 31
ACTION: str4 += 'u' 
str4 = '' : <type 'str'>
=> str4 = 'u' : <type 'str'>
==================================================
str3 += 'z'                                                             # STEP 32
ACTION: str3 += 'z' 
str3 = 'dnuat' : <type 'str'>
=> str3 = 'dnuatz' : <type 'str'>
==================================================
str4 += 'j'                                                             # STEP 33
ACTION: str4 += 'j' 
str4 = 'u' : <type 'str'>
=> str4 = 'uj' : <type 'str'>
==================================================
path0 = "/Volumes/ramdisk/test"                                         # STEP 34
ACTION: path0 = "/Volumes/ramdisk/test" 
path0 = None : <type 'NoneType'>
=> path0 = '/Volumes/ramdisk/test' : <type 'str'>
==================================================
str3 += 'x'                                                             # STEP 35
ACTION: str3 += 'x' 
str3 = 'dnuatz' : <type 'str'>
=> str3 = 'dnuatzx' : <type 'str'>
==================================================
str3 = ""                                                               # STEP 36
ACTION: str3 = "" 
str3 = 'dnuatzx' : <type 'str'>
=> str3 = '' : <type 'str'>
==================================================
path3 = "/Volumes/ramdisk/test"                                         # STEP 37
ACTION: path3 = "/Volumes/ramdisk/test" 
path3 = None : <type 'NoneType'>
=> path3 = '/Volumes/ramdisk/test' : <type 'str'>
==================================================
path3 += "/" + component1                                               # STEP 38
ACTION: path3 += "/" + component1 
component1 = 'delta' : <type 'str'>
path3 = '/Volumes/ramdisk/test' : <type 'str'>
=> path3 = '/Volumes/ramdisk/test/delta' : <type 'str'>
==================================================
str1 += 'z'                                                             # STEP 39
ACTION: str1 += 'z' 
str1 = 'eukhlqqn' : <type 'str'>
=> str1 = 'eukhlqqnz' : <type 'str'>
==================================================
component1 = "phi"                                                      # STEP 40
ACTION: component1 = "phi" 
component1 = 'delta' : <type 'str'>
=> component1 = 'phi' : <type 'str'>
==================================================
path3 += "/" + component1                                               # STEP 41
ACTION: path3 += "/" + component1 
component1 = 'phi' : <type 'str'>
path3 = '/Volumes/ramdisk/test/delta' : <type 'str'>
=> path3 = '/Volumes/ramdisk/test/delta/phi' : <type 'str'>
==================================================
str0 += 't'                                                             # STEP 42
ACTION: str0 += 't' 
str0 = 'mjh' : <type 'str'>
=> str0 = 'mjht' : <type 'str'>
==================================================
str0 += 'e'                                                             # STEP 43
ACTION: str0 += 'e' 
str0 = 'mjht' : <type 'str'>
=> str0 = 'mjhte' : <type 'str'>
==================================================
str0 += 'v'                                                             # STEP 44
ACTION: str0 += 'v' 
str0 = 'mjhte' : <type 'str'>
=> str0 = 'mjhtev' : <type 'str'>
==================================================
str2 += 'd'                                                             # STEP 45
ACTION: str2 += 'd' 
str2 = 'jnuh' : <type 'str'>
=> str2 = 'jnuhd' : <type 'str'>
==================================================
str3 += 'v'                                                             # STEP 46
ACTION: str3 += 'v' 
str3 = '' : <type 'str'>
=> str3 = 'v' : <type 'str'>
==================================================
str1 += 'y'                                                             # STEP 47
ACTION: str1 += 'y' 
str1 = 'eukhlqqnz' : <type 'str'>
=> str1 = 'eukhlqqnzy' : <type 'str'>
==================================================
str2 += 'v'                                                             # STEP 48
ACTION: str2 += 'v' 
str2 = 'jnuhd' : <type 'str'>
=> str2 = 'jnuhdv' : <type 'str'>
==================================================
str2 += 'g'                                                             # STEP 49
ACTION: str2 += 'g' 
str2 = 'jnuhdv' : <type 'str'>
=> str2 = 'jnuhdvg' : <type 'str'>
==================================================
str3 += 'r'                                                             # STEP 50
ACTION: str3 += 'r' 
str3 = 'v' : <type 'str'>
=> str3 = 'vr' : <type 'str'>
==================================================
str0 += 'o'                                                             # STEP 51
ACTION: str0 += 'o' 
str0 = 'mjhtev' : <type 'str'>
=> str0 = 'mjhtevo' : <type 'str'>
==================================================
str2 += 'g'                                                             # STEP 52
ACTION: str2 += 'g' 
str2 = 'jnuhdvg' : <type 'str'>
=> str2 = 'jnuhdvgg' : <type 'str'>
==================================================
str3 += 'c'                                                             # STEP 53
ACTION: str3 += 'c' 
str3 = 'vr' : <type 'str'>
=> str3 = 'vrc' : <type 'str'>
==================================================
str1 += 'y'                                                             # STEP 54
ACTION: str1 += 'y' 
str1 = 'eukhlqqnzy' : <type 'str'>
=> str1 = 'eukhlqqnzyy' : <type 'str'>
==================================================
str2 += 's'                                                             # STEP 55
ACTION: str2 += 's' 
str2 = 'jnuhdvgg' : <type 'str'>
=> str2 = 'jnuhdvggs' : <type 'str'>
==================================================
path3 += "/" + component2                                               # STEP 56
ACTION: path3 += "/" + component2 
component2 = 'c' : <type 'str'>
path3 = '/Volumes/ramdisk/test/delta/phi' : <type 'str'>
=> path3 = '/Volumes/ramdisk/test/delta/phi/c' : <type 'str'>
==================================================
str2 += 'z'                                                             # STEP 57
ACTION: str2 += 'z' 
str2 = 'jnuhdvggs' : <type 'str'>
=> str2 = 'jnuhdvggsz' : <type 'str'>
==================================================
component2 = "c"                                                        # STEP 58
ACTION: component2 = "c" 
component2 = 'c' : <type 'str'>
==================================================
str2 += 'p'                                                             # STEP 59
ACTION: str2 += 'p' 
str2 = 'jnuhdvggsz' : <type 'str'>
=> str2 = 'jnuhdvggszp' : <type 'str'>
==================================================
path0 += "/" + component2                                               # STEP 60
ACTION: path0 += "/" + component2 
component2 = 'c' : <type 'str'>
path0 = '/Volumes/ramdisk/test' : <type 'str'>
=> path0 = '/Volumes/ramdisk/test/c' : <type 'str'>
==================================================
component1 = "b"                                                        # STEP 61
ACTION: component1 = "b" 
component1 = 'phi' : <type 'str'>
=> component1 = 'b' : <type 'str'>
==================================================
str4 += 'k'                                                             # STEP 62
ACTION: str4 += 'k' 
str4 = 'uj' : <type 'str'>
=> str4 = 'ujk' : <type 'str'>
==================================================
str1 += 'h'                                                             # STEP 63
ACTION: str1 += 'h' 
str1 = 'eukhlqqnzyy' : <type 'str'>
=> str1 = 'eukhlqqnzyyh' : <type 'str'>
==================================================
str1 += 'k'                                                             # STEP 64
ACTION: str1 += 'k' 
str1 = 'eukhlqqnzyyh' : <type 'str'>
=> str1 = 'eukhlqqnzyyhk' : <type 'str'>
==================================================
bytes1 = 0                                                              # STEP 65
ACTION: bytes1 = 0 
bytes1 = None : <type 'NoneType'>
=> bytes1 = 0 : <type 'int'>
==================================================
str4 = ""                                                               # STEP 66
ACTION: str4 = "" 
str4 = 'ujk' : <type 'str'>
=> str4 = '' : <type 'str'>
==================================================
component2 = "e"                                                        # STEP 67
ACTION: component2 = "e" 
component2 = 'c' : <type 'str'>
=> component2 = 'e' : <type 'str'>
==================================================
str4 += " "                                                             # STEP 68
ACTION: str4 += " " 
str4 = '' : <type 'str'>
=> str4 = ' ' : <type 'str'>
==================================================
str4 += 'd'                                                             # STEP 69
ACTION: str4 += 'd' 
str4 = ' ' : <type 'str'>
=> str4 = ' d' : <type 'str'>
==================================================
str1 += 'i'                                                             # STEP 70
ACTION: str1 += 'i' 
str1 = 'eukhlqqnzyyhk' : <type 'str'>
=> str1 = 'eukhlqqnzyyhki' : <type 'str'>
==================================================
str2 += 'i'                                                             # STEP 71
ACTION: str2 += 'i' 
str2 = 'jnuhdvggszp' : <type 'str'>
=> str2 = 'jnuhdvggszpi' : <type 'str'>
==================================================
str3 += 'o'                                                             # STEP 72
ACTION: str3 += 'o' 
str3 = 'vrc' : <type 'str'>
=> str3 = 'vrco' : <type 'str'>
==================================================
str2 += 'e'                                                             # STEP 73
ACTION: str2 += 'e' 
str2 = 'jnuhdvggszpi' : <type 'str'>
=> str2 = 'jnuhdvggszpie' : <type 'str'>
==================================================
str4 += 'x'                                                             # STEP 74
ACTION: str4 += 'x' 
str4 = ' d' : <type 'str'>
=> str4 = ' dx' : <type 'str'>
==================================================
str2 += 'l'                                                             # STEP 75
ACTION: str2 += 'l' 
str2 = 'jnuhdvggszpie' : <type 'str'>
=> str2 = 'jnuhdvggszpiel' : <type 'str'>
==================================================
str2 += 'i'                                                             # STEP 76
ACTION: str2 += 'i' 
str2 = 'jnuhdvggszpiel' : <type 'str'>
=> str2 = 'jnuhdvggszpieli' : <type 'str'>
==================================================
os0 = newFakeOS()                                                       # STEP 77
ACTION: os0 = newFakeOS() 
os0 = None : <type 'NoneType'>
os_REF0 = None : <type 'NoneType'>
RAISED EXCEPTION: <type 'exceptions.TypeError'> can't multiply sequence by non-int of type 'str'
ERROR: (<type 'exceptions.TypeError'>, TypeError("can't multiply sequence by non-int of type 'str'",), <traceback object at 0x1005aa3b0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 48329, in safely
    act[2]()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 66, in act0
    self.p_os[0] = newFakeOS()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 21, in newFakeOS
    fs.CreateDirectory('/Volumes')
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 2055, in CreateDirectory
    if self.Exists(directory_path):
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1624, in Exists
    file_path = self.ResolvePath(file_path)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1718, in ResolvePath
    file_path = self.NormalizePath(self.NormalizeCase(file_path))
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1329, in NormalizeCase
    return components_to_path()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1305, in components_to_path
    normalized_path = (sep * normalized_path)
STOPPING TESTING DUE TO FAILED TEST
0.0315718650818 TOTAL RUNTIME
1 EXECUTED
78 TOTAL TEST OPERATIONS
0.0022189617157 TIME SPENT EXECUTING TEST OPERATIONS
0.00302028656006 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
3.17096710205e-05 TIME SPENT CHECKING PROPERTIES
0.00225067138672 TOTAL TIME SPENT RUNNING SUT
0.00308394432068 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
