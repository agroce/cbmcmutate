Random testing using config=Config(swarmSwitch=None, maxMustHitBranch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, internal=False, exploit=None, seed=None, generalize=False, fastQuickAnalysis=False, stopWhenNoCoverage=None, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, maxMustHitStatement=None, noCoverageExploit=False, quickTests=False, relax=False, startExploitStall=0, enumerateEnabled=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, stopWhenHitStatement=None, biasLOC=None, progress=False, postCover=False, swarmLength=None, generateLOC=None, noSwarmDependencies=False, profile=False, LOCBaseline=0.2, noEnumerateEnabled=False, full=True, multiple=False, timedProgress=30, silentFail=False, ddmin=False, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.58467.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, markovP=1.0, logging=None, stopWhenHitBranch=None, LOCProbs=False, stopWhenStatements=None, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.0, depth=200, trackMaxCoverage=None, throughput=False, noCover=True, timeout=60, stutter=None, uncaught=False, markov=None, showActions=False, startExploit=0.0)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.TypeError'>, TypeError("unsupported operand type(s) for //: 'str' and 'str'",), <traceback object at 0x104a2f2d8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 48329, in safely
    act[2]()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 25545, in act493
    self.p_stat[1] = self.p_os[0].lstat(self.p_path[0])
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 3560, in lstat
    return self.filesystem.GetStat(entry_path, follow_symlinks=False)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1081, in GetStat
    file_object = self.ResolveObject(entry_path, follow_symlinks, allow_fd=True)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1839, in ResolveObject
    return self.LResolveObject(file_path)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1862, in LResolveObject
    (parent_directory, child_name) = self.SplitPath(path)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1390, in SplitPath
    return ((drive // sep.join(path_components)), basename)
Original test has 34 steps

SAVING TEST AS failure.58467.test
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
bytes2 = 0                                                               # STEP 0
ACTION: bytes2 = 0 
bytes2 = None : <type 'NoneType'>
=> bytes2 = 0 : <type 'int'>
==================================================
path2 = "/Volumes/ramdisk/test"                                          # STEP 1
ACTION: path2 = "/Volumes/ramdisk/test" 
path2 = None : <type 'NoneType'>
=> path2 = '/Volumes/ramdisk/test' : <type 'str'>
==================================================
component3 = "e"                                                         # STEP 2
ACTION: component3 = "e" 
component3 = None : <type 'NoneType'>
=> component3 = 'e' : <type 'str'>
==================================================
component1 = "alpha"                                                     # STEP 3
ACTION: component1 = "alpha" 
component1 = None : <type 'NoneType'>
=> component1 = 'alpha' : <type 'str'>
==================================================
path0 = "/Volumes/ramdisk/test"                                          # STEP 4
ACTION: path0 = "/Volumes/ramdisk/test" 
path0 = None : <type 'NoneType'>
=> path0 = '/Volumes/ramdisk/test' : <type 'str'>
==================================================
str3 = ""                                                                # STEP 5
ACTION: str3 = "" 
str3 = None : <type 'NoneType'>
=> str3 = '' : <type 'str'>
==================================================
str3 += 'z'                                                              # STEP 6
ACTION: str3 += 'z' 
str3 = '' : <type 'str'>
=> str3 = 'z' : <type 'str'>
==================================================
component4 = "g"                                                         # STEP 7
ACTION: component4 = "g" 
component4 = None : <type 'NoneType'>
=> component4 = 'g' : <type 'str'>
==================================================
bytes1 = 0                                                               # STEP 8
ACTION: bytes1 = 0 
bytes1 = None : <type 'NoneType'>
=> bytes1 = 0 : <type 'int'>
==================================================
str4 = ""                                                                # STEP 9
ACTION: str4 = "" 
str4 = None : <type 'NoneType'>
=> str4 = '' : <type 'str'>
==================================================
component0 = "a"                                                        # STEP 10
ACTION: component0 = "a" 
component0 = None : <type 'NoneType'>
=> component0 = 'a' : <type 'str'>
==================================================
str3 += 'o'                                                             # STEP 11
ACTION: str3 += 'o' 
str3 = 'z' : <type 'str'>
=> str3 = 'zo' : <type 'str'>
==================================================
component2 = "delta"                                                    # STEP 12
ACTION: component2 = "delta" 
component2 = None : <type 'NoneType'>
=> component2 = 'delta' : <type 'str'>
==================================================
str4 += 'k'                                                             # STEP 13
ACTION: str4 += 'k' 
str4 = '' : <type 'str'>
=> str4 = 'k' : <type 'str'>
==================================================
str3 += 'q'                                                             # STEP 14
ACTION: str3 += 'q' 
str3 = 'zo' : <type 'str'>
=> str3 = 'zoq' : <type 'str'>
==================================================
str0 = ""                                                               # STEP 15
ACTION: str0 = "" 
str0 = None : <type 'NoneType'>
=> str0 = '' : <type 'str'>
==================================================
str0 += 'o'                                                             # STEP 16
ACTION: str0 += 'o' 
str0 = '' : <type 'str'>
=> str0 = 'o' : <type 'str'>
==================================================
str3 += 'd'                                                             # STEP 17
ACTION: str3 += 'd' 
str3 = 'zoq' : <type 'str'>
=> str3 = 'zoqd' : <type 'str'>
==================================================
str0 += 't'                                                             # STEP 18
ACTION: str0 += 't' 
str0 = 'o' : <type 'str'>
=> str0 = 'ot' : <type 'str'>
==================================================
str0 += 'x'                                                             # STEP 19
ACTION: str0 += 'x' 
str0 = 'ot' : <type 'str'>
=> str0 = 'otx' : <type 'str'>
==================================================
str0 += 'r'                                                             # STEP 20
ACTION: str0 += 'r' 
str0 = 'otx' : <type 'str'>
=> str0 = 'otxr' : <type 'str'>
==================================================
str0 += 'm'                                                             # STEP 21
ACTION: str0 += 'm' 
str0 = 'otxr' : <type 'str'>
=> str0 = 'otxrm' : <type 'str'>
==================================================
bytes0 = 0                                                              # STEP 22
ACTION: bytes0 = 0 
bytes0 = None : <type 'NoneType'>
=> bytes0 = 0 : <type 'int'>
==================================================
str3 += 'r'                                                             # STEP 23
ACTION: str3 += 'r' 
str3 = 'zoqd' : <type 'str'>
=> str3 = 'zoqdr' : <type 'str'>
==================================================
str0 += 'v'                                                             # STEP 24
ACTION: str0 += 'v' 
str0 = 'otxrm' : <type 'str'>
=> str0 = 'otxrmv' : <type 'str'>
==================================================
path0 += "/" + component1                                               # STEP 25
ACTION: path0 += "/" + component1 
component1 = 'alpha' : <type 'str'>
path0 = '/Volumes/ramdisk/test' : <type 'str'>
=> path0 = '/Volumes/ramdisk/test/alpha' : <type 'str'>
==================================================
component1 = "epsilon"                                                  # STEP 26
ACTION: component1 = "epsilon" 
component1 = 'alpha' : <type 'str'>
=> component1 = 'epsilon' : <type 'str'>
==================================================
str0 += 'z'                                                             # STEP 27
ACTION: str0 += 'z' 
str0 = 'otxrmv' : <type 'str'>
=> str0 = 'otxrmvz' : <type 'str'>
==================================================
str0 += 't'                                                             # STEP 28
ACTION: str0 += 't' 
str0 = 'otxrmvz' : <type 'str'>
=> str0 = 'otxrmvzt' : <type 'str'>
==================================================
str3 += 'f'                                                             # STEP 29
ACTION: str3 += 'f' 
str3 = 'zoqdr' : <type 'str'>
=> str3 = 'zoqdrf' : <type 'str'>
==================================================
os0 = newFakeOS()                                                       # STEP 30
ACTION: os0 = newFakeOS() 
os0 = None : <type 'NoneType'>
os_REF0 = None : <type 'NoneType'>
=> os0 = <pyfakefs.fake_filesystem.FakeOsModule object at 0x103604050> : <class 'pyfakefs.fake_filesystem.FakeOsModule'>
REFERENCE ACTION: os_REF0 = os 
=> os_REF0 = <module 'os' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'> : <type 'module'>
==================================================
result = os0.path.abspath(path2)                                        # STEP 31
ACTION: result = os0.path.abspath(path2) 
os0 = <pyfakefs.fake_filesystem.FakeOsModule object at 0x103604050> : <class 'pyfakefs.fake_filesystem.FakeOsModule'>
path2 = '/Volumes/ramdisk/test' : <type 'str'>
os_REF0 = <module 'os' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'> : <type 'module'>
REFERENCE ACTION: result_REF = os_REF0.path.abspath(path2) 
==================================================
str3 += 'y'                                                             # STEP 32
ACTION: str3 += 'y' 
str3 = 'zoqdrf' : <type 'str'>
=> str3 = 'zoqdrfy' : <type 'str'>
==================================================
stat1 = os0.lstat(path0)                                                # STEP 33
ACTION: stat1 = os0.lstat(path0) 
stat1 = None : <type 'NoneType'>
os0 = <pyfakefs.fake_filesystem.FakeOsModule object at 0x103604050> : <class 'pyfakefs.fake_filesystem.FakeOsModule'>
path0 = '/Volumes/ramdisk/test/alpha' : <type 'str'>
stat_REF1 = None : <type 'NoneType'>
os_REF0 = <module 'os' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'> : <type 'module'>
RAISED EXCEPTION: <type 'exceptions.TypeError'> unsupported operand type(s) for //: 'str' and 'str'
ERROR: (<type 'exceptions.TypeError'>, TypeError("unsupported operand type(s) for //: 'str' and 'str'",), <traceback object at 0x104da7b90>)
TRACEBACK:
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 48329, in safely
    act[2]()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 25545, in act493
    self.p_stat[1] = self.p_os[0].lstat(self.p_path[0])
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 3560, in lstat
    return self.filesystem.GetStat(entry_path, follow_symlinks=False)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1081, in GetStat
    file_object = self.ResolveObject(entry_path, follow_symlinks, allow_fd=True)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1839, in ResolveObject
    return self.LResolveObject(file_path)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1862, in LResolveObject
    (parent_directory, child_name) = self.SplitPath(path)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1390, in SplitPath
    return ((drive // sep.join(path_components)), basename)
STOPPING TESTING DUE TO FAILED TEST
0.0494570732117 TOTAL RUNTIME
2 EXECUTED
234 TOTAL TEST OPERATIONS
0.00541758537292 TIME SPENT EXECUTING TEST OPERATIONS
0.0130684375763 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
0.000122547149658 TIME SPENT CHECKING PROPERTIES
0.00554013252258 TOTAL TIME SPENT RUNNING SUT
0.00761198997498 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
