Random testing using config=Config(swarmSwitch=None, maxMustHitBranch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, internal=False, exploit=None, seed=None, generalize=False, fastQuickAnalysis=False, stopWhenNoCoverage=None, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, maxMustHitStatement=None, noCoverageExploit=False, quickTests=False, relax=False, startExploitStall=0, enumerateEnabled=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, stopWhenHitStatement=None, biasLOC=None, progress=False, postCover=False, swarmLength=None, generateLOC=None, noSwarmDependencies=False, profile=False, LOCBaseline=0.2, noEnumerateEnabled=False, full=True, multiple=False, timedProgress=30, silentFail=False, ddmin=False, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.64764.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, markovP=1.0, logging=None, stopWhenHitBranch=None, LOCProbs=False, stopWhenStatements=None, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.0, depth=200, trackMaxCoverage=None, throughput=False, noCover=True, timeout=60, stutter=None, uncaught=False, markov=None, showActions=False, startExploit=0.0)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1005de1b8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 48329, in safely
    act[2]()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 9599, in act264
    assert (type(raised) == type(refRaised))
Original test has 32 steps

SAVING TEST AS failure.64764.test
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
component4 = "f"                                                         # STEP 0
ACTION: component4 = "f" 
component4 = None : <type 'NoneType'>
=> component4 = 'f' : <type 'str'>
==================================================
component2 = "omega"                                                     # STEP 1
ACTION: component2 = "omega" 
component2 = None : <type 'NoneType'>
=> component2 = 'omega' : <type 'str'>
==================================================
str2 = ""                                                                # STEP 2
ACTION: str2 = "" 
str2 = None : <type 'NoneType'>
=> str2 = '' : <type 'str'>
==================================================
path3 = "/Volumes/ramdisk/test"                                          # STEP 3
ACTION: path3 = "/Volumes/ramdisk/test" 
path3 = None : <type 'NoneType'>
=> path3 = '/Volumes/ramdisk/test' : <type 'str'>
==================================================
str2 += 'k'                                                              # STEP 4
ACTION: str2 += 'k' 
str2 = '' : <type 'str'>
=> str2 = 'k' : <type 'str'>
==================================================
str2 += 'z'                                                              # STEP 5
ACTION: str2 += 'z' 
str2 = 'k' : <type 'str'>
=> str2 = 'kz' : <type 'str'>
==================================================
component3 = "epsilon"                                                   # STEP 6
ACTION: component3 = "epsilon" 
component3 = None : <type 'NoneType'>
=> component3 = 'epsilon' : <type 'str'>
==================================================
str2 += 'r'                                                              # STEP 7
ACTION: str2 += 'r' 
str2 = 'kz' : <type 'str'>
=> str2 = 'kzr' : <type 'str'>
==================================================
path1 = "/Volumes/ramdisk/test"                                          # STEP 8
ACTION: path1 = "/Volumes/ramdisk/test" 
path1 = None : <type 'NoneType'>
=> path1 = '/Volumes/ramdisk/test' : <type 'str'>
==================================================
component1 = "gamma"                                                     # STEP 9
ACTION: component1 = "gamma" 
component1 = None : <type 'NoneType'>
=> component1 = 'gamma' : <type 'str'>
==================================================
component0 = "b"                                                        # STEP 10
ACTION: component0 = "b" 
component0 = None : <type 'NoneType'>
=> component0 = 'b' : <type 'str'>
==================================================
bytes0 = 0                                                              # STEP 11
ACTION: bytes0 = 0 
bytes0 = None : <type 'NoneType'>
=> bytes0 = 0 : <type 'int'>
==================================================
str2 += 'w'                                                             # STEP 12
ACTION: str2 += 'w' 
str2 = 'kzr' : <type 'str'>
=> str2 = 'kzrw' : <type 'str'>
==================================================
str3 = ""                                                               # STEP 13
ACTION: str3 = "" 
str3 = None : <type 'NoneType'>
=> str3 = '' : <type 'str'>
==================================================
str3 += 'z'                                                             # STEP 14
ACTION: str3 += 'z' 
str3 = '' : <type 'str'>
=> str3 = 'z' : <type 'str'>
==================================================
str2 += 'r'                                                             # STEP 15
ACTION: str2 += 'r' 
str2 = 'kzrw' : <type 'str'>
=> str2 = 'kzrwr' : <type 'str'>
==================================================
str2 += 'i'                                                             # STEP 16
ACTION: str2 += 'i' 
str2 = 'kzrwr' : <type 'str'>
=> str2 = 'kzrwri' : <type 'str'>
==================================================
path3 += "/" + component2                                               # STEP 17
ACTION: path3 += "/" + component2 
component2 = 'omega' : <type 'str'>
path3 = '/Volumes/ramdisk/test' : <type 'str'>
=> path3 = '/Volumes/ramdisk/test/omega' : <type 'str'>
==================================================
component2 = "h"                                                        # STEP 18
ACTION: component2 = "h" 
component2 = 'omega' : <type 'str'>
=> component2 = 'h' : <type 'str'>
==================================================
path1 += "/" + component3                                               # STEP 19
ACTION: path1 += "/" + component3 
component3 = 'epsilon' : <type 'str'>
path1 = '/Volumes/ramdisk/test' : <type 'str'>
=> path1 = '/Volumes/ramdisk/test/epsilon' : <type 'str'>
==================================================
str3 += 'j'                                                             # STEP 20
ACTION: str3 += 'j' 
str3 = 'z' : <type 'str'>
=> str3 = 'zj' : <type 'str'>
==================================================
str2 += 'c'                                                             # STEP 21
ACTION: str2 += 'c' 
str2 = 'kzrwri' : <type 'str'>
=> str2 = 'kzrwric' : <type 'str'>
==================================================
component3 = "h"                                                        # STEP 22
ACTION: component3 = "h" 
component3 = 'epsilon' : <type 'str'>
=> component3 = 'h' : <type 'str'>
==================================================
str3 += 'q'                                                             # STEP 23
ACTION: str3 += 'q' 
str3 = 'zj' : <type 'str'>
=> str3 = 'zjq' : <type 'str'>
==================================================
path2 = "/Volumes/ramdisk/test"                                         # STEP 24
ACTION: path2 = "/Volumes/ramdisk/test" 
path2 = None : <type 'NoneType'>
=> path2 = '/Volumes/ramdisk/test' : <type 'str'>
==================================================
str3 += 'm'                                                             # STEP 25
ACTION: str3 += 'm' 
str3 = 'zjq' : <type 'str'>
=> str3 = 'zjqm' : <type 'str'>
==================================================
str2 += 't'                                                             # STEP 26
ACTION: str2 += 't' 
str2 = 'kzrwric' : <type 'str'>
=> str2 = 'kzrwrict' : <type 'str'>
==================================================
os0 = newFakeOS()                                                       # STEP 27
ACTION: os0 = newFakeOS() 
os0 = None : <type 'NoneType'>
os_REF0 = None : <type 'NoneType'>
=> os0 = <pyfakefs.fake_filesystem.FakeOsModule object at 0x10401e950> : <class 'pyfakefs.fake_filesystem.FakeOsModule'>
REFERENCE ACTION: os_REF0 = os 
=> os_REF0 = <module 'os' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'> : <type 'module'>
==================================================
stat1 = os0.stat(path1)                                                 # STEP 28
ACTION: stat1 = os0.stat(path1) 
stat1 = None : <type 'NoneType'>
os0 = <pyfakefs.fake_filesystem.FakeOsModule object at 0x10401e950> : <class 'pyfakefs.fake_filesystem.FakeOsModule'>
path1 = '/Volumes/ramdisk/test/epsilon' : <type 'str'>
stat_REF1 = None : <type 'NoneType'>
os_REF0 = <module 'os' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'> : <type 'module'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.OSError'> [Errno 2] No such file or directory in fake filesystem: '/Volumes/ramdisk/test/epsilon'
REFERENCE ACTION: stat_REF1 = os_REF0.stat(path1) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.OSError'> [Errno 2] No such file or directory: '/Volumes/ramdisk/test/epsilon'
==================================================
fd1 = os0.open(path1, os.O_CREAT | os.O_WRONLY | os.O_TRUNC | os.O_EXCL)  # STEP 29
ACTION: fd1 = os0.open(path1, os.O_CREAT | os.O_WRONLY | os.O_TRUNC | os.O_EXCL) 
os0 = <pyfakefs.fake_filesystem.FakeOsModule object at 0x10401e950> : <class 'pyfakefs.fake_filesystem.FakeOsModule'>
path1 = '/Volumes/ramdisk/test/epsilon' : <type 'str'>
fd1 = None : <type 'NoneType'>
os_REF0 = <module 'os' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'> : <type 'module'>
fd_REF1 = None : <type 'NoneType'>
=> fd1 = 0 : <type 'int'>
REFERENCE ACTION: fd_REF1 = os_REF0.open(path1, os.O_CREAT | os.O_WRONLY | os.O_TRUNC | os.O_EXCL) 
=> fd_REF1 = 4 : <type 'int'>
==================================================
path1 = "/Volumes/ramdisk/test"                                         # STEP 30
ACTION: path1 = "/Volumes/ramdisk/test" 
path1 = '/Volumes/ramdisk/test/epsilon' : <type 'str'>
=> path1 = '/Volumes/ramdisk/test' : <type 'str'>
==================================================
os0.mkdir(path3)                                                        # STEP 31
ACTION: os0.mkdir(path3) 
os0 = <pyfakefs.fake_filesystem.FakeOsModule object at 0x10401e950> : <class 'pyfakefs.fake_filesystem.FakeOsModule'>
path3 = '/Volumes/ramdisk/test/omega' : <type 'str'>
os_REF0 = <module 'os' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'> : <type 'module'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.OSError'> [Errno 2] Empty directory name
REFERENCE ACTION: os_REF0.mkdir(path3) 
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103c98a70>)
TRACEBACK:
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 48329, in safely
    act[2]()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 9599, in act264
    assert (type(raised) == type(refRaised))
STOPPING TESTING DUE TO FAILED TEST
0.195033073425 TOTAL RUNTIME
4 EXECUTED
632 TOTAL TEST OPERATIONS
0.129490613937 TIME SPENT EXECUTING TEST OPERATIONS
0.0312111377716 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
0.000330209732056 TIME SPENT CHECKING PROPERTIES
0.129820823669 TOTAL TIME SPENT RUNNING SUT
0.0126271247864 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
