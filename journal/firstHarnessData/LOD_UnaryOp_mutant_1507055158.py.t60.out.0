Random testing using config=Config(swarmSwitch=None, maxMustHitBranch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, internal=False, exploit=None, seed=None, generalize=False, fastQuickAnalysis=False, stopWhenNoCoverage=None, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, maxMustHitStatement=None, noCoverageExploit=False, quickTests=False, relax=False, startExploitStall=0, enumerateEnabled=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, stopWhenHitStatement=None, biasLOC=None, progress=False, postCover=False, swarmLength=None, generateLOC=None, noSwarmDependencies=False, profile=False, LOCBaseline=0.2, noEnumerateEnabled=False, full=True, multiple=False, timedProgress=30, silentFail=False, ddmin=False, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.50832.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, markovP=1.0, logging=None, stopWhenHitBranch=None, LOCProbs=False, stopWhenStatements=None, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.0, depth=200, trackMaxCoverage=None, throughput=False, noCover=True, timeout=60, stutter=None, uncaught=False, markov=None, showActions=False, startExploit=0.0)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10408cb00>)
TRACEBACK:
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 48329, in safely
    act[2]()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 10835, in act284
    assert (type(raised) == type(refRaised))
Original test has 50 steps

SAVING TEST AS failure.50832.test
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
component0 = "epsilon"                                                   # STEP 0
ACTION: component0 = "epsilon" 
component0 = None : <type 'NoneType'>
=> component0 = 'epsilon' : <type 'str'>
==================================================
component1 = "h"                                                         # STEP 1
ACTION: component1 = "h" 
component1 = None : <type 'NoneType'>
=> component1 = 'h' : <type 'str'>
==================================================
component3 = "omega"                                                     # STEP 2
ACTION: component3 = "omega" 
component3 = None : <type 'NoneType'>
=> component3 = 'omega' : <type 'str'>
==================================================
component4 = "c"                                                         # STEP 3
ACTION: component4 = "c" 
component4 = None : <type 'NoneType'>
=> component4 = 'c' : <type 'str'>
==================================================
bytes4 = 0                                                               # STEP 4
ACTION: bytes4 = 0 
bytes4 = None : <type 'NoneType'>
=> bytes4 = 0 : <type 'int'>
==================================================
component2 = "h"                                                         # STEP 5
ACTION: component2 = "h" 
component2 = None : <type 'NoneType'>
=> component2 = 'h' : <type 'str'>
==================================================
str1 = ""                                                                # STEP 6
ACTION: str1 = "" 
str1 = None : <type 'NoneType'>
=> str1 = '' : <type 'str'>
==================================================
path2 = "/Volumes/ramdisk/test"                                          # STEP 7
ACTION: path2 = "/Volumes/ramdisk/test" 
path2 = None : <type 'NoneType'>
=> path2 = '/Volumes/ramdisk/test' : <type 'str'>
==================================================
str1 += " "                                                              # STEP 8
ACTION: str1 += " " 
str1 = '' : <type 'str'>
=> str1 = ' ' : <type 'str'>
==================================================
str2 = ""                                                                # STEP 9
ACTION: str2 = "" 
str2 = None : <type 'NoneType'>
=> str2 = '' : <type 'str'>
==================================================
path3 = "/Volumes/ramdisk/test"                                         # STEP 10
ACTION: path3 = "/Volumes/ramdisk/test" 
path3 = None : <type 'NoneType'>
=> path3 = '/Volumes/ramdisk/test' : <type 'str'>
==================================================
str2 += 'p'                                                             # STEP 11
ACTION: str2 += 'p' 
str2 = '' : <type 'str'>
=> str2 = 'p' : <type 'str'>
==================================================
str1 += 'n'                                                             # STEP 12
ACTION: str1 += 'n' 
str1 = ' ' : <type 'str'>
=> str1 = ' n' : <type 'str'>
==================================================
str2 += 'd'                                                             # STEP 13
ACTION: str2 += 'd' 
str2 = 'p' : <type 'str'>
=> str2 = 'pd' : <type 'str'>
==================================================
str1 += 's'                                                             # STEP 14
ACTION: str1 += 's' 
str1 = ' n' : <type 'str'>
=> str1 = ' ns' : <type 'str'>
==================================================
path2 += "/" + component3                                               # STEP 15
ACTION: path2 += "/" + component3 
component3 = 'omega' : <type 'str'>
path2 = '/Volumes/ramdisk/test' : <type 'str'>
=> path2 = '/Volumes/ramdisk/test/omega' : <type 'str'>
==================================================
str2 += 'r'                                                             # STEP 16
ACTION: str2 += 'r' 
str2 = 'pd' : <type 'str'>
=> str2 = 'pdr' : <type 'str'>
==================================================
str2 += 'e'                                                             # STEP 17
ACTION: str2 += 'e' 
str2 = 'pdr' : <type 'str'>
=> str2 = 'pdre' : <type 'str'>
==================================================
path2 += "/" + component1                                               # STEP 18
ACTION: path2 += "/" + component1 
component1 = 'h' : <type 'str'>
path2 = '/Volumes/ramdisk/test/omega' : <type 'str'>
=> path2 = '/Volumes/ramdisk/test/omega/h' : <type 'str'>
==================================================
component1 = "b"                                                        # STEP 19
ACTION: component1 = "b" 
component1 = 'h' : <type 'str'>
=> component1 = 'b' : <type 'str'>
==================================================
str1 += 'c'                                                             # STEP 20
ACTION: str1 += 'c' 
str1 = ' ns' : <type 'str'>
=> str1 = ' nsc' : <type 'str'>
==================================================
str1 += 'q'                                                             # STEP 21
ACTION: str1 += 'q' 
str1 = ' nsc' : <type 'str'>
=> str1 = ' nscq' : <type 'str'>
==================================================
path3 += "/" + component3                                               # STEP 22
ACTION: path3 += "/" + component3 
component3 = 'omega' : <type 'str'>
path3 = '/Volumes/ramdisk/test' : <type 'str'>
=> path3 = '/Volumes/ramdisk/test/omega' : <type 'str'>
==================================================
bytes4 += 1                                                             # STEP 23
ACTION: bytes4 += 1 
bytes4 = 0 : <type 'int'>
=> bytes4 = 1 : <type 'int'>
==================================================
str2 += 'o'                                                             # STEP 24
ACTION: str2 += 'o' 
str2 = 'pdre' : <type 'str'>
=> str2 = 'pdreo' : <type 'str'>
==================================================
str1 += 'd'                                                             # STEP 25
ACTION: str1 += 'd' 
str1 = ' nscq' : <type 'str'>
=> str1 = ' nscqd' : <type 'str'>
==================================================
str1 = ""                                                               # STEP 26
ACTION: str1 = "" 
str1 = ' nscqd' : <type 'str'>
=> str1 = '' : <type 'str'>
==================================================
path2 = "/Volumes/ramdisk/test"                                         # STEP 27
ACTION: path2 = "/Volumes/ramdisk/test" 
path2 = '/Volumes/ramdisk/test/omega/h' : <type 'str'>
=> path2 = '/Volumes/ramdisk/test' : <type 'str'>
==================================================
str2 += 'b'                                                             # STEP 28
ACTION: str2 += 'b' 
str2 = 'pdreo' : <type 'str'>
=> str2 = 'pdreob' : <type 'str'>
==================================================
str2 += 'o'                                                             # STEP 29
ACTION: str2 += 'o' 
str2 = 'pdreob' : <type 'str'>
=> str2 = 'pdreobo' : <type 'str'>
==================================================
str1 += 's'                                                             # STEP 30
ACTION: str1 += 's' 
str1 = '' : <type 'str'>
=> str1 = 's' : <type 'str'>
==================================================
bytes4 += 1                                                             # STEP 31
ACTION: bytes4 += 1 
bytes4 = 1 : <type 'int'>
=> bytes4 = 2 : <type 'int'>
==================================================
str1 += 'n'                                                             # STEP 32
ACTION: str1 += 'n' 
str1 = 's' : <type 'str'>
=> str1 = 'sn' : <type 'str'>
==================================================
path1 = "/Volumes/ramdisk/test"                                         # STEP 33
ACTION: path1 = "/Volumes/ramdisk/test" 
path1 = None : <type 'NoneType'>
=> path1 = '/Volumes/ramdisk/test' : <type 'str'>
==================================================
str1 += 'w'                                                             # STEP 34
ACTION: str1 += 'w' 
str1 = 'sn' : <type 'str'>
=> str1 = 'snw' : <type 'str'>
==================================================
str2 += 'f'                                                             # STEP 35
ACTION: str2 += 'f' 
str2 = 'pdreobo' : <type 'str'>
=> str2 = 'pdreobof' : <type 'str'>
==================================================
str1 += 'x'                                                             # STEP 36
ACTION: str1 += 'x' 
str1 = 'snw' : <type 'str'>
=> str1 = 'snwx' : <type 'str'>
==================================================
str2 += 'a'                                                             # STEP 37
ACTION: str2 += 'a' 
str2 = 'pdreobof' : <type 'str'>
=> str2 = 'pdreobofa' : <type 'str'>
==================================================
str1 += 'n'                                                             # STEP 38
ACTION: str1 += 'n' 
str1 = 'snwx' : <type 'str'>
=> str1 = 'snwxn' : <type 'str'>
==================================================
component3 = "f"                                                        # STEP 39
ACTION: component3 = "f" 
component3 = 'omega' : <type 'str'>
=> component3 = 'f' : <type 'str'>
==================================================
str2 += 'r'                                                             # STEP 40
ACTION: str2 += 'r' 
str2 = 'pdreobofa' : <type 'str'>
=> str2 = 'pdreobofar' : <type 'str'>
==================================================
str2 += 'l'                                                             # STEP 41
ACTION: str2 += 'l' 
str2 = 'pdreobofar' : <type 'str'>
=> str2 = 'pdreobofarl' : <type 'str'>
==================================================
str1 += 'f'                                                             # STEP 42
ACTION: str1 += 'f' 
str1 = 'snwxn' : <type 'str'>
=> str1 = 'snwxnf' : <type 'str'>
==================================================
bytes2 = 0                                                              # STEP 43
ACTION: bytes2 = 0 
bytes2 = None : <type 'NoneType'>
=> bytes2 = 0 : <type 'int'>
==================================================
path1 += "/" + component0                                               # STEP 44
ACTION: path1 += "/" + component0 
component0 = 'epsilon' : <type 'str'>
path1 = '/Volumes/ramdisk/test' : <type 'str'>
=> path1 = '/Volumes/ramdisk/test/epsilon' : <type 'str'>
==================================================
component0 = "delta"                                                    # STEP 45
ACTION: component0 = "delta" 
component0 = 'epsilon' : <type 'str'>
=> component0 = 'delta' : <type 'str'>
==================================================
str1 += 'j'                                                             # STEP 46
ACTION: str1 += 'j' 
str1 = 'snwxnf' : <type 'str'>
=> str1 = 'snwxnfj' : <type 'str'>
==================================================
str2 += 'k'                                                             # STEP 47
ACTION: str2 += 'k' 
str2 = 'pdreobofarl' : <type 'str'>
=> str2 = 'pdreobofarlk' : <type 'str'>
==================================================
os0 = newFakeOS()                                                       # STEP 48
ACTION: os0 = newFakeOS() 
os0 = None : <type 'NoneType'>
os_REF0 = None : <type 'NoneType'>
=> os0 = <pyfakefs.fake_filesystem.FakeOsModule object at 0x104081190> : <class 'pyfakefs.fake_filesystem.FakeOsModule'>
REFERENCE ACTION: os_REF0 = os 
=> os_REF0 = <module 'os' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'> : <type 'module'>
==================================================
os0.symlink(path2,path3)                                                # STEP 49
ACTION: os0.symlink(path2,path3) 
os0 = <pyfakefs.fake_filesystem.FakeOsModule object at 0x104081190> : <class 'pyfakefs.fake_filesystem.FakeOsModule'>
path2 = '/Volumes/ramdisk/test' : <type 'str'>
path3 = '/Volumes/ramdisk/test/omega' : <type 'str'>
os_REF0 = <module 'os' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'> : <type 'module'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.OSError'> Symbolic links are not supported on Windows before Python 3.2
REFERENCE ACTION: os_REF0.symlink(path2,path3) 
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1040a3a70>)
TRACEBACK:
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 48329, in safely
    act[2]()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 10835, in act284
    assert (type(raised) == type(refRaised))
STOPPING TESTING DUE TO FAILED TEST
0.110918045044 TOTAL RUNTIME
3 EXECUTED
450 TOTAL TEST OPERATIONS
0.0534715652466 TIME SPENT EXECUTING TEST OPERATIONS
0.0221753120422 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
0.000191688537598 TIME SPENT CHECKING PROPERTIES
0.0536632537842 TOTAL TIME SPENT RUNNING SUT
0.00931191444397 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
