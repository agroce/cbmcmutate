Random testing using config=Config(swarmSwitch=None, maxMustHitBranch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, internal=False, exploit=None, seed=None, generalize=False, fastQuickAnalysis=False, stopWhenNoCoverage=None, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, maxMustHitStatement=None, noCoverageExploit=False, quickTests=False, relax=False, startExploitStall=0, enumerateEnabled=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, stopWhenHitStatement=None, biasLOC=None, progress=False, postCover=False, swarmLength=None, generateLOC=None, noSwarmDependencies=False, profile=False, LOCBaseline=0.2, noEnumerateEnabled=False, full=True, multiple=False, timedProgress=30, silentFail=False, ddmin=False, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.60940.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, markovP=1.0, logging=None, stopWhenHitBranch=None, LOCProbs=False, stopWhenStatements=None, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.0, depth=200, trackMaxCoverage=None, throughput=False, noCover=True, timeout=60, stutter=None, uncaught=False, markov=None, showActions=False, startExploit=0.0)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.TypeError'>, TypeError("unsupported operand type(s) for /: 'str' and 'str'",), <traceback object at 0x103ee3758>)
TRACEBACK:
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 48329, in safely
    act[2]()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 66, in act0
    self.p_os[0] = newFakeOS()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 17, in newFakeOS
    fs = pyfakefs.fake_filesystem.FakeFilesystem()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 881, in __init__
    self.AddMountPoint(self.root.name, total_size)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 933, in AddMountPoint
    path = self.NormalizePath(path)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1357, in NormalizePath
    return self.CollapsePath(path)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1285, in CollapsePath
    return ((drive / collapsed_path) or dot)
Original test has 30 steps

SAVING TEST AS failure.60940.test
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
component4 = "c"                                                         # STEP 0
ACTION: component4 = "c" 
component4 = None : <type 'NoneType'>
=> component4 = 'c' : <type 'str'>
==================================================
component3 = "b"                                                         # STEP 1
ACTION: component3 = "b" 
component3 = None : <type 'NoneType'>
=> component3 = 'b' : <type 'str'>
==================================================
component2 = "e"                                                         # STEP 2
ACTION: component2 = "e" 
component2 = None : <type 'NoneType'>
=> component2 = 'e' : <type 'str'>
==================================================
component0 = "g"                                                         # STEP 3
ACTION: component0 = "g" 
component0 = None : <type 'NoneType'>
=> component0 = 'g' : <type 'str'>
==================================================
str3 = ""                                                                # STEP 4
ACTION: str3 = "" 
str3 = None : <type 'NoneType'>
=> str3 = '' : <type 'str'>
==================================================
bytes2 = 0                                                               # STEP 5
ACTION: bytes2 = 0 
bytes2 = None : <type 'NoneType'>
=> bytes2 = 0 : <type 'int'>
==================================================
component1 = "e"                                                         # STEP 6
ACTION: component1 = "e" 
component1 = None : <type 'NoneType'>
=> component1 = 'e' : <type 'str'>
==================================================
str0 = ""                                                                # STEP 7
ACTION: str0 = "" 
str0 = None : <type 'NoneType'>
=> str0 = '' : <type 'str'>
==================================================
str3 += 'f'                                                              # STEP 8
ACTION: str3 += 'f' 
str3 = '' : <type 'str'>
=> str3 = 'f' : <type 'str'>
==================================================
str3 += 'k'                                                              # STEP 9
ACTION: str3 += 'k' 
str3 = 'f' : <type 'str'>
=> str3 = 'fk' : <type 'str'>
==================================================
str3 += 's'                                                             # STEP 10
ACTION: str3 += 's' 
str3 = 'fk' : <type 'str'>
=> str3 = 'fks' : <type 'str'>
==================================================
str0 += 'q'                                                             # STEP 11
ACTION: str0 += 'q' 
str0 = '' : <type 'str'>
=> str0 = 'q' : <type 'str'>
==================================================
str3 += 'j'                                                             # STEP 12
ACTION: str3 += 'j' 
str3 = 'fks' : <type 'str'>
=> str3 = 'fksj' : <type 'str'>
==================================================
str0 += 'd'                                                             # STEP 13
ACTION: str0 += 'd' 
str0 = 'q' : <type 'str'>
=> str0 = 'qd' : <type 'str'>
==================================================
str3 += 'b'                                                             # STEP 14
ACTION: str3 += 'b' 
str3 = 'fksj' : <type 'str'>
=> str3 = 'fksjb' : <type 'str'>
==================================================
str3 += 's'                                                             # STEP 15
ACTION: str3 += 's' 
str3 = 'fksjb' : <type 'str'>
=> str3 = 'fksjbs' : <type 'str'>
==================================================
str0 += 't'                                                             # STEP 16
ACTION: str0 += 't' 
str0 = 'qd' : <type 'str'>
=> str0 = 'qdt' : <type 'str'>
==================================================
str3 += 'p'                                                             # STEP 17
ACTION: str3 += 'p' 
str3 = 'fksjbs' : <type 'str'>
=> str3 = 'fksjbsp' : <type 'str'>
==================================================
str0 += 'm'                                                             # STEP 18
ACTION: str0 += 'm' 
str0 = 'qdt' : <type 'str'>
=> str0 = 'qdtm' : <type 'str'>
==================================================
bytes1 = 0                                                              # STEP 19
ACTION: bytes1 = 0 
bytes1 = None : <type 'NoneType'>
=> bytes1 = 0 : <type 'int'>
==================================================
str3 += 's'                                                             # STEP 20
ACTION: str3 += 's' 
str3 = 'fksjbsp' : <type 'str'>
=> str3 = 'fksjbsps' : <type 'str'>
==================================================
path0 = "/Volumes/ramdisk/test"                                         # STEP 21
ACTION: path0 = "/Volumes/ramdisk/test" 
path0 = None : <type 'NoneType'>
=> path0 = '/Volumes/ramdisk/test' : <type 'str'>
==================================================
str3 += 'g'                                                             # STEP 22
ACTION: str3 += 'g' 
str3 = 'fksjbsps' : <type 'str'>
=> str3 = 'fksjbspsg' : <type 'str'>
==================================================
str3 += 'u'                                                             # STEP 23
ACTION: str3 += 'u' 
str3 = 'fksjbspsg' : <type 'str'>
=> str3 = 'fksjbspsgu' : <type 'str'>
==================================================
str3 += 'k'                                                             # STEP 24
ACTION: str3 += 'k' 
str3 = 'fksjbspsgu' : <type 'str'>
=> str3 = 'fksjbspsguk' : <type 'str'>
==================================================
str0 += " "                                                             # STEP 25
ACTION: str0 += " " 
str0 = 'qdtm' : <type 'str'>
=> str0 = 'qdtm ' : <type 'str'>
==================================================
str0 += 'c'                                                             # STEP 26
ACTION: str0 += 'c' 
str0 = 'qdtm ' : <type 'str'>
=> str0 = 'qdtm c' : <type 'str'>
==================================================
bytes0 = 0                                                              # STEP 27
ACTION: bytes0 = 0 
bytes0 = None : <type 'NoneType'>
=> bytes0 = 0 : <type 'int'>
==================================================
path0 += "/" + component1                                               # STEP 28
ACTION: path0 += "/" + component1 
component1 = 'e' : <type 'str'>
path0 = '/Volumes/ramdisk/test' : <type 'str'>
=> path0 = '/Volumes/ramdisk/test/e' : <type 'str'>
==================================================
os0 = newFakeOS()                                                       # STEP 29
ACTION: os0 = newFakeOS() 
os0 = None : <type 'NoneType'>
os_REF0 = None : <type 'NoneType'>
RAISED EXCEPTION: <type 'exceptions.TypeError'> unsupported operand type(s) for /: 'str' and 'str'
ERROR: (<type 'exceptions.TypeError'>, TypeError("unsupported operand type(s) for /: 'str' and 'str'",), <traceback object at 0x103fa01b8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 48329, in safely
    act[2]()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 66, in act0
    self.p_os[0] = newFakeOS()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 17, in newFakeOS
    fs = pyfakefs.fake_filesystem.FakeFilesystem()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 881, in __init__
    self.AddMountPoint(self.root.name, total_size)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 933, in AddMountPoint
    path = self.NormalizePath(path)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1357, in NormalizePath
    return self.CollapsePath(path)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1285, in CollapsePath
    return ((drive / collapsed_path) or dot)
STOPPING TESTING DUE TO FAILED TEST
0.048798084259 TOTAL RUNTIME
2 EXECUTED
230 TOTAL TEST OPERATIONS
0.00461196899414 TIME SPENT EXECUTING TEST OPERATIONS
0.0168218612671 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
0.000119686126709 TIME SPENT CHECKING PROPERTIES
0.00473165512085 TOTAL TIME SPENT RUNNING SUT
0.00774812698364 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
