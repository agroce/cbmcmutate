Random testing using config=Config(swarmSwitch=None, maxMustHitBranch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, internal=False, exploit=None, seed=None, generalize=False, fastQuickAnalysis=False, stopWhenNoCoverage=None, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, maxMustHitStatement=None, noCoverageExploit=False, quickTests=False, relax=False, startExploitStall=0, enumerateEnabled=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, stopWhenHitStatement=None, biasLOC=None, progress=False, postCover=False, swarmLength=None, generateLOC=None, noSwarmDependencies=False, profile=False, LOCBaseline=0.2, noEnumerateEnabled=False, full=True, multiple=False, timedProgress=30, silentFail=False, ddmin=False, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.55775.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, markovP=1.0, logging=None, stopWhenHitBranch=None, LOCProbs=False, stopWhenStatements=None, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.0, depth=200, trackMaxCoverage=None, throughput=False, noCover=True, timeout=60, stutter=None, uncaught=False, markov=None, showActions=False, startExploit=0.0)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.TypeError'>, TypeError('endswith first arg must be str, unicode, or tuple, not NoneType',), <traceback object at 0x101f955a8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 48329, in safely
    act[2]()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 25619, in act494
    self.p_stat[1] = self.p_os[0].lstat(self.p_path[1])
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 3560, in lstat
    return self.filesystem.GetStat(entry_path, follow_symlinks=False)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1081, in GetStat
    file_object = self.ResolveObject(entry_path, follow_symlinks, allow_fd=True)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1839, in ResolveObject
    return self.LResolveObject(file_path)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1858, in LResolveObject
    if (path.endswith(sep) or (alt_sep or path.endswith(alt_sep))):
Original test has 30 steps

SAVING TEST AS failure.55775.test
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
component0 = "epsilon"                                                   # STEP 0
ACTION: component0 = "epsilon" 
component0 = None : <type 'NoneType'>
=> component0 = 'epsilon' : <type 'str'>
==================================================
component2 = "delta"                                                     # STEP 1
ACTION: component2 = "delta" 
component2 = None : <type 'NoneType'>
=> component2 = 'delta' : <type 'str'>
==================================================
path1 = "/Volumes/ramdisk/test"                                          # STEP 2
ACTION: path1 = "/Volumes/ramdisk/test" 
path1 = None : <type 'NoneType'>
=> path1 = '/Volumes/ramdisk/test' : <type 'str'>
==================================================
component4 = "epsilon"                                                   # STEP 3
ACTION: component4 = "epsilon" 
component4 = None : <type 'NoneType'>
=> component4 = 'epsilon' : <type 'str'>
==================================================
component3 = "e"                                                         # STEP 4
ACTION: component3 = "e" 
component3 = None : <type 'NoneType'>
=> component3 = 'e' : <type 'str'>
==================================================
path1 += "/" + component3                                                # STEP 5
ACTION: path1 += "/" + component3 
component3 = 'e' : <type 'str'>
path1 = '/Volumes/ramdisk/test' : <type 'str'>
=> path1 = '/Volumes/ramdisk/test/e' : <type 'str'>
==================================================
component3 = "delta"                                                     # STEP 6
ACTION: component3 = "delta" 
component3 = 'e' : <type 'str'>
=> component3 = 'delta' : <type 'str'>
==================================================
bytes4 = 0                                                               # STEP 7
ACTION: bytes4 = 0 
bytes4 = None : <type 'NoneType'>
=> bytes4 = 0 : <type 'int'>
==================================================
path1 = "/Volumes/ramdisk/test"                                          # STEP 8
ACTION: path1 = "/Volumes/ramdisk/test" 
path1 = '/Volumes/ramdisk/test/e' : <type 'str'>
=> path1 = '/Volumes/ramdisk/test' : <type 'str'>
==================================================
os0 = newFakeOS()                                                        # STEP 9
ACTION: os0 = newFakeOS() 
os0 = None : <type 'NoneType'>
os_REF0 = None : <type 'NoneType'>
=> os0 = <pyfakefs.fake_filesystem.FakeOsModule object at 0x1021d3110> : <class 'pyfakefs.fake_filesystem.FakeOsModule'>
REFERENCE ACTION: os_REF0 = os 
=> os_REF0 = <module 'os' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'> : <type 'module'>
==================================================
result = os0.path.isdir(path1)                                          # STEP 10
ACTION: result = os0.path.isdir(path1) 
os0 = <pyfakefs.fake_filesystem.FakeOsModule object at 0x1021d3110> : <class 'pyfakefs.fake_filesystem.FakeOsModule'>
path1 = '/Volumes/ramdisk/test' : <type 'str'>
os_REF0 = <module 'os' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'> : <type 'module'>
REFERENCE ACTION: result_REF = os_REF0.path.isdir(path1) 
==================================================
result = sorted(os0.listdir(path1))                                     # STEP 11
ACTION: result = sorted(os0.listdir(path1)) 
os0 = <pyfakefs.fake_filesystem.FakeOsModule object at 0x1021d3110> : <class 'pyfakefs.fake_filesystem.FakeOsModule'>
path1 = '/Volumes/ramdisk/test' : <type 'str'>
os_REF0 = <module 'os' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'> : <type 'module'>
REFERENCE ACTION: result_REF = sorted(os_REF0.listdir(path1)) 
==================================================
component1 = "h"                                                        # STEP 12
ACTION: component1 = "h" 
component1 = None : <type 'NoneType'>
=> component1 = 'h' : <type 'str'>
==================================================
bytes1 = 0                                                              # STEP 13
ACTION: bytes1 = 0 
bytes1 = None : <type 'NoneType'>
=> bytes1 = 0 : <type 'int'>
==================================================
result = os0.path.dirname(path1)                                        # STEP 14
ACTION: result = os0.path.dirname(path1) 
os0 = <pyfakefs.fake_filesystem.FakeOsModule object at 0x1021d3110> : <class 'pyfakefs.fake_filesystem.FakeOsModule'>
path1 = '/Volumes/ramdisk/test' : <type 'str'>
os_REF0 = <module 'os' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'> : <type 'module'>
REFERENCE ACTION: result_REF = os_REF0.path.dirname(path1) 
==================================================
result = os0.path.isfile(path1)                                         # STEP 15
ACTION: result = os0.path.isfile(path1) 
os0 = <pyfakefs.fake_filesystem.FakeOsModule object at 0x1021d3110> : <class 'pyfakefs.fake_filesystem.FakeOsModule'>
path1 = '/Volumes/ramdisk/test' : <type 'str'>
os_REF0 = <module 'os' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'> : <type 'module'>
REFERENCE ACTION: result_REF = os_REF0.path.isfile(path1) 
==================================================
str3 = ""                                                               # STEP 16
ACTION: str3 = "" 
str3 = None : <type 'NoneType'>
=> str3 = '' : <type 'str'>
==================================================
str3 += 'v'                                                             # STEP 17
ACTION: str3 += 'v' 
str3 = '' : <type 'str'>
=> str3 = 'v' : <type 'str'>
==================================================
str3 += 'k'                                                             # STEP 18
ACTION: str3 += 'k' 
str3 = 'v' : <type 'str'>
=> str3 = 'vk' : <type 'str'>
==================================================
path3 = "/Volumes/ramdisk/test"                                         # STEP 19
ACTION: path3 = "/Volumes/ramdisk/test" 
path3 = None : <type 'NoneType'>
=> path3 = '/Volumes/ramdisk/test' : <type 'str'>
==================================================
str1 = ""                                                               # STEP 20
ACTION: str1 = "" 
str1 = None : <type 'NoneType'>
=> str1 = '' : <type 'str'>
==================================================
str3 += 'y'                                                             # STEP 21
ACTION: str3 += 'y' 
str3 = 'vk' : <type 'str'>
=> str3 = 'vky' : <type 'str'>
==================================================
path1 = "/Volumes/ramdisk/test"                                         # STEP 22
ACTION: path1 = "/Volumes/ramdisk/test" 
path1 = '/Volumes/ramdisk/test' : <type 'str'>
==================================================
bytes1 += 1                                                             # STEP 23
ACTION: bytes1 += 1 
bytes1 = 0 : <type 'int'>
=> bytes1 = 1 : <type 'int'>
==================================================
str3 = ""                                                               # STEP 24
ACTION: str3 = "" 
str3 = 'vky' : <type 'str'>
=> str3 = '' : <type 'str'>
==================================================
os0.link(path3,path1)                                                   # STEP 25
ACTION: os0.link(path3,path1) 
os0 = <pyfakefs.fake_filesystem.FakeOsModule object at 0x1021d3110> : <class 'pyfakefs.fake_filesystem.FakeOsModule'>
path3 = '/Volumes/ramdisk/test' : <type 'str'>
path1 = '/Volumes/ramdisk/test' : <type 'str'>
os_REF0 = <module 'os' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'> : <type 'module'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.OSError'> [Errno 17] File already exists in fake filesystem: '/Volumes/ramdisk/test'
REFERENCE ACTION: os_REF0.link(path3,path1) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.OSError'> [Errno 17] File exists
==================================================
str1 += 'k'                                                             # STEP 26
ACTION: str1 += 'k' 
str1 = '' : <type 'str'>
=> str1 = 'k' : <type 'str'>
==================================================
path1 += "/" + component3                                               # STEP 27
ACTION: path1 += "/" + component3 
component3 = 'delta' : <type 'str'>
path1 = '/Volumes/ramdisk/test' : <type 'str'>
=> path1 = '/Volumes/ramdisk/test/delta' : <type 'str'>
==================================================
str3 += 'w'                                                             # STEP 28
ACTION: str3 += 'w' 
str3 = '' : <type 'str'>
=> str3 = 'w' : <type 'str'>
==================================================
stat1 = os0.lstat(path1)                                                # STEP 29
ACTION: stat1 = os0.lstat(path1) 
stat1 = None : <type 'NoneType'>
os0 = <pyfakefs.fake_filesystem.FakeOsModule object at 0x1021d3110> : <class 'pyfakefs.fake_filesystem.FakeOsModule'>
path1 = '/Volumes/ramdisk/test/delta' : <type 'str'>
stat_REF1 = None : <type 'NoneType'>
os_REF0 = <module 'os' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'> : <type 'module'>
RAISED EXCEPTION: <type 'exceptions.TypeError'> endswith first arg must be str, unicode, or tuple, not NoneType
ERROR: (<type 'exceptions.TypeError'>, TypeError('endswith first arg must be str, unicode, or tuple, not NoneType',), <traceback object at 0x103ac46c8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 48329, in safely
    act[2]()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 25619, in act494
    self.p_stat[1] = self.p_os[0].lstat(self.p_path[1])
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 3560, in lstat
    return self.filesystem.GetStat(entry_path, follow_symlinks=False)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1081, in GetStat
    file_object = self.ResolveObject(entry_path, follow_symlinks, allow_fd=True)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1839, in ResolveObject
    return self.LResolveObject(file_path)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1858, in LResolveObject
    if (path.endswith(sep) or (alt_sep or path.endswith(alt_sep))):
STOPPING TESTING DUE TO FAILED TEST
0.0326409339905 TOTAL RUNTIME
1 EXECUTED
30 TOTAL TEST OPERATIONS
0.00315976142883 TIME SPENT EXECUTING TEST OPERATIONS
0.00298976898193 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
1.59740447998e-05 TIME SPENT CHECKING PROPERTIES
0.00317573547363 TOTAL TIME SPENT RUNNING SUT
0.00366902351379 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
