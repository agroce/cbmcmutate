Random testing using config=Config(swarmSwitch=None, maxMustHitBranch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, internal=False, exploit=None, seed=None, generalize=False, fastQuickAnalysis=False, stopWhenNoCoverage=None, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, maxMustHitStatement=None, noCoverageExploit=False, quickTests=False, relax=False, startExploitStall=0, enumerateEnabled=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, stopWhenHitStatement=None, biasLOC=None, progress=False, postCover=False, swarmLength=None, generateLOC=None, noSwarmDependencies=False, profile=False, LOCBaseline=0.2, noEnumerateEnabled=False, full=True, multiple=False, timedProgress=30, silentFail=False, ddmin=False, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.48541.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, markovP=1.0, logging=None, stopWhenHitBranch=None, LOCProbs=False, stopWhenStatements=None, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.0, depth=200, trackMaxCoverage=None, throughput=False, noCover=True, timeout=60, stutter=None, uncaught=False, markov=None, showActions=False, startExploit=0.0)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.TypeError'>, TypeError('expected a string or other character buffer object',), <traceback object at 0x1034e67a0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 48329, in safely
    act[2]()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 66, in act0
    self.p_os[0] = newFakeOS()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 17, in newFakeOS
    fs = pyfakefs.fake_filesystem.FakeFilesystem()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 881, in __init__
    self.AddMountPoint(self.root.name, total_size)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 933, in AddMountPoint
    path = self.NormalizePath(path)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1340, in NormalizePath
    path = self.NormalizePathSeparator(path)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1237, in NormalizePathSeparator
    return path.replace(self._alternative_path_separator(path), self._path_separator(path))
Original test has 22 steps

SAVING TEST AS failure.48541.test
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
component3 = "phi"                                                       # STEP 0
ACTION: component3 = "phi" 
component3 = None : <type 'NoneType'>
=> component3 = 'phi' : <type 'str'>
==================================================
component1 = "beta"                                                      # STEP 1
ACTION: component1 = "beta" 
component1 = None : <type 'NoneType'>
=> component1 = 'beta' : <type 'str'>
==================================================
component4 = "f"                                                         # STEP 2
ACTION: component4 = "f" 
component4 = None : <type 'NoneType'>
=> component4 = 'f' : <type 'str'>
==================================================
component0 = "h"                                                         # STEP 3
ACTION: component0 = "h" 
component0 = None : <type 'NoneType'>
=> component0 = 'h' : <type 'str'>
==================================================
str3 = ""                                                                # STEP 4
ACTION: str3 = "" 
str3 = None : <type 'NoneType'>
=> str3 = '' : <type 'str'>
==================================================
component2 = "c"                                                         # STEP 5
ACTION: component2 = "c" 
component2 = None : <type 'NoneType'>
=> component2 = 'c' : <type 'str'>
==================================================
str3 += 'r'                                                              # STEP 6
ACTION: str3 += 'r' 
str3 = '' : <type 'str'>
=> str3 = 'r' : <type 'str'>
==================================================
str3 += 'a'                                                              # STEP 7
ACTION: str3 += 'a' 
str3 = 'r' : <type 'str'>
=> str3 = 'ra' : <type 'str'>
==================================================
str3 += 'z'                                                              # STEP 8
ACTION: str3 += 'z' 
str3 = 'ra' : <type 'str'>
=> str3 = 'raz' : <type 'str'>
==================================================
str3 += 'p'                                                              # STEP 9
ACTION: str3 += 'p' 
str3 = 'raz' : <type 'str'>
=> str3 = 'razp' : <type 'str'>
==================================================
bytes4 = 0                                                              # STEP 10
ACTION: bytes4 = 0 
bytes4 = None : <type 'NoneType'>
=> bytes4 = 0 : <type 'int'>
==================================================
str3 += 'q'                                                             # STEP 11
ACTION: str3 += 'q' 
str3 = 'razp' : <type 'str'>
=> str3 = 'razpq' : <type 'str'>
==================================================
str3 += 'e'                                                             # STEP 12
ACTION: str3 += 'e' 
str3 = 'razpq' : <type 'str'>
=> str3 = 'razpqe' : <type 'str'>
==================================================
str3 += 'v'                                                             # STEP 13
ACTION: str3 += 'v' 
str3 = 'razpqe' : <type 'str'>
=> str3 = 'razpqev' : <type 'str'>
==================================================
bytes1 = 0                                                              # STEP 14
ACTION: bytes1 = 0 
bytes1 = None : <type 'NoneType'>
=> bytes1 = 0 : <type 'int'>
==================================================
path4 = "/Volumes/ramdisk/test"                                         # STEP 15
ACTION: path4 = "/Volumes/ramdisk/test" 
path4 = None : <type 'NoneType'>
=> path4 = '/Volumes/ramdisk/test' : <type 'str'>
==================================================
bytes2 = 0                                                              # STEP 16
ACTION: bytes2 = 0 
bytes2 = None : <type 'NoneType'>
=> bytes2 = 0 : <type 'int'>
==================================================
str3 += 'k'                                                             # STEP 17
ACTION: str3 += 'k' 
str3 = 'razpqev' : <type 'str'>
=> str3 = 'razpqevk' : <type 'str'>
==================================================
str3 += 'n'                                                             # STEP 18
ACTION: str3 += 'n' 
str3 = 'razpqevk' : <type 'str'>
=> str3 = 'razpqevkn' : <type 'str'>
==================================================
str3 += 'r'                                                             # STEP 19
ACTION: str3 += 'r' 
str3 = 'razpqevkn' : <type 'str'>
=> str3 = 'razpqevknr' : <type 'str'>
==================================================
str3 += 'h'                                                             # STEP 20
ACTION: str3 += 'h' 
str3 = 'razpqevknr' : <type 'str'>
=> str3 = 'razpqevknrh' : <type 'str'>
==================================================
os0 = newFakeOS()                                                       # STEP 21
ACTION: os0 = newFakeOS() 
os0 = None : <type 'NoneType'>
os_REF0 = None : <type 'NoneType'>
RAISED EXCEPTION: <type 'exceptions.TypeError'> expected a string or other character buffer object
ERROR: (<type 'exceptions.TypeError'>, TypeError('expected a string or other character buffer object',), <traceback object at 0x10351ab48>)
TRACEBACK:
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 48329, in safely
    act[2]()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 66, in act0
    self.p_os[0] = newFakeOS()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 17, in newFakeOS
    fs = pyfakefs.fake_filesystem.FakeFilesystem()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 881, in __init__
    self.AddMountPoint(self.root.name, total_size)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 933, in AddMountPoint
    path = self.NormalizePath(path)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1340, in NormalizePath
    path = self.NormalizePathSeparator(path)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1237, in NormalizePathSeparator
    return path.replace(self._alternative_path_separator(path), self._path_separator(path))
STOPPING TESTING DUE TO FAILED TEST
0.0201277732849 TOTAL RUNTIME
1 EXECUTED
22 TOTAL TEST OPERATIONS
0.000359296798706 TIME SPENT EXECUTING TEST OPERATIONS
0.00171971321106 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
1.26361846924e-05 TIME SPENT CHECKING PROPERTIES
0.000371932983398 TOTAL TIME SPENT RUNNING SUT
0.00296998023987 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
