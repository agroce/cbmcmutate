Random testing using config=Config(swarmSwitch=None, maxMustHitBranch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, internal=False, exploit=None, seed=None, generalize=False, fastQuickAnalysis=False, stopWhenNoCoverage=None, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, maxMustHitStatement=None, noCoverageExploit=False, quickTests=False, relax=False, startExploitStall=0, enumerateEnabled=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, stopWhenHitStatement=None, biasLOC=None, progress=False, postCover=False, swarmLength=None, generateLOC=None, noSwarmDependencies=False, profile=False, LOCBaseline=0.2, noEnumerateEnabled=False, full=True, multiple=False, timedProgress=30, silentFail=False, ddmin=False, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.49868.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, markovP=1.0, logging=None, stopWhenHitBranch=None, LOCProbs=False, stopWhenStatements=None, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.0, depth=200, trackMaxCoverage=None, throughput=False, noCover=True, timeout=60, stutter=None, uncaught=False, markov=None, showActions=False, startExploit=0.0)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.ValueError'>, ValueError("Invalid mode: 'b'",), <traceback object at 0x1039d0710>)
TRACEBACK:
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 48329, in safely
    act[2]()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 15377, in act351
    self.p_fd[0] = self.p_os[0].open(self.p_path[0], os.O_CREAT | os.O_WRONLY | os.O_EXCL)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 3314, in open
    fake_file = FakeFileOpen(self.filesystem, delete_on_close=delete_on_close, raw_io=True)(file_path, str_flags, open_modes=open_modes)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 4484, in __call__
    return self._call_ver2(*args, **kwargs)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 4493, in _call_ver2
    return self.Call(file_path, mode, buffering, open_modes=open_modes)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 4512, in Call
    raise ValueError(('Invalid mode: %r' % orig_modes))
Original test has 31 steps

SAVING TEST AS failure.49868.test
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
component4 = "gamma"                                                     # STEP 0
ACTION: component4 = "gamma" 
component4 = None : <type 'NoneType'>
=> component4 = 'gamma' : <type 'str'>
==================================================
str2 = ""                                                                # STEP 1
ACTION: str2 = "" 
str2 = None : <type 'NoneType'>
=> str2 = '' : <type 'str'>
==================================================
str2 += 'h'                                                              # STEP 2
ACTION: str2 += 'h' 
str2 = '' : <type 'str'>
=> str2 = 'h' : <type 'str'>
==================================================
component2 = "g"                                                         # STEP 3
ACTION: component2 = "g" 
component2 = None : <type 'NoneType'>
=> component2 = 'g' : <type 'str'>
==================================================
component3 = "d"                                                         # STEP 4
ACTION: component3 = "d" 
component3 = None : <type 'NoneType'>
=> component3 = 'd' : <type 'str'>
==================================================
component0 = "c"                                                         # STEP 5
ACTION: component0 = "c" 
component0 = None : <type 'NoneType'>
=> component0 = 'c' : <type 'str'>
==================================================
str2 += 'a'                                                              # STEP 6
ACTION: str2 += 'a' 
str2 = 'h' : <type 'str'>
=> str2 = 'ha' : <type 'str'>
==================================================
component1 = "omega"                                                     # STEP 7
ACTION: component1 = "omega" 
component1 = None : <type 'NoneType'>
=> component1 = 'omega' : <type 'str'>
==================================================
str2 += 'd'                                                              # STEP 8
ACTION: str2 += 'd' 
str2 = 'ha' : <type 'str'>
=> str2 = 'had' : <type 'str'>
==================================================
bytes4 = 0                                                               # STEP 9
ACTION: bytes4 = 0 
bytes4 = None : <type 'NoneType'>
=> bytes4 = 0 : <type 'int'>
==================================================
str2 += 'r'                                                             # STEP 10
ACTION: str2 += 'r' 
str2 = 'had' : <type 'str'>
=> str2 = 'hadr' : <type 'str'>
==================================================
str2 = ""                                                               # STEP 11
ACTION: str2 = "" 
str2 = 'hadr' : <type 'str'>
=> str2 = '' : <type 'str'>
==================================================
path0 = "/Volumes/ramdisk/test"                                         # STEP 12
ACTION: path0 = "/Volumes/ramdisk/test" 
path0 = None : <type 'NoneType'>
=> path0 = '/Volumes/ramdisk/test' : <type 'str'>
==================================================
str2 += 'l'                                                             # STEP 13
ACTION: str2 += 'l' 
str2 = '' : <type 'str'>
=> str2 = 'l' : <type 'str'>
==================================================
path0 += "/" + component1                                               # STEP 14
ACTION: path0 += "/" + component1 
component1 = 'omega' : <type 'str'>
path0 = '/Volumes/ramdisk/test' : <type 'str'>
=> path0 = '/Volumes/ramdisk/test/omega' : <type 'str'>
==================================================
bytes0 = 0                                                              # STEP 15
ACTION: bytes0 = 0 
bytes0 = None : <type 'NoneType'>
=> bytes0 = 0 : <type 'int'>
==================================================
str2 += 'b'                                                             # STEP 16
ACTION: str2 += 'b' 
str2 = 'l' : <type 'str'>
=> str2 = 'lb' : <type 'str'>
==================================================
path0 += "/" + component1                                               # STEP 17
ACTION: path0 += "/" + component1 
component1 = 'omega' : <type 'str'>
path0 = '/Volumes/ramdisk/test/omega' : <type 'str'>
=> path0 = '/Volumes/ramdisk/test/omega/omega' : <type 'str'>
==================================================
str2 += 'v'                                                             # STEP 18
ACTION: str2 += 'v' 
str2 = 'lb' : <type 'str'>
=> str2 = 'lbv' : <type 'str'>
==================================================
str2 += 'z'                                                             # STEP 19
ACTION: str2 += 'z' 
str2 = 'lbv' : <type 'str'>
=> str2 = 'lbvz' : <type 'str'>
==================================================
path2 = "/Volumes/ramdisk/test"                                         # STEP 20
ACTION: path2 = "/Volumes/ramdisk/test" 
path2 = None : <type 'NoneType'>
=> path2 = '/Volumes/ramdisk/test' : <type 'str'>
==================================================
bytes4 += 1                                                             # STEP 21
ACTION: bytes4 += 1 
bytes4 = 0 : <type 'int'>
=> bytes4 = 1 : <type 'int'>
==================================================
str2 += 'u'                                                             # STEP 22
ACTION: str2 += 'u' 
str2 = 'lbvz' : <type 'str'>
=> str2 = 'lbvzu' : <type 'str'>
==================================================
str2 += 'r'                                                             # STEP 23
ACTION: str2 += 'r' 
str2 = 'lbvzu' : <type 'str'>
=> str2 = 'lbvzur' : <type 'str'>
==================================================
str2 += 'o'                                                             # STEP 24
ACTION: str2 += 'o' 
str2 = 'lbvzur' : <type 'str'>
=> str2 = 'lbvzuro' : <type 'str'>
==================================================
str2 += 'f'                                                             # STEP 25
ACTION: str2 += 'f' 
str2 = 'lbvzuro' : <type 'str'>
=> str2 = 'lbvzurof' : <type 'str'>
==================================================
component1 = "lambda"                                                   # STEP 26
ACTION: component1 = "lambda" 
component1 = 'omega' : <type 'str'>
=> component1 = 'lambda' : <type 'str'>
==================================================
path0 += "/" + component2                                               # STEP 27
ACTION: path0 += "/" + component2 
component2 = 'g' : <type 'str'>
path0 = '/Volumes/ramdisk/test/omega/omega' : <type 'str'>
=> path0 = '/Volumes/ramdisk/test/omega/omega/g' : <type 'str'>
==================================================
str2 += 'h'                                                             # STEP 28
ACTION: str2 += 'h' 
str2 = 'lbvzurof' : <type 'str'>
=> str2 = 'lbvzurofh' : <type 'str'>
==================================================
os0 = newFakeOS()                                                       # STEP 29
ACTION: os0 = newFakeOS() 
os0 = None : <type 'NoneType'>
os_REF0 = None : <type 'NoneType'>
=> os0 = <pyfakefs.fake_filesystem.FakeOsModule object at 0x1036a5c90> : <class 'pyfakefs.fake_filesystem.FakeOsModule'>
REFERENCE ACTION: os_REF0 = os 
=> os_REF0 = <module 'os' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'> : <type 'module'>
==================================================
fd0 = os0.open(path0, os.O_CREAT | os.O_WRONLY | os.O_EXCL)             # STEP 30
ACTION: fd0 = os0.open(path0, os.O_CREAT | os.O_WRONLY | os.O_EXCL) 
os0 = <pyfakefs.fake_filesystem.FakeOsModule object at 0x1036a5c90> : <class 'pyfakefs.fake_filesystem.FakeOsModule'>
path0 = '/Volumes/ramdisk/test/omega/omega/g' : <type 'str'>
fd0 = None : <type 'NoneType'>
os_REF0 = <module 'os' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'> : <type 'module'>
fd_REF0 = None : <type 'NoneType'>
RAISED EXCEPTION: <type 'exceptions.ValueError'> Invalid mode: 'b'
ERROR: (<type 'exceptions.ValueError'>, ValueError("Invalid mode: 'b'",), <traceback object at 0x103b05c68>)
TRACEBACK:
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 48329, in safely
    act[2]()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 15377, in act351
    self.p_fd[0] = self.p_os[0].open(self.p_path[0], os.O_CREAT | os.O_WRONLY | os.O_EXCL)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 3314, in open
    fake_file = FakeFileOpen(self.filesystem, delete_on_close=delete_on_close, raw_io=True)(file_path, str_flags, open_modes=open_modes)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 4484, in __call__
    return self._call_ver2(*args, **kwargs)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 4493, in _call_ver2
    return self.Call(file_path, mode, buffering, open_modes=open_modes)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 4512, in Call
    raise ValueError(('Invalid mode: %r' % orig_modes))
STOPPING TESTING DUE TO FAILED TEST
0.0312440395355 TOTAL RUNTIME
1 EXECUTED
31 TOTAL TEST OPERATIONS
0.00135827064514 TIME SPENT EXECUTING TEST OPERATIONS
0.00317096710205 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
1.47819519043e-05 TIME SPENT CHECKING PROPERTIES
0.00137305259705 TOTAL TIME SPENT RUNNING SUT
0.00342488288879 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
