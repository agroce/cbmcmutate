Random testing using config=Config(swarmSwitch=None, maxMustHitBranch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, internal=False, exploit=None, seed=None, generalize=False, fastQuickAnalysis=False, stopWhenNoCoverage=None, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, maxMustHitStatement=None, noCoverageExploit=False, quickTests=False, relax=False, startExploitStall=0, enumerateEnabled=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, stopWhenHitStatement=None, biasLOC=None, progress=False, postCover=False, swarmLength=None, generateLOC=None, noSwarmDependencies=False, profile=False, LOCBaseline=0.2, noEnumerateEnabled=False, full=True, multiple=False, timedProgress=30, silentFail=False, ddmin=False, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.64808.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, markovP=1.0, logging=None, stopWhenHitBranch=None, LOCProbs=False, stopWhenStatements=None, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.0, depth=200, trackMaxCoverage=None, throughput=False, noCover=True, timeout=60, stutter=None, uncaught=False, markov=None, showActions=False, startExploit=0.0)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('integer division or modulo by zero',), <traceback object at 0x1006c3320>)
TRACEBACK:
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 48329, in safely
    act[2]()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 16709, in act369
    self.p_fd[1] = self.p_os[0].open(self.p_path[3], os.O_CREAT)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 3314, in open
    fake_file = FakeFileOpen(self.filesystem, delete_on_close=delete_on_close, raw_io=True)(file_path, str_flags, open_modes=open_modes)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 4484, in __call__
    return self._call_ver2(*args, **kwargs)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 4493, in _call_ver2
    return self.Call(file_path, mode, buffering, open_modes=open_modes)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 4566, in Call
    file_object = self.filesystem.CreateFileInternally(real_path, create_missing_dirs=False, apply_umask=True, raw_io=self.raw_io)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 2214, in CreateFileInternally
    self.AddObject(parent_directory, file_object, error_class)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1904, in AddObject
    target_directory.AddEntry(file_object)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 703, in AddEntry
    self.filesystem.ChangeDiskUsage(path_object.GetSize(), path_object.name, self.st_dev)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1072, in ChangeDiskUsage
    mount_point['used_size'] //= usage_change
Original test has 30 steps

SAVING TEST AS failure.64808.test
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
component0 = "g"                                                         # STEP 0
ACTION: component0 = "g" 
component0 = None : <type 'NoneType'>
=> component0 = 'g' : <type 'str'>
==================================================
component3 = "lambda"                                                    # STEP 1
ACTION: component3 = "lambda" 
component3 = None : <type 'NoneType'>
=> component3 = 'lambda' : <type 'str'>
==================================================
component4 = "h"                                                         # STEP 2
ACTION: component4 = "h" 
component4 = None : <type 'NoneType'>
=> component4 = 'h' : <type 'str'>
==================================================
component2 = "c"                                                         # STEP 3
ACTION: component2 = "c" 
component2 = None : <type 'NoneType'>
=> component2 = 'c' : <type 'str'>
==================================================
path1 = "/Volumes/ramdisk/test"                                          # STEP 4
ACTION: path1 = "/Volumes/ramdisk/test" 
path1 = None : <type 'NoneType'>
=> path1 = '/Volumes/ramdisk/test' : <type 'str'>
==================================================
component1 = "d"                                                         # STEP 5
ACTION: component1 = "d" 
component1 = None : <type 'NoneType'>
=> component1 = 'd' : <type 'str'>
==================================================
path4 = "/Volumes/ramdisk/test"                                          # STEP 6
ACTION: path4 = "/Volumes/ramdisk/test" 
path4 = None : <type 'NoneType'>
=> path4 = '/Volumes/ramdisk/test' : <type 'str'>
==================================================
path1 += "/" + component3                                                # STEP 7
ACTION: path1 += "/" + component3 
component3 = 'lambda' : <type 'str'>
path1 = '/Volumes/ramdisk/test' : <type 'str'>
=> path1 = '/Volumes/ramdisk/test/lambda' : <type 'str'>
==================================================
component3 = "epsilon"                                                   # STEP 8
ACTION: component3 = "epsilon" 
component3 = 'lambda' : <type 'str'>
=> component3 = 'epsilon' : <type 'str'>
==================================================
path3 = "/Volumes/ramdisk/test"                                          # STEP 9
ACTION: path3 = "/Volumes/ramdisk/test" 
path3 = None : <type 'NoneType'>
=> path3 = '/Volumes/ramdisk/test' : <type 'str'>
==================================================
path1 += "/" + component1                                               # STEP 10
ACTION: path1 += "/" + component1 
component1 = 'd' : <type 'str'>
path1 = '/Volumes/ramdisk/test/lambda' : <type 'str'>
=> path1 = '/Volumes/ramdisk/test/lambda/d' : <type 'str'>
==================================================
bytes4 = 0                                                              # STEP 11
ACTION: bytes4 = 0 
bytes4 = None : <type 'NoneType'>
=> bytes4 = 0 : <type 'int'>
==================================================
component1 = "beta"                                                     # STEP 12
ACTION: component1 = "beta" 
component1 = 'd' : <type 'str'>
=> component1 = 'beta' : <type 'str'>
==================================================
path3 += "/" + component0                                               # STEP 13
ACTION: path3 += "/" + component0 
component0 = 'g' : <type 'str'>
path3 = '/Volumes/ramdisk/test' : <type 'str'>
=> path3 = '/Volumes/ramdisk/test/g' : <type 'str'>
==================================================
bytes3 = 0                                                              # STEP 14
ACTION: bytes3 = 0 
bytes3 = None : <type 'NoneType'>
=> bytes3 = 0 : <type 'int'>
==================================================
str3 = ""                                                               # STEP 15
ACTION: str3 = "" 
str3 = None : <type 'NoneType'>
=> str3 = '' : <type 'str'>
==================================================
str3 += 'z'                                                             # STEP 16
ACTION: str3 += 'z' 
str3 = '' : <type 'str'>
=> str3 = 'z' : <type 'str'>
==================================================
path1 += "/" + component2                                               # STEP 17
ACTION: path1 += "/" + component2 
component2 = 'c' : <type 'str'>
path1 = '/Volumes/ramdisk/test/lambda/d' : <type 'str'>
=> path1 = '/Volumes/ramdisk/test/lambda/d/c' : <type 'str'>
==================================================
str0 = ""                                                               # STEP 18
ACTION: str0 = "" 
str0 = None : <type 'NoneType'>
=> str0 = '' : <type 'str'>
==================================================
path4 += "/" + component3                                               # STEP 19
ACTION: path4 += "/" + component3 
component3 = 'epsilon' : <type 'str'>
path4 = '/Volumes/ramdisk/test' : <type 'str'>
=> path4 = '/Volumes/ramdisk/test/epsilon' : <type 'str'>
==================================================
str0 += 'r'                                                             # STEP 20
ACTION: str0 += 'r' 
str0 = '' : <type 'str'>
=> str0 = 'r' : <type 'str'>
==================================================
bytes2 = 0                                                              # STEP 21
ACTION: bytes2 = 0 
bytes2 = None : <type 'NoneType'>
=> bytes2 = 0 : <type 'int'>
==================================================
path1 += "/" + component0                                               # STEP 22
ACTION: path1 += "/" + component0 
component0 = 'g' : <type 'str'>
path1 = '/Volumes/ramdisk/test/lambda/d/c' : <type 'str'>
=> path1 = '/Volumes/ramdisk/test/lambda/d/c/g' : <type 'str'>
==================================================
component3 = "gamma"                                                    # STEP 23
ACTION: component3 = "gamma" 
component3 = 'epsilon' : <type 'str'>
=> component3 = 'gamma' : <type 'str'>
==================================================
path0 = "/Volumes/ramdisk/test"                                         # STEP 24
ACTION: path0 = "/Volumes/ramdisk/test" 
path0 = None : <type 'NoneType'>
=> path0 = '/Volumes/ramdisk/test' : <type 'str'>
==================================================
str0 += 'i'                                                             # STEP 25
ACTION: str0 += 'i' 
str0 = 'r' : <type 'str'>
=> str0 = 'ri' : <type 'str'>
==================================================
path1 += "/" + component3                                               # STEP 26
ACTION: path1 += "/" + component3 
component3 = 'gamma' : <type 'str'>
path1 = '/Volumes/ramdisk/test/lambda/d/c/g' : <type 'str'>
=> path1 = '/Volumes/ramdisk/test/lambda/d/c/g/gamma' : <type 'str'>
==================================================
os0 = newFakeOS()                                                       # STEP 27
ACTION: os0 = newFakeOS() 
os0 = None : <type 'NoneType'>
os_REF0 = None : <type 'NoneType'>
=> os0 = <pyfakefs.fake_filesystem.FakeOsModule object at 0x1037bfd90> : <class 'pyfakefs.fake_filesystem.FakeOsModule'>
REFERENCE ACTION: os_REF0 = os 
=> os_REF0 = <module 'os' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'> : <type 'module'>
==================================================
result = os0.path.lexists(path0)                                        # STEP 28
ACTION: result = os0.path.lexists(path0) 
os0 = <pyfakefs.fake_filesystem.FakeOsModule object at 0x1037bfd90> : <class 'pyfakefs.fake_filesystem.FakeOsModule'>
path0 = '/Volumes/ramdisk/test' : <type 'str'>
os_REF0 = <module 'os' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'> : <type 'module'>
REFERENCE ACTION: result_REF = os_REF0.path.lexists(path0) 
==================================================
fd1 = os0.open(path3, os.O_CREAT)                                       # STEP 29
ACTION: fd1 = os0.open(path3, os.O_CREAT) 
os0 = <pyfakefs.fake_filesystem.FakeOsModule object at 0x1037bfd90> : <class 'pyfakefs.fake_filesystem.FakeOsModule'>
path3 = '/Volumes/ramdisk/test/g' : <type 'str'>
fd1 = None : <type 'NoneType'>
os_REF0 = <module 'os' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'> : <type 'module'>
fd_REF1 = None : <type 'NoneType'>
RAISED EXCEPTION: <type 'exceptions.ZeroDivisionError'> integer division or modulo by zero
ERROR: (<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('integer division or modulo by zero',), <traceback object at 0x1035c8ef0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 48329, in safely
    act[2]()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 16709, in act369
    self.p_fd[1] = self.p_os[0].open(self.p_path[3], os.O_CREAT)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 3314, in open
    fake_file = FakeFileOpen(self.filesystem, delete_on_close=delete_on_close, raw_io=True)(file_path, str_flags, open_modes=open_modes)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 4484, in __call__
    return self._call_ver2(*args, **kwargs)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 4493, in _call_ver2
    return self.Call(file_path, mode, buffering, open_modes=open_modes)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 4566, in Call
    file_object = self.filesystem.CreateFileInternally(real_path, create_missing_dirs=False, apply_umask=True, raw_io=self.raw_io)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 2214, in CreateFileInternally
    self.AddObject(parent_directory, file_object, error_class)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1904, in AddObject
    target_directory.AddEntry(file_object)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 703, in AddEntry
    self.filesystem.ChangeDiskUsage(path_object.GetSize(), path_object.name, self.st_dev)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1072, in ChangeDiskUsage
    mount_point['used_size'] //= usage_change
STOPPING TESTING DUE TO FAILED TEST
0.0637788772583 TOTAL RUNTIME
2 EXECUTED
230 TOTAL TEST OPERATIONS
0.0232543945312 TIME SPENT EXECUTING TEST OPERATIONS
0.0115485191345 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
9.17911529541e-05 TIME SPENT CHECKING PROPERTIES
0.0233461856842 TOTAL TIME SPENT RUNNING SUT
0.0102739334106 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
