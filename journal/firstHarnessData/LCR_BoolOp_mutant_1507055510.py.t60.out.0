Random testing using config=Config(swarmSwitch=None, maxMustHitBranch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, internal=False, exploit=None, seed=None, generalize=False, fastQuickAnalysis=False, stopWhenNoCoverage=None, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, maxMustHitStatement=None, noCoverageExploit=False, quickTests=False, relax=False, startExploitStall=0, enumerateEnabled=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, stopWhenHitStatement=None, biasLOC=None, progress=False, postCover=False, swarmLength=None, generateLOC=None, noSwarmDependencies=False, profile=False, LOCBaseline=0.2, noEnumerateEnabled=False, full=True, multiple=False, timedProgress=30, silentFail=False, ddmin=False, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.55919.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, markovP=1.0, logging=None, stopWhenHitBranch=None, LOCProbs=False, stopWhenStatements=None, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.0, depth=200, trackMaxCoverage=None, throughput=False, noCover=True, timeout=60, stutter=None, uncaught=False, markov=None, showActions=False, startExploit=0.0)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.TypeError'>, TypeError('an integer is required',), <traceback object at 0x104186cb0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 48329, in safely
    act[2]()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 14341, in act337
    self.p_fd[1] = self.p_os[0].open(self.p_path[1], os.O_CREAT | os.O_WRONLY | os.O_TRUNC | os.O_EXCL)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 3316, in open
    self.chmod(file_path, mode)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 3730, in chmod
    self.filesystem.ChangeMode(path, mode, follow_symlinks)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1096, in ChangeMode
    file_object = self.ResolveObject(path, follow_symlinks, allow_fd=True)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1829, in ResolveObject
    return self.GetOpenFile(file_path).GetObject()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1209, in GetOpenFile
    raise TypeError('an integer is required')
Original test has 22 steps

SAVING TEST AS failure.55919.test
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
os0 = newFakeOS()                                                        # STEP 0
ACTION: os0 = newFakeOS() 
os0 = None : <type 'NoneType'>
os_REF0 = None : <type 'NoneType'>
=> os0 = <pyfakefs.fake_filesystem.FakeOsModule object at 0x103286d10> : <class 'pyfakefs.fake_filesystem.FakeOsModule'>
REFERENCE ACTION: os_REF0 = os 
=> os_REF0 = <module 'os' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'> : <type 'module'>
==================================================
component2 = "c"                                                         # STEP 1
ACTION: component2 = "c" 
component2 = None : <type 'NoneType'>
=> component2 = 'c' : <type 'str'>
==================================================
component3 = "phi"                                                       # STEP 2
ACTION: component3 = "phi" 
component3 = None : <type 'NoneType'>
=> component3 = 'phi' : <type 'str'>
==================================================
component4 = "g"                                                         # STEP 3
ACTION: component4 = "g" 
component4 = None : <type 'NoneType'>
=> component4 = 'g' : <type 'str'>
==================================================
component1 = "b"                                                         # STEP 4
ACTION: component1 = "b" 
component1 = None : <type 'NoneType'>
=> component1 = 'b' : <type 'str'>
==================================================
str3 = ""                                                                # STEP 5
ACTION: str3 = "" 
str3 = None : <type 'NoneType'>
=> str3 = '' : <type 'str'>
==================================================
path1 = "/Volumes/ramdisk/test"                                          # STEP 6
ACTION: path1 = "/Volumes/ramdisk/test" 
path1 = None : <type 'NoneType'>
=> path1 = '/Volumes/ramdisk/test' : <type 'str'>
==================================================
str3 += 'h'                                                              # STEP 7
ACTION: str3 += 'h' 
str3 = '' : <type 'str'>
=> str3 = 'h' : <type 'str'>
==================================================
str3 += 'w'                                                              # STEP 8
ACTION: str3 += 'w' 
str3 = 'h' : <type 'str'>
=> str3 = 'hw' : <type 'str'>
==================================================
str3 += 'j'                                                              # STEP 9
ACTION: str3 += 'j' 
str3 = 'hw' : <type 'str'>
=> str3 = 'hwj' : <type 'str'>
==================================================
component0 = "epsilon"                                                  # STEP 10
ACTION: component0 = "epsilon" 
component0 = None : <type 'NoneType'>
=> component0 = 'epsilon' : <type 'str'>
==================================================
bytes2 = 0                                                              # STEP 11
ACTION: bytes2 = 0 
bytes2 = None : <type 'NoneType'>
=> bytes2 = 0 : <type 'int'>
==================================================
result = os0.path.isabs(path1)                                          # STEP 12
ACTION: result = os0.path.isabs(path1) 
os0 = <pyfakefs.fake_filesystem.FakeOsModule object at 0x103286d10> : <class 'pyfakefs.fake_filesystem.FakeOsModule'>
path1 = '/Volumes/ramdisk/test' : <type 'str'>
os_REF0 = <module 'os' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'> : <type 'module'>
REFERENCE ACTION: result_REF = os_REF0.path.isabs(path1) 
==================================================
path1 += "/" + component1                                               # STEP 13
ACTION: path1 += "/" + component1 
component1 = 'b' : <type 'str'>
path1 = '/Volumes/ramdisk/test' : <type 'str'>
=> path1 = '/Volumes/ramdisk/test/b' : <type 'str'>
==================================================
fd0 = os0.open(path1, os.O_RDONLY)                                      # STEP 14
ACTION: fd0 = os0.open(path1, os.O_RDONLY) 
os0 = <pyfakefs.fake_filesystem.FakeOsModule object at 0x103286d10> : <class 'pyfakefs.fake_filesystem.FakeOsModule'>
path1 = '/Volumes/ramdisk/test/b' : <type 'str'>
fd0 = None : <type 'NoneType'>
os_REF0 = <module 'os' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'> : <type 'module'>
fd_REF0 = None : <type 'NoneType'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.OSError'> [Errno 2] No such file or directory: '/Volumes/ramdisk/test/b'
REFERENCE ACTION: fd_REF0 = os_REF0.open(path1, os.O_RDONLY) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.OSError'> [Errno 2] No such file or directory: '/Volumes/ramdisk/test/b'
==================================================
str3 += 'b'                                                             # STEP 15
ACTION: str3 += 'b' 
str3 = 'hwj' : <type 'str'>
=> str3 = 'hwjb' : <type 'str'>
==================================================
component1 = "f"                                                        # STEP 16
ACTION: component1 = "f" 
component1 = 'b' : <type 'str'>
=> component1 = 'f' : <type 'str'>
==================================================
str3 += 'y'                                                             # STEP 17
ACTION: str3 += 'y' 
str3 = 'hwjb' : <type 'str'>
=> str3 = 'hwjby' : <type 'str'>
==================================================
str3 += 't'                                                             # STEP 18
ACTION: str3 += 't' 
str3 = 'hwjby' : <type 'str'>
=> str3 = 'hwjbyt' : <type 'str'>
==================================================
str3 += 'i'                                                             # STEP 19
ACTION: str3 += 'i' 
str3 = 'hwjbyt' : <type 'str'>
=> str3 = 'hwjbyti' : <type 'str'>
==================================================
result = sorted(os0.listdir(path1))                                     # STEP 20
ACTION: result = sorted(os0.listdir(path1)) 
os0 = <pyfakefs.fake_filesystem.FakeOsModule object at 0x103286d10> : <class 'pyfakefs.fake_filesystem.FakeOsModule'>
path1 = '/Volumes/ramdisk/test/b' : <type 'str'>
os_REF0 = <module 'os' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'> : <type 'module'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.OSError'> [Errno 2] No such file or directory in fake filesystem: '/Volumes/ramdisk/test/b'
REFERENCE ACTION: result_REF = sorted(os_REF0.listdir(path1)) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.OSError'> [Errno 2] No such file or directory: '/Volumes/ramdisk/test/b'
==================================================
fd1 = os0.open(path1, os.O_CREAT | os.O_WRONLY | os.O_TRUNC | os.O_EXCL)  # STEP 21
ACTION: fd1 = os0.open(path1, os.O_CREAT | os.O_WRONLY | os.O_TRUNC | os.O_EXCL) 
os0 = <pyfakefs.fake_filesystem.FakeOsModule object at 0x103286d10> : <class 'pyfakefs.fake_filesystem.FakeOsModule'>
path1 = '/Volumes/ramdisk/test/b' : <type 'str'>
fd1 = None : <type 'NoneType'>
os_REF0 = <module 'os' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'> : <type 'module'>
fd_REF1 = None : <type 'NoneType'>
RAISED EXCEPTION: <type 'exceptions.TypeError'> an integer is required
ERROR: (<type 'exceptions.TypeError'>, TypeError('an integer is required',), <traceback object at 0x1043dcd40>)
TRACEBACK:
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 48329, in safely
    act[2]()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 14341, in act337
    self.p_fd[1] = self.p_os[0].open(self.p_path[1], os.O_CREAT | os.O_WRONLY | os.O_TRUNC | os.O_EXCL)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 3316, in open
    self.chmod(file_path, mode)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 3730, in chmod
    self.filesystem.ChangeMode(path, mode, follow_symlinks)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1096, in ChangeMode
    file_object = self.ResolveObject(path, follow_symlinks, allow_fd=True)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1829, in ResolveObject
    return self.GetOpenFile(file_path).GetObject()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1209, in GetOpenFile
    raise TypeError('an integer is required')
STOPPING TESTING DUE TO FAILED TEST
0.0239109992981 TOTAL RUNTIME
1 EXECUTED
22 TOTAL TEST OPERATIONS
0.0027322769165 TIME SPENT EXECUTING TEST OPERATIONS
0.00131154060364 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
1.07288360596e-05 TIME SPENT CHECKING PROPERTIES
0.00274300575256 TOTAL TIME SPENT RUNNING SUT
0.00362706184387 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
