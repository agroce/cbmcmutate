Random testing using config=Config(swarmSwitch=None, maxMustHitBranch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, internal=False, exploit=None, seed=None, generalize=False, fastQuickAnalysis=False, stopWhenNoCoverage=None, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, maxMustHitStatement=None, noCoverageExploit=False, quickTests=False, relax=False, startExploitStall=0, enumerateEnabled=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, stopWhenHitStatement=None, biasLOC=None, progress=False, postCover=False, swarmLength=None, generateLOC=None, noSwarmDependencies=False, profile=False, LOCBaseline=0.2, noEnumerateEnabled=False, full=True, multiple=False, timedProgress=30, silentFail=False, ddmin=False, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.48669.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, markovP=1.0, logging=None, stopWhenHitBranch=None, LOCProbs=False, stopWhenStatements=None, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.0, depth=200, trackMaxCoverage=None, throughput=False, noCover=True, timeout=60, stutter=None, uncaught=False, markov=None, showActions=False, startExploit=0.0)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.OSError'>, OSError(13, 'Permission Denied'), <traceback object at 0x1018bf6c8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 48329, in safely
    act[2]()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 66, in act0
    self.p_os[0] = newFakeOS()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 21, in newFakeOS
    fs.CreateDirectory('/Volumes')
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 2075, in CreateDirectory
    current_dir.AddEntry(new_dir)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 685, in AddEntry
    raise OSError(errno.EACCES, 'Permission Denied', self.GetPath())
Original test has 29 steps

SAVING TEST AS failure.48669.test
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
component2 = "phi"                                                       # STEP 0
ACTION: component2 = "phi" 
component2 = None : <type 'NoneType'>
=> component2 = 'phi' : <type 'str'>
==================================================
component3 = "a"                                                         # STEP 1
ACTION: component3 = "a" 
component3 = None : <type 'NoneType'>
=> component3 = 'a' : <type 'str'>
==================================================
component4 = "phi"                                                       # STEP 2
ACTION: component4 = "phi" 
component4 = None : <type 'NoneType'>
=> component4 = 'phi' : <type 'str'>
==================================================
component1 = "f"                                                         # STEP 3
ACTION: component1 = "f" 
component1 = None : <type 'NoneType'>
=> component1 = 'f' : <type 'str'>
==================================================
str2 = ""                                                                # STEP 4
ACTION: str2 = "" 
str2 = None : <type 'NoneType'>
=> str2 = '' : <type 'str'>
==================================================
str2 += 'x'                                                              # STEP 5
ACTION: str2 += 'x' 
str2 = '' : <type 'str'>
=> str2 = 'x' : <type 'str'>
==================================================
str1 = ""                                                                # STEP 6
ACTION: str1 = "" 
str1 = None : <type 'NoneType'>
=> str1 = '' : <type 'str'>
==================================================
str2 += " "                                                              # STEP 7
ACTION: str2 += " " 
str2 = 'x' : <type 'str'>
=> str2 = 'x ' : <type 'str'>
==================================================
str3 = ""                                                                # STEP 8
ACTION: str3 = "" 
str3 = None : <type 'NoneType'>
=> str3 = '' : <type 'str'>
==================================================
component0 = "beta"                                                      # STEP 9
ACTION: component0 = "beta" 
component0 = None : <type 'NoneType'>
=> component0 = 'beta' : <type 'str'>
==================================================
str2 += 'h'                                                             # STEP 10
ACTION: str2 += 'h' 
str2 = 'x ' : <type 'str'>
=> str2 = 'x h' : <type 'str'>
==================================================
str3 += 'm'                                                             # STEP 11
ACTION: str3 += 'm' 
str3 = '' : <type 'str'>
=> str3 = 'm' : <type 'str'>
==================================================
str2 += 'u'                                                             # STEP 12
ACTION: str2 += 'u' 
str2 = 'x h' : <type 'str'>
=> str2 = 'x hu' : <type 'str'>
==================================================
str3 += 'a'                                                             # STEP 13
ACTION: str3 += 'a' 
str3 = 'm' : <type 'str'>
=> str3 = 'ma' : <type 'str'>
==================================================
str1 += 'e'                                                             # STEP 14
ACTION: str1 += 'e' 
str1 = '' : <type 'str'>
=> str1 = 'e' : <type 'str'>
==================================================
str2 += 'j'                                                             # STEP 15
ACTION: str2 += 'j' 
str2 = 'x hu' : <type 'str'>
=> str2 = 'x huj' : <type 'str'>
==================================================
bytes3 = 0                                                              # STEP 16
ACTION: bytes3 = 0 
bytes3 = None : <type 'NoneType'>
=> bytes3 = 0 : <type 'int'>
==================================================
str1 += 'q'                                                             # STEP 17
ACTION: str1 += 'q' 
str1 = 'e' : <type 'str'>
=> str1 = 'eq' : <type 'str'>
==================================================
str2 += 'n'                                                             # STEP 18
ACTION: str2 += 'n' 
str2 = 'x huj' : <type 'str'>
=> str2 = 'x hujn' : <type 'str'>
==================================================
str1 += 'v'                                                             # STEP 19
ACTION: str1 += 'v' 
str1 = 'eq' : <type 'str'>
=> str1 = 'eqv' : <type 'str'>
==================================================
bytes2 = 0                                                              # STEP 20
ACTION: bytes2 = 0 
bytes2 = None : <type 'NoneType'>
=> bytes2 = 0 : <type 'int'>
==================================================
str2 += 'z'                                                             # STEP 21
ACTION: str2 += 'z' 
str2 = 'x hujn' : <type 'str'>
=> str2 = 'x hujnz' : <type 'str'>
==================================================
str3 += 'y'                                                             # STEP 22
ACTION: str3 += 'y' 
str3 = 'ma' : <type 'str'>
=> str3 = 'may' : <type 'str'>
==================================================
path4 = "/Volumes/ramdisk/test"                                         # STEP 23
ACTION: path4 = "/Volumes/ramdisk/test" 
path4 = None : <type 'NoneType'>
=> path4 = '/Volumes/ramdisk/test' : <type 'str'>
==================================================
str3 += 'k'                                                             # STEP 24
ACTION: str3 += 'k' 
str3 = 'may' : <type 'str'>
=> str3 = 'mayk' : <type 'str'>
==================================================
str1 += 't'                                                             # STEP 25
ACTION: str1 += 't' 
str1 = 'eqv' : <type 'str'>
=> str1 = 'eqvt' : <type 'str'>
==================================================
str1 += 'a'                                                             # STEP 26
ACTION: str1 += 'a' 
str1 = 'eqvt' : <type 'str'>
=> str1 = 'eqvta' : <type 'str'>
==================================================
str1 += 'l'                                                             # STEP 27
ACTION: str1 += 'l' 
str1 = 'eqvta' : <type 'str'>
=> str1 = 'eqvtal' : <type 'str'>
==================================================
os0 = newFakeOS()                                                       # STEP 28
ACTION: os0 = newFakeOS() 
os0 = None : <type 'NoneType'>
os_REF0 = None : <type 'NoneType'>
RAISED EXCEPTION: <type 'exceptions.OSError'> [Errno 13] Permission Denied: '/'
ERROR: (<type 'exceptions.OSError'>, OSError(13, 'Permission Denied'), <traceback object at 0x101b2d518>)
TRACEBACK:
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 48329, in safely
    act[2]()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 66, in act0
    self.p_os[0] = newFakeOS()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 21, in newFakeOS
    fs.CreateDirectory('/Volumes')
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 2075, in CreateDirectory
    current_dir.AddEntry(new_dir)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 685, in AddEntry
    raise OSError(errno.EACCES, 'Permission Denied', self.GetPath())
STOPPING TESTING DUE TO FAILED TEST
0.0402150154114 TOTAL RUNTIME
2 EXECUTED
229 TOTAL TEST OPERATIONS
0.00368094444275 TIME SPENT EXECUTING TEST OPERATIONS
0.00951147079468 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
8.89301300049e-05 TIME SPENT CHECKING PROPERTIES
0.00376987457275 TOTAL TIME SPENT RUNNING SUT
0.00517082214355 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
