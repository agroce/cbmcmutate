Random testing using config=Config(swarmSwitch=None, maxMustHitBranch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, internal=False, exploit=None, seed=None, generalize=False, fastQuickAnalysis=False, stopWhenNoCoverage=None, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, maxMustHitStatement=None, noCoverageExploit=False, quickTests=False, relax=False, startExploitStall=0, enumerateEnabled=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, stopWhenHitStatement=None, biasLOC=None, progress=False, postCover=False, swarmLength=None, generateLOC=None, noSwarmDependencies=False, profile=False, LOCBaseline=0.2, noEnumerateEnabled=False, full=True, multiple=False, timedProgress=30, silentFail=False, ddmin=False, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.48745.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, markovP=1.0, logging=None, stopWhenHitBranch=None, LOCProbs=False, stopWhenStatements=None, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.0, depth=200, trackMaxCoverage=None, throughput=False, noCover=True, timeout=60, stutter=None, uncaught=False, markov=None, showActions=False, startExploit=0.0)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103bc35f0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 48329, in safely
    act[2]()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 10712, in act282
    assert (type(raised) == type(refRaised))
Original test has 25 steps

SAVING TEST AS failure.48745.test
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
component4 = "gamma"                                                     # STEP 0
ACTION: component4 = "gamma" 
component4 = None : <type 'NoneType'>
=> component4 = 'gamma' : <type 'str'>
==================================================
component3 = "delta"                                                     # STEP 1
ACTION: component3 = "delta" 
component3 = None : <type 'NoneType'>
=> component3 = 'delta' : <type 'str'>
==================================================
component2 = "epsilon"                                                   # STEP 2
ACTION: component2 = "epsilon" 
component2 = None : <type 'NoneType'>
=> component2 = 'epsilon' : <type 'str'>
==================================================
component0 = "delta"                                                     # STEP 3
ACTION: component0 = "delta" 
component0 = None : <type 'NoneType'>
=> component0 = 'delta' : <type 'str'>
==================================================
component1 = "delta"                                                     # STEP 4
ACTION: component1 = "delta" 
component1 = None : <type 'NoneType'>
=> component1 = 'delta' : <type 'str'>
==================================================
path1 = "/Volumes/ramdisk/test"                                          # STEP 5
ACTION: path1 = "/Volumes/ramdisk/test" 
path1 = None : <type 'NoneType'>
=> path1 = '/Volumes/ramdisk/test' : <type 'str'>
==================================================
bytes3 = 0                                                               # STEP 6
ACTION: bytes3 = 0 
bytes3 = None : <type 'NoneType'>
=> bytes3 = 0 : <type 'int'>
==================================================
str1 = ""                                                                # STEP 7
ACTION: str1 = "" 
str1 = None : <type 'NoneType'>
=> str1 = '' : <type 'str'>
==================================================
str1 += 'u'                                                              # STEP 8
ACTION: str1 += 'u' 
str1 = '' : <type 'str'>
=> str1 = 'u' : <type 'str'>
==================================================
bytes3 += 1                                                              # STEP 9
ACTION: bytes3 += 1 
bytes3 = 0 : <type 'int'>
=> bytes3 = 1 : <type 'int'>
==================================================
str1 += 'n'                                                             # STEP 10
ACTION: str1 += 'n' 
str1 = 'u' : <type 'str'>
=> str1 = 'un' : <type 'str'>
==================================================
path0 = "/Volumes/ramdisk/test"                                         # STEP 11
ACTION: path0 = "/Volumes/ramdisk/test" 
path0 = None : <type 'NoneType'>
=> path0 = '/Volumes/ramdisk/test' : <type 'str'>
==================================================
path1 += "/" + component2                                               # STEP 12
ACTION: path1 += "/" + component2 
component2 = 'epsilon' : <type 'str'>
path1 = '/Volumes/ramdisk/test' : <type 'str'>
=> path1 = '/Volumes/ramdisk/test/epsilon' : <type 'str'>
==================================================
str1 += 'l'                                                             # STEP 13
ACTION: str1 += 'l' 
str1 = 'un' : <type 'str'>
=> str1 = 'unl' : <type 'str'>
==================================================
str1 += 'p'                                                             # STEP 14
ACTION: str1 += 'p' 
str1 = 'unl' : <type 'str'>
=> str1 = 'unlp' : <type 'str'>
==================================================
component2 = "h"                                                        # STEP 15
ACTION: component2 = "h" 
component2 = 'epsilon' : <type 'str'>
=> component2 = 'h' : <type 'str'>
==================================================
bytes4 = 0                                                              # STEP 16
ACTION: bytes4 = 0 
bytes4 = None : <type 'NoneType'>
=> bytes4 = 0 : <type 'int'>
==================================================
bytes4 += 1                                                             # STEP 17
ACTION: bytes4 += 1 
bytes4 = 0 : <type 'int'>
=> bytes4 = 1 : <type 'int'>
==================================================
str1 += 'a'                                                             # STEP 18
ACTION: str1 += 'a' 
str1 = 'unlp' : <type 'str'>
=> str1 = 'unlpa' : <type 'str'>
==================================================
str1 += 'k'                                                             # STEP 19
ACTION: str1 += 'k' 
str1 = 'unlpa' : <type 'str'>
=> str1 = 'unlpak' : <type 'str'>
==================================================
os0 = newFakeOS()                                                       # STEP 20
ACTION: os0 = newFakeOS() 
os0 = None : <type 'NoneType'>
os_REF0 = None : <type 'NoneType'>
=> os0 = <pyfakefs.fake_filesystem.FakeOsModule object at 0x103c3e190> : <class 'pyfakefs.fake_filesystem.FakeOsModule'>
REFERENCE ACTION: os_REF0 = os 
=> os_REF0 = <module 'os' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'> : <type 'module'>
==================================================
result = os0.path.exists(path1)                                         # STEP 21
ACTION: result = os0.path.exists(path1) 
os0 = <pyfakefs.fake_filesystem.FakeOsModule object at 0x103c3e190> : <class 'pyfakefs.fake_filesystem.FakeOsModule'>
path1 = '/Volumes/ramdisk/test/epsilon' : <type 'str'>
os_REF0 = <module 'os' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'> : <type 'module'>
REFERENCE ACTION: result_REF = os_REF0.path.exists(path1) 
==================================================
path2 = "/Volumes/ramdisk/test"                                         # STEP 22
ACTION: path2 = "/Volumes/ramdisk/test" 
path2 = None : <type 'NoneType'>
=> path2 = '/Volumes/ramdisk/test' : <type 'str'>
==================================================
str1 += 'g'                                                             # STEP 23
ACTION: str1 += 'g' 
str1 = 'unlpak' : <type 'str'>
=> str1 = 'unlpakg' : <type 'str'>
==================================================
os0.symlink(path2,path1)                                                # STEP 24
ACTION: os0.symlink(path2,path1) 
os0 = <pyfakefs.fake_filesystem.FakeOsModule object at 0x103c3e190> : <class 'pyfakefs.fake_filesystem.FakeOsModule'>
path2 = '/Volumes/ramdisk/test' : <type 'str'>
path1 = '/Volumes/ramdisk/test/epsilon' : <type 'str'>
os_REF0 = <module 'os' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'> : <type 'module'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.OSError'> [Errno 20] Not a directory in the fake filesystem: '/Volumes/ramdisk/test'
REFERENCE ACTION: os_REF0.symlink(path2,path1) 
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103bf8b48>)
TRACEBACK:
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 48329, in safely
    act[2]()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 10712, in act282
    assert (type(raised) == type(refRaised))
STOPPING TESTING DUE TO FAILED TEST
0.027526140213 TOTAL RUNTIME
1 EXECUTED
25 TOTAL TEST OPERATIONS
0.00174856185913 TIME SPENT EXECUTING TEST OPERATIONS
0.00286674499512 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
1.12056732178e-05 TIME SPENT CHECKING PROPERTIES
0.00175976753235 TOTAL TIME SPENT RUNNING SUT
0.00317788124084 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
