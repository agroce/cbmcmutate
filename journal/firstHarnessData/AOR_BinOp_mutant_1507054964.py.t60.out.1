Random testing using config=Config(swarmSwitch=None, maxMustHitBranch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, internal=False, exploit=None, seed=None, generalize=False, fastQuickAnalysis=False, stopWhenNoCoverage=None, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, maxMustHitStatement=None, noCoverageExploit=False, quickTests=False, relax=False, startExploitStall=0, enumerateEnabled=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, stopWhenHitStatement=None, biasLOC=None, progress=False, postCover=False, swarmLength=None, generateLOC=None, noSwarmDependencies=False, profile=False, LOCBaseline=0.2, noEnumerateEnabled=False, full=True, multiple=False, timedProgress=30, silentFail=False, ddmin=False, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.52829.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, markovP=1.0, logging=None, stopWhenHitBranch=None, LOCProbs=False, stopWhenStatements=None, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.0, depth=200, trackMaxCoverage=None, throughput=False, noCover=True, timeout=60, stutter=None, uncaught=False, markov=None, showActions=False, startExploit=0.0)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.TypeError'>, TypeError("can't multiply sequence by non-int of type 'str'",), <traceback object at 0x102d088c0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 48329, in safely
    act[2]()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 66, in act0
    self.p_os[0] = newFakeOS()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 21, in newFakeOS
    fs.CreateDirectory('/Volumes')
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 2055, in CreateDirectory
    if self.Exists(directory_path):
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1624, in Exists
    file_path = self.ResolvePath(file_path)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1718, in ResolvePath
    file_path = self.NormalizePath(self.NormalizeCase(file_path))
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1329, in NormalizeCase
    return components_to_path()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1305, in components_to_path
    normalized_path = (sep * normalized_path)
Original test has 48 steps

SAVING TEST AS failure.52829.test
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
str2 = ""                                                                # STEP 0
ACTION: str2 = "" 
str2 = None : <type 'NoneType'>
=> str2 = '' : <type 'str'>
==================================================
component4 = "f"                                                         # STEP 1
ACTION: component4 = "f" 
component4 = None : <type 'NoneType'>
=> component4 = 'f' : <type 'str'>
==================================================
str2 += 'e'                                                              # STEP 2
ACTION: str2 += 'e' 
str2 = '' : <type 'str'>
=> str2 = 'e' : <type 'str'>
==================================================
str1 = ""                                                                # STEP 3
ACTION: str1 = "" 
str1 = None : <type 'NoneType'>
=> str1 = '' : <type 'str'>
==================================================
bytes4 = 0                                                               # STEP 4
ACTION: bytes4 = 0 
bytes4 = None : <type 'NoneType'>
=> bytes4 = 0 : <type 'int'>
==================================================
component0 = "f"                                                         # STEP 5
ACTION: component0 = "f" 
component0 = None : <type 'NoneType'>
=> component0 = 'f' : <type 'str'>
==================================================
component2 = "gamma"                                                     # STEP 6
ACTION: component2 = "gamma" 
component2 = None : <type 'NoneType'>
=> component2 = 'gamma' : <type 'str'>
==================================================
str2 += 'q'                                                              # STEP 7
ACTION: str2 += 'q' 
str2 = 'e' : <type 'str'>
=> str2 = 'eq' : <type 'str'>
==================================================
str2 += 'w'                                                              # STEP 8
ACTION: str2 += 'w' 
str2 = 'eq' : <type 'str'>
=> str2 = 'eqw' : <type 'str'>
==================================================
component3 = "gamma"                                                     # STEP 9
ACTION: component3 = "gamma" 
component3 = None : <type 'NoneType'>
=> component3 = 'gamma' : <type 'str'>
==================================================
str2 = ""                                                               # STEP 10
ACTION: str2 = "" 
str2 = 'eqw' : <type 'str'>
=> str2 = '' : <type 'str'>
==================================================
str2 += 'i'                                                             # STEP 11
ACTION: str2 += 'i' 
str2 = '' : <type 'str'>
=> str2 = 'i' : <type 'str'>
==================================================
str2 += 'a'                                                             # STEP 12
ACTION: str2 += 'a' 
str2 = 'i' : <type 'str'>
=> str2 = 'ia' : <type 'str'>
==================================================
component1 = "f"                                                        # STEP 13
ACTION: component1 = "f" 
component1 = None : <type 'NoneType'>
=> component1 = 'f' : <type 'str'>
==================================================
path3 = "/Volumes/ramdisk/test"                                         # STEP 14
ACTION: path3 = "/Volumes/ramdisk/test" 
path3 = None : <type 'NoneType'>
=> path3 = '/Volumes/ramdisk/test' : <type 'str'>
==================================================
str1 += 't'                                                             # STEP 15
ACTION: str1 += 't' 
str1 = '' : <type 'str'>
=> str1 = 't' : <type 'str'>
==================================================
str1 += 'q'                                                             # STEP 16
ACTION: str1 += 'q' 
str1 = 't' : <type 'str'>
=> str1 = 'tq' : <type 'str'>
==================================================
str1 += 'i'                                                             # STEP 17
ACTION: str1 += 'i' 
str1 = 'tq' : <type 'str'>
=> str1 = 'tqi' : <type 'str'>
==================================================
str1 += 'p'                                                             # STEP 18
ACTION: str1 += 'p' 
str1 = 'tqi' : <type 'str'>
=> str1 = 'tqip' : <type 'str'>
==================================================
str1 += 'x'                                                             # STEP 19
ACTION: str1 += 'x' 
str1 = 'tqip' : <type 'str'>
=> str1 = 'tqipx' : <type 'str'>
==================================================
str1 += 't'                                                             # STEP 20
ACTION: str1 += 't' 
str1 = 'tqipx' : <type 'str'>
=> str1 = 'tqipxt' : <type 'str'>
==================================================
str2 += 'x'                                                             # STEP 21
ACTION: str2 += 'x' 
str2 = 'ia' : <type 'str'>
=> str2 = 'iax' : <type 'str'>
==================================================
str2 += 'm'                                                             # STEP 22
ACTION: str2 += 'm' 
str2 = 'iax' : <type 'str'>
=> str2 = 'iaxm' : <type 'str'>
==================================================
str0 = ""                                                               # STEP 23
ACTION: str0 = "" 
str0 = None : <type 'NoneType'>
=> str0 = '' : <type 'str'>
==================================================
str2 += 'g'                                                             # STEP 24
ACTION: str2 += 'g' 
str2 = 'iaxm' : <type 'str'>
=> str2 = 'iaxmg' : <type 'str'>
==================================================
str1 += 'u'                                                             # STEP 25
ACTION: str1 += 'u' 
str1 = 'tqipxt' : <type 'str'>
=> str1 = 'tqipxtu' : <type 'str'>
==================================================
str0 += 'm'                                                             # STEP 26
ACTION: str0 += 'm' 
str0 = '' : <type 'str'>
=> str0 = 'm' : <type 'str'>
==================================================
str2 += 'd'                                                             # STEP 27
ACTION: str2 += 'd' 
str2 = 'iaxmg' : <type 'str'>
=> str2 = 'iaxmgd' : <type 'str'>
==================================================
str0 += 'q'                                                             # STEP 28
ACTION: str0 += 'q' 
str0 = 'm' : <type 'str'>
=> str0 = 'mq' : <type 'str'>
==================================================
str2 += 'g'                                                             # STEP 29
ACTION: str2 += 'g' 
str2 = 'iaxmgd' : <type 'str'>
=> str2 = 'iaxmgdg' : <type 'str'>
==================================================
str2 += 'g'                                                             # STEP 30
ACTION: str2 += 'g' 
str2 = 'iaxmgdg' : <type 'str'>
=> str2 = 'iaxmgdgg' : <type 'str'>
==================================================
str1 += 'w'                                                             # STEP 31
ACTION: str1 += 'w' 
str1 = 'tqipxtu' : <type 'str'>
=> str1 = 'tqipxtuw' : <type 'str'>
==================================================
str0 += 'w'                                                             # STEP 32
ACTION: str0 += 'w' 
str0 = 'mq' : <type 'str'>
=> str0 = 'mqw' : <type 'str'>
==================================================
str4 = ""                                                               # STEP 33
ACTION: str4 = "" 
str4 = None : <type 'NoneType'>
=> str4 = '' : <type 'str'>
==================================================
str2 += 'i'                                                             # STEP 34
ACTION: str2 += 'i' 
str2 = 'iaxmgdgg' : <type 'str'>
=> str2 = 'iaxmgdggi' : <type 'str'>
==================================================
str0 += 'h'                                                             # STEP 35
ACTION: str0 += 'h' 
str0 = 'mqw' : <type 'str'>
=> str0 = 'mqwh' : <type 'str'>
==================================================
str4 += 'h'                                                             # STEP 36
ACTION: str4 += 'h' 
str4 = '' : <type 'str'>
=> str4 = 'h' : <type 'str'>
==================================================
str0 += 'p'                                                             # STEP 37
ACTION: str0 += 'p' 
str0 = 'mqwh' : <type 'str'>
=> str0 = 'mqwhp' : <type 'str'>
==================================================
str1 += 'i'                                                             # STEP 38
ACTION: str1 += 'i' 
str1 = 'tqipxtuw' : <type 'str'>
=> str1 = 'tqipxtuwi' : <type 'str'>
==================================================
str2 += 't'                                                             # STEP 39
ACTION: str2 += 't' 
str2 = 'iaxmgdggi' : <type 'str'>
=> str2 = 'iaxmgdggit' : <type 'str'>
==================================================
str1 += 'w'                                                             # STEP 40
ACTION: str1 += 'w' 
str1 = 'tqipxtuwi' : <type 'str'>
=> str1 = 'tqipxtuwiw' : <type 'str'>
==================================================
str2 += 'v'                                                             # STEP 41
ACTION: str2 += 'v' 
str2 = 'iaxmgdggit' : <type 'str'>
=> str2 = 'iaxmgdggitv' : <type 'str'>
==================================================
str3 = ""                                                               # STEP 42
ACTION: str3 = "" 
str3 = None : <type 'NoneType'>
=> str3 = '' : <type 'str'>
==================================================
bytes2 = 0                                                              # STEP 43
ACTION: bytes2 = 0 
bytes2 = None : <type 'NoneType'>
=> bytes2 = 0 : <type 'int'>
==================================================
str3 += 'g'                                                             # STEP 44
ACTION: str3 += 'g' 
str3 = '' : <type 'str'>
=> str3 = 'g' : <type 'str'>
==================================================
str3 += 'w'                                                             # STEP 45
ACTION: str3 += 'w' 
str3 = 'g' : <type 'str'>
=> str3 = 'gw' : <type 'str'>
==================================================
str4 += 'b'                                                             # STEP 46
ACTION: str4 += 'b' 
str4 = 'h' : <type 'str'>
=> str4 = 'hb' : <type 'str'>
==================================================
os0 = newFakeOS()                                                       # STEP 47
ACTION: os0 = newFakeOS() 
os0 = None : <type 'NoneType'>
os_REF0 = None : <type 'NoneType'>
RAISED EXCEPTION: <type 'exceptions.TypeError'> can't multiply sequence by non-int of type 'str'
ERROR: (<type 'exceptions.TypeError'>, TypeError("can't multiply sequence by non-int of type 'str'",), <traceback object at 0x102dbdb48>)
TRACEBACK:
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 48329, in safely
    act[2]()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 66, in act0
    self.p_os[0] = newFakeOS()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 21, in newFakeOS
    fs.CreateDirectory('/Volumes')
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 2055, in CreateDirectory
    if self.Exists(directory_path):
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1624, in Exists
    file_path = self.ResolvePath(file_path)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1718, in ResolvePath
    file_path = self.NormalizePath(self.NormalizeCase(file_path))
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1329, in NormalizeCase
    return components_to_path()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1305, in components_to_path
    normalized_path = (sep * normalized_path)
STOPPING TESTING DUE TO FAILED TEST
0.0322580337524 TOTAL RUNTIME
1 EXECUTED
48 TOTAL TEST OPERATIONS
0.00185680389404 TIME SPENT EXECUTING TEST OPERATIONS
0.00210213661194 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
1.85966491699e-05 TIME SPENT CHECKING PROPERTIES
0.00187540054321 TOTAL TIME SPENT RUNNING SUT
0.00323700904846 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
