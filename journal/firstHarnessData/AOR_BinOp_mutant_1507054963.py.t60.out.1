Random testing using config=Config(swarmSwitch=None, maxMustHitBranch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, internal=False, exploit=None, seed=None, generalize=False, fastQuickAnalysis=False, stopWhenNoCoverage=None, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, maxMustHitStatement=None, noCoverageExploit=False, quickTests=False, relax=False, startExploitStall=0, enumerateEnabled=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, stopWhenHitStatement=None, biasLOC=None, progress=False, postCover=False, swarmLength=None, generateLOC=None, noSwarmDependencies=False, profile=False, LOCBaseline=0.2, noEnumerateEnabled=False, full=True, multiple=False, timedProgress=30, silentFail=False, ddmin=False, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.49766.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, markovP=1.0, logging=None, stopWhenHitBranch=None, LOCProbs=False, stopWhenStatements=None, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.0, depth=200, trackMaxCoverage=None, throughput=False, noCover=True, timeout=60, stutter=None, uncaught=False, markov=None, showActions=False, startExploit=0.0)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.TypeError'>, TypeError("unsupported operand type(s) for /: 'str' and 'str'",), <traceback object at 0x104df8c68>)
TRACEBACK:
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 48329, in safely
    act[2]()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 66, in act0
    self.p_os[0] = newFakeOS()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 21, in newFakeOS
    fs.CreateDirectory('/Volumes')
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 2055, in CreateDirectory
    if self.Exists(directory_path):
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1624, in Exists
    file_path = self.ResolvePath(file_path)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1718, in ResolvePath
    file_path = self.NormalizePath(self.NormalizeCase(file_path))
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1329, in NormalizeCase
    return components_to_path()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1305, in components_to_path
    normalized_path = (sep / normalized_path)
Original test has 36 steps

SAVING TEST AS failure.49766.test
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
component4 = "h"                                                         # STEP 0
ACTION: component4 = "h" 
component4 = None : <type 'NoneType'>
=> component4 = 'h' : <type 'str'>
==================================================
str2 = ""                                                                # STEP 1
ACTION: str2 = "" 
str2 = None : <type 'NoneType'>
=> str2 = '' : <type 'str'>
==================================================
component1 = "h"                                                         # STEP 2
ACTION: component1 = "h" 
component1 = None : <type 'NoneType'>
=> component1 = 'h' : <type 'str'>
==================================================
component3 = "f"                                                         # STEP 3
ACTION: component3 = "f" 
component3 = None : <type 'NoneType'>
=> component3 = 'f' : <type 'str'>
==================================================
component2 = "phi"                                                       # STEP 4
ACTION: component2 = "phi" 
component2 = None : <type 'NoneType'>
=> component2 = 'phi' : <type 'str'>
==================================================
component0 = "gamma"                                                     # STEP 5
ACTION: component0 = "gamma" 
component0 = None : <type 'NoneType'>
=> component0 = 'gamma' : <type 'str'>
==================================================
str2 += 'n'                                                              # STEP 6
ACTION: str2 += 'n' 
str2 = '' : <type 'str'>
=> str2 = 'n' : <type 'str'>
==================================================
path4 = "/Volumes/ramdisk/test"                                          # STEP 7
ACTION: path4 = "/Volumes/ramdisk/test" 
path4 = None : <type 'NoneType'>
=> path4 = '/Volumes/ramdisk/test' : <type 'str'>
==================================================
str2 += 'z'                                                              # STEP 8
ACTION: str2 += 'z' 
str2 = 'n' : <type 'str'>
=> str2 = 'nz' : <type 'str'>
==================================================
str2 += 'e'                                                              # STEP 9
ACTION: str2 += 'e' 
str2 = 'nz' : <type 'str'>
=> str2 = 'nze' : <type 'str'>
==================================================
path4 += "/" + component2                                               # STEP 10
ACTION: path4 += "/" + component2 
component2 = 'phi' : <type 'str'>
path4 = '/Volumes/ramdisk/test' : <type 'str'>
=> path4 = '/Volumes/ramdisk/test/phi' : <type 'str'>
==================================================
str3 = ""                                                               # STEP 11
ACTION: str3 = "" 
str3 = None : <type 'NoneType'>
=> str3 = '' : <type 'str'>
==================================================
component2 = "b"                                                        # STEP 12
ACTION: component2 = "b" 
component2 = 'phi' : <type 'str'>
=> component2 = 'b' : <type 'str'>
==================================================
str3 += " "                                                             # STEP 13
ACTION: str3 += " " 
str3 = '' : <type 'str'>
=> str3 = ' ' : <type 'str'>
==================================================
str3 += 'k'                                                             # STEP 14
ACTION: str3 += 'k' 
str3 = ' ' : <type 'str'>
=> str3 = ' k' : <type 'str'>
==================================================
str3 += 'h'                                                             # STEP 15
ACTION: str3 += 'h' 
str3 = ' k' : <type 'str'>
=> str3 = ' kh' : <type 'str'>
==================================================
str1 = ""                                                               # STEP 16
ACTION: str1 = "" 
str1 = None : <type 'NoneType'>
=> str1 = '' : <type 'str'>
==================================================
str3 += 'g'                                                             # STEP 17
ACTION: str3 += 'g' 
str3 = ' kh' : <type 'str'>
=> str3 = ' khg' : <type 'str'>
==================================================
str1 += " "                                                             # STEP 18
ACTION: str1 += " " 
str1 = '' : <type 'str'>
=> str1 = ' ' : <type 'str'>
==================================================
str2 += 'f'                                                             # STEP 19
ACTION: str2 += 'f' 
str2 = 'nze' : <type 'str'>
=> str2 = 'nzef' : <type 'str'>
==================================================
str1 += 'z'                                                             # STEP 20
ACTION: str1 += 'z' 
str1 = ' ' : <type 'str'>
=> str1 = ' z' : <type 'str'>
==================================================
str3 += 'o'                                                             # STEP 21
ACTION: str3 += 'o' 
str3 = ' khg' : <type 'str'>
=> str3 = ' khgo' : <type 'str'>
==================================================
str3 += 'x'                                                             # STEP 22
ACTION: str3 += 'x' 
str3 = ' khgo' : <type 'str'>
=> str3 = ' khgox' : <type 'str'>
==================================================
str3 += 'j'                                                             # STEP 23
ACTION: str3 += 'j' 
str3 = ' khgox' : <type 'str'>
=> str3 = ' khgoxj' : <type 'str'>
==================================================
str2 += 'p'                                                             # STEP 24
ACTION: str2 += 'p' 
str2 = 'nzef' : <type 'str'>
=> str2 = 'nzefp' : <type 'str'>
==================================================
path1 = "/Volumes/ramdisk/test"                                         # STEP 25
ACTION: path1 = "/Volumes/ramdisk/test" 
path1 = None : <type 'NoneType'>
=> path1 = '/Volumes/ramdisk/test' : <type 'str'>
==================================================
str3 += 'p'                                                             # STEP 26
ACTION: str3 += 'p' 
str3 = ' khgoxj' : <type 'str'>
=> str3 = ' khgoxjp' : <type 'str'>
==================================================
str1 += 'y'                                                             # STEP 27
ACTION: str1 += 'y' 
str1 = ' z' : <type 'str'>
=> str1 = ' zy' : <type 'str'>
==================================================
str2 = ""                                                               # STEP 28
ACTION: str2 = "" 
str2 = 'nzefp' : <type 'str'>
=> str2 = '' : <type 'str'>
==================================================
str1 += 'l'                                                             # STEP 29
ACTION: str1 += 'l' 
str1 = ' zy' : <type 'str'>
=> str1 = ' zyl' : <type 'str'>
==================================================
path4 = "/Volumes/ramdisk/test"                                         # STEP 30
ACTION: path4 = "/Volumes/ramdisk/test" 
path4 = '/Volumes/ramdisk/test/phi' : <type 'str'>
=> path4 = '/Volumes/ramdisk/test' : <type 'str'>
==================================================
str0 = ""                                                               # STEP 31
ACTION: str0 = "" 
str0 = None : <type 'NoneType'>
=> str0 = '' : <type 'str'>
==================================================
str3 += 'k'                                                             # STEP 32
ACTION: str3 += 'k' 
str3 = ' khgoxjp' : <type 'str'>
=> str3 = ' khgoxjpk' : <type 'str'>
==================================================
str2 += 'v'                                                             # STEP 33
ACTION: str2 += 'v' 
str2 = '' : <type 'str'>
=> str2 = 'v' : <type 'str'>
==================================================
str2 += 'j'                                                             # STEP 34
ACTION: str2 += 'j' 
str2 = 'v' : <type 'str'>
=> str2 = 'vj' : <type 'str'>
==================================================
os0 = newFakeOS()                                                       # STEP 35
ACTION: os0 = newFakeOS() 
os0 = None : <type 'NoneType'>
os_REF0 = None : <type 'NoneType'>
RAISED EXCEPTION: <type 'exceptions.TypeError'> unsupported operand type(s) for /: 'str' and 'str'
ERROR: (<type 'exceptions.TypeError'>, TypeError("unsupported operand type(s) for /: 'str' and 'str'",), <traceback object at 0x104e24b48>)
TRACEBACK:
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 48329, in safely
    act[2]()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 66, in act0
    self.p_os[0] = newFakeOS()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 21, in newFakeOS
    fs.CreateDirectory('/Volumes')
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 2055, in CreateDirectory
    if self.Exists(directory_path):
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1624, in Exists
    file_path = self.ResolvePath(file_path)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1718, in ResolvePath
    file_path = self.NormalizePath(self.NormalizeCase(file_path))
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1329, in NormalizeCase
    return components_to_path()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1305, in components_to_path
    normalized_path = (sep / normalized_path)
STOPPING TESTING DUE TO FAILED TEST
0.0225012302399 TOTAL RUNTIME
1 EXECUTED
36 TOTAL TEST OPERATIONS
0.000718355178833 TIME SPENT EXECUTING TEST OPERATIONS
0.00199913978577 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
1.12056732178e-05 TIME SPENT CHECKING PROPERTIES
0.000729560852051 TOTAL TIME SPENT RUNNING SUT
0.00307393074036 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
