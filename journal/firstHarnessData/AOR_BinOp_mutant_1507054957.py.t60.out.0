Random testing using config=Config(swarmSwitch=None, maxMustHitBranch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, internal=False, exploit=None, seed=None, generalize=False, fastQuickAnalysis=False, stopWhenNoCoverage=None, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, maxMustHitStatement=None, noCoverageExploit=False, quickTests=False, relax=False, startExploitStall=0, enumerateEnabled=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, stopWhenHitStatement=None, biasLOC=None, progress=False, postCover=False, swarmLength=None, generateLOC=None, noSwarmDependencies=False, profile=False, LOCBaseline=0.2, noEnumerateEnabled=False, full=True, multiple=False, timedProgress=30, silentFail=False, ddmin=False, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.53600.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, markovP=1.0, logging=None, stopWhenHitBranch=None, LOCProbs=False, stopWhenStatements=None, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.0, depth=200, trackMaxCoverage=None, throughput=False, noCover=True, timeout=60, stutter=None, uncaught=False, markov=None, showActions=False, startExploit=0.0)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.TypeError'>, TypeError("unsupported operand type(s) for -: 'str' and 'str'",), <traceback object at 0x1039c14d0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 48329, in safely
    act[2]()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 66, in act0
    self.p_os[0] = newFakeOS()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 17, in newFakeOS
    fs = pyfakefs.fake_filesystem.FakeFilesystem()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 881, in __init__
    self.AddMountPoint(self.root.name, total_size)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 933, in AddMountPoint
    path = self.NormalizePath(path)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1357, in NormalizePath
    return self.CollapsePath(path)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1283, in CollapsePath
    collapsed_path = (sep - collapsed_path)
Original test has 45 steps

SAVING TEST AS failure.53600.test
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
component1 = "epsilon"                                                   # STEP 0
ACTION: component1 = "epsilon" 
component1 = None : <type 'NoneType'>
=> component1 = 'epsilon' : <type 'str'>
==================================================
component2 = "h"                                                         # STEP 1
ACTION: component2 = "h" 
component2 = None : <type 'NoneType'>
=> component2 = 'h' : <type 'str'>
==================================================
path0 = "/Volumes/ramdisk/test"                                          # STEP 2
ACTION: path0 = "/Volumes/ramdisk/test" 
path0 = None : <type 'NoneType'>
=> path0 = '/Volumes/ramdisk/test' : <type 'str'>
==================================================
component4 = "f"                                                         # STEP 3
ACTION: component4 = "f" 
component4 = None : <type 'NoneType'>
=> component4 = 'f' : <type 'str'>
==================================================
component3 = "beta"                                                      # STEP 4
ACTION: component3 = "beta" 
component3 = None : <type 'NoneType'>
=> component3 = 'beta' : <type 'str'>
==================================================
str1 = ""                                                                # STEP 5
ACTION: str1 = "" 
str1 = None : <type 'NoneType'>
=> str1 = '' : <type 'str'>
==================================================
component0 = "f"                                                         # STEP 6
ACTION: component0 = "f" 
component0 = None : <type 'NoneType'>
=> component0 = 'f' : <type 'str'>
==================================================
path2 = "/Volumes/ramdisk/test"                                          # STEP 7
ACTION: path2 = "/Volumes/ramdisk/test" 
path2 = None : <type 'NoneType'>
=> path2 = '/Volumes/ramdisk/test' : <type 'str'>
==================================================
str1 += 'u'                                                              # STEP 8
ACTION: str1 += 'u' 
str1 = '' : <type 'str'>
=> str1 = 'u' : <type 'str'>
==================================================
str1 += 'y'                                                              # STEP 9
ACTION: str1 += 'y' 
str1 = 'u' : <type 'str'>
=> str1 = 'uy' : <type 'str'>
==================================================
str1 += 'a'                                                             # STEP 10
ACTION: str1 += 'a' 
str1 = 'uy' : <type 'str'>
=> str1 = 'uya' : <type 'str'>
==================================================
bytes0 = 0                                                              # STEP 11
ACTION: bytes0 = 0 
bytes0 = None : <type 'NoneType'>
=> bytes0 = 0 : <type 'int'>
==================================================
path2 += "/" + component1                                               # STEP 12
ACTION: path2 += "/" + component1 
component1 = 'epsilon' : <type 'str'>
path2 = '/Volumes/ramdisk/test' : <type 'str'>
=> path2 = '/Volumes/ramdisk/test/epsilon' : <type 'str'>
==================================================
str3 = ""                                                               # STEP 13
ACTION: str3 = "" 
str3 = None : <type 'NoneType'>
=> str3 = '' : <type 'str'>
==================================================
component1 = "omega"                                                    # STEP 14
ACTION: component1 = "omega" 
component1 = 'epsilon' : <type 'str'>
=> component1 = 'omega' : <type 'str'>
==================================================
path2 += "/" + component3                                               # STEP 15
ACTION: path2 += "/" + component3 
component3 = 'beta' : <type 'str'>
path2 = '/Volumes/ramdisk/test/epsilon' : <type 'str'>
=> path2 = '/Volumes/ramdisk/test/epsilon/beta' : <type 'str'>
==================================================
str1 += 'o'                                                             # STEP 16
ACTION: str1 += 'o' 
str1 = 'uya' : <type 'str'>
=> str1 = 'uyao' : <type 'str'>
==================================================
str1 += 'u'                                                             # STEP 17
ACTION: str1 += 'u' 
str1 = 'uyao' : <type 'str'>
=> str1 = 'uyaou' : <type 'str'>
==================================================
str1 += 'u'                                                             # STEP 18
ACTION: str1 += 'u' 
str1 = 'uyaou' : <type 'str'>
=> str1 = 'uyaouu' : <type 'str'>
==================================================
str1 += 'f'                                                             # STEP 19
ACTION: str1 += 'f' 
str1 = 'uyaouu' : <type 'str'>
=> str1 = 'uyaouuf' : <type 'str'>
==================================================
str1 += 'a'                                                             # STEP 20
ACTION: str1 += 'a' 
str1 = 'uyaouuf' : <type 'str'>
=> str1 = 'uyaouufa' : <type 'str'>
==================================================
bytes2 = 0                                                              # STEP 21
ACTION: bytes2 = 0 
bytes2 = None : <type 'NoneType'>
=> bytes2 = 0 : <type 'int'>
==================================================
str4 = ""                                                               # STEP 22
ACTION: str4 = "" 
str4 = None : <type 'NoneType'>
=> str4 = '' : <type 'str'>
==================================================
component3 = "epsilon"                                                  # STEP 23
ACTION: component3 = "epsilon" 
component3 = 'beta' : <type 'str'>
=> component3 = 'epsilon' : <type 'str'>
==================================================
str1 += 'd'                                                             # STEP 24
ACTION: str1 += 'd' 
str1 = 'uyaouufa' : <type 'str'>
=> str1 = 'uyaouufad' : <type 'str'>
==================================================
str4 += 'b'                                                             # STEP 25
ACTION: str4 += 'b' 
str4 = '' : <type 'str'>
=> str4 = 'b' : <type 'str'>
==================================================
str1 += 'f'                                                             # STEP 26
ACTION: str1 += 'f' 
str1 = 'uyaouufad' : <type 'str'>
=> str1 = 'uyaouufadf' : <type 'str'>
==================================================
str1 += 'z'                                                             # STEP 27
ACTION: str1 += 'z' 
str1 = 'uyaouufadf' : <type 'str'>
=> str1 = 'uyaouufadfz' : <type 'str'>
==================================================
str1 += 'w'                                                             # STEP 28
ACTION: str1 += 'w' 
str1 = 'uyaouufadfz' : <type 'str'>
=> str1 = 'uyaouufadfzw' : <type 'str'>
==================================================
str4 += 'b'                                                             # STEP 29
ACTION: str4 += 'b' 
str4 = 'b' : <type 'str'>
=> str4 = 'bb' : <type 'str'>
==================================================
path4 = "/Volumes/ramdisk/test"                                         # STEP 30
ACTION: path4 = "/Volumes/ramdisk/test" 
path4 = None : <type 'NoneType'>
=> path4 = '/Volumes/ramdisk/test' : <type 'str'>
==================================================
str4 += " "                                                             # STEP 31
ACTION: str4 += " " 
str4 = 'bb' : <type 'str'>
=> str4 = 'bb ' : <type 'str'>
==================================================
str1 += 'y'                                                             # STEP 32
ACTION: str1 += 'y' 
str1 = 'uyaouufadfzw' : <type 'str'>
=> str1 = 'uyaouufadfzwy' : <type 'str'>
==================================================
str3 += 'u'                                                             # STEP 33
ACTION: str3 += 'u' 
str3 = '' : <type 'str'>
=> str3 = 'u' : <type 'str'>
==================================================
str3 += 'e'                                                             # STEP 34
ACTION: str3 += 'e' 
str3 = 'u' : <type 'str'>
=> str3 = 'ue' : <type 'str'>
==================================================
path2 += "/" + component2                                               # STEP 35
ACTION: path2 += "/" + component2 
component2 = 'h' : <type 'str'>
path2 = '/Volumes/ramdisk/test/epsilon/beta' : <type 'str'>
=> path2 = '/Volumes/ramdisk/test/epsilon/beta/h' : <type 'str'>
==================================================
str1 += 'y'                                                             # STEP 36
ACTION: str1 += 'y' 
str1 = 'uyaouufadfzwy' : <type 'str'>
=> str1 = 'uyaouufadfzwyy' : <type 'str'>
==================================================
str3 += 'j'                                                             # STEP 37
ACTION: str3 += 'j' 
str3 = 'ue' : <type 'str'>
=> str3 = 'uej' : <type 'str'>
==================================================
str4 += 'e'                                                             # STEP 38
ACTION: str4 += 'e' 
str4 = 'bb ' : <type 'str'>
=> str4 = 'bb e' : <type 'str'>
==================================================
str3 += 'd'                                                             # STEP 39
ACTION: str3 += 'd' 
str3 = 'uej' : <type 'str'>
=> str3 = 'uejd' : <type 'str'>
==================================================
str4 += 'v'                                                             # STEP 40
ACTION: str4 += 'v' 
str4 = 'bb e' : <type 'str'>
=> str4 = 'bb ev' : <type 'str'>
==================================================
str1 += 'n'                                                             # STEP 41
ACTION: str1 += 'n' 
str1 = 'uyaouufadfzwyy' : <type 'str'>
=> str1 = 'uyaouufadfzwyyn' : <type 'str'>
==================================================
path4 += "/" + component3                                               # STEP 42
ACTION: path4 += "/" + component3 
component3 = 'epsilon' : <type 'str'>
path4 = '/Volumes/ramdisk/test' : <type 'str'>
=> path4 = '/Volumes/ramdisk/test/epsilon' : <type 'str'>
==================================================
component2 = "b"                                                        # STEP 43
ACTION: component2 = "b" 
component2 = 'h' : <type 'str'>
=> component2 = 'b' : <type 'str'>
==================================================
os0 = newFakeOS()                                                       # STEP 44
ACTION: os0 = newFakeOS() 
os0 = None : <type 'NoneType'>
os_REF0 = None : <type 'NoneType'>
RAISED EXCEPTION: <type 'exceptions.TypeError'> unsupported operand type(s) for -: 'str' and 'str'
ERROR: (<type 'exceptions.TypeError'>, TypeError("unsupported operand type(s) for -: 'str' and 'str'",), <traceback object at 0x1005aa320>)
TRACEBACK:
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 48329, in safely
    act[2]()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 66, in act0
    self.p_os[0] = newFakeOS()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 17, in newFakeOS
    fs = pyfakefs.fake_filesystem.FakeFilesystem()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 881, in __init__
    self.AddMountPoint(self.root.name, total_size)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 933, in AddMountPoint
    path = self.NormalizePath(path)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1357, in NormalizePath
    return self.CollapsePath(path)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1283, in CollapsePath
    collapsed_path = (sep - collapsed_path)
STOPPING TESTING DUE TO FAILED TEST
0.0369420051575 TOTAL RUNTIME
1 EXECUTED
45 TOTAL TEST OPERATIONS
0.000842571258545 TIME SPENT EXECUTING TEST OPERATIONS
0.00336146354675 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
2.21729278564e-05 TIME SPENT CHECKING PROPERTIES
0.000864744186401 TOTAL TIME SPENT RUNNING SUT
0.00391507148743 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
