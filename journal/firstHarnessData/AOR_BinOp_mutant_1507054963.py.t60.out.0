Random testing using config=Config(swarmSwitch=None, maxMustHitBranch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, internal=False, exploit=None, seed=None, generalize=False, fastQuickAnalysis=False, stopWhenNoCoverage=None, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, maxMustHitStatement=None, noCoverageExploit=False, quickTests=False, relax=False, startExploitStall=0, enumerateEnabled=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, stopWhenHitStatement=None, biasLOC=None, progress=False, postCover=False, swarmLength=None, generateLOC=None, noSwarmDependencies=False, profile=False, LOCBaseline=0.2, noEnumerateEnabled=False, full=True, multiple=False, timedProgress=30, silentFail=False, ddmin=False, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.49764.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, markovP=1.0, logging=None, stopWhenHitBranch=None, LOCProbs=False, stopWhenStatements=None, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.0, depth=200, trackMaxCoverage=None, throughput=False, noCover=True, timeout=60, stutter=None, uncaught=False, markov=None, showActions=False, startExploit=0.0)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.TypeError'>, TypeError("unsupported operand type(s) for /: 'str' and 'str'",), <traceback object at 0x104196200>)
TRACEBACK:
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 48329, in safely
    act[2]()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 66, in act0
    self.p_os[0] = newFakeOS()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 21, in newFakeOS
    fs.CreateDirectory('/Volumes')
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 2055, in CreateDirectory
    if self.Exists(directory_path):
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1624, in Exists
    file_path = self.ResolvePath(file_path)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1718, in ResolvePath
    file_path = self.NormalizePath(self.NormalizeCase(file_path))
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1329, in NormalizeCase
    return components_to_path()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1305, in components_to_path
    normalized_path = (sep / normalized_path)
Original test has 38 steps

SAVING TEST AS failure.49764.test
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
component0 = "a"                                                         # STEP 0
ACTION: component0 = "a" 
component0 = None : <type 'NoneType'>
=> component0 = 'a' : <type 'str'>
==================================================
component1 = "alpha"                                                     # STEP 1
ACTION: component1 = "alpha" 
component1 = None : <type 'NoneType'>
=> component1 = 'alpha' : <type 'str'>
==================================================
component3 = "beta"                                                      # STEP 2
ACTION: component3 = "beta" 
component3 = None : <type 'NoneType'>
=> component3 = 'beta' : <type 'str'>
==================================================
component2 = "gamma"                                                     # STEP 3
ACTION: component2 = "gamma" 
component2 = None : <type 'NoneType'>
=> component2 = 'gamma' : <type 'str'>
==================================================
component4 = "epsilon"                                                   # STEP 4
ACTION: component4 = "epsilon" 
component4 = None : <type 'NoneType'>
=> component4 = 'epsilon' : <type 'str'>
==================================================
bytes4 = 0                                                               # STEP 5
ACTION: bytes4 = 0 
bytes4 = None : <type 'NoneType'>
=> bytes4 = 0 : <type 'int'>
==================================================
bytes3 = 0                                                               # STEP 6
ACTION: bytes3 = 0 
bytes3 = None : <type 'NoneType'>
=> bytes3 = 0 : <type 'int'>
==================================================
str0 = ""                                                                # STEP 7
ACTION: str0 = "" 
str0 = None : <type 'NoneType'>
=> str0 = '' : <type 'str'>
==================================================
path0 = "/Volumes/ramdisk/test"                                          # STEP 8
ACTION: path0 = "/Volumes/ramdisk/test" 
path0 = None : <type 'NoneType'>
=> path0 = '/Volumes/ramdisk/test' : <type 'str'>
==================================================
str0 += 'e'                                                              # STEP 9
ACTION: str0 += 'e' 
str0 = '' : <type 'str'>
=> str0 = 'e' : <type 'str'>
==================================================
str0 += 'b'                                                             # STEP 10
ACTION: str0 += 'b' 
str0 = 'e' : <type 'str'>
=> str0 = 'eb' : <type 'str'>
==================================================
str0 += 't'                                                             # STEP 11
ACTION: str0 += 't' 
str0 = 'eb' : <type 'str'>
=> str0 = 'ebt' : <type 'str'>
==================================================
str0 += 'r'                                                             # STEP 12
ACTION: str0 += 'r' 
str0 = 'ebt' : <type 'str'>
=> str0 = 'ebtr' : <type 'str'>
==================================================
str0 += 's'                                                             # STEP 13
ACTION: str0 += 's' 
str0 = 'ebtr' : <type 'str'>
=> str0 = 'ebtrs' : <type 'str'>
==================================================
path0 += "/" + component4                                               # STEP 14
ACTION: path0 += "/" + component4 
component4 = 'epsilon' : <type 'str'>
path0 = '/Volumes/ramdisk/test' : <type 'str'>
=> path0 = '/Volumes/ramdisk/test/epsilon' : <type 'str'>
==================================================
str0 += 'l'                                                             # STEP 15
ACTION: str0 += 'l' 
str0 = 'ebtrs' : <type 'str'>
=> str0 = 'ebtrsl' : <type 'str'>
==================================================
str0 += 'h'                                                             # STEP 16
ACTION: str0 += 'h' 
str0 = 'ebtrsl' : <type 'str'>
=> str0 = 'ebtrslh' : <type 'str'>
==================================================
component4 = "c"                                                        # STEP 17
ACTION: component4 = "c" 
component4 = 'epsilon' : <type 'str'>
=> component4 = 'c' : <type 'str'>
==================================================
str0 += 'c'                                                             # STEP 18
ACTION: str0 += 'c' 
str0 = 'ebtrslh' : <type 'str'>
=> str0 = 'ebtrslhc' : <type 'str'>
==================================================
str0 += 'n'                                                             # STEP 19
ACTION: str0 += 'n' 
str0 = 'ebtrslhc' : <type 'str'>
=> str0 = 'ebtrslhcn' : <type 'str'>
==================================================
path0 += "/" + component3                                               # STEP 20
ACTION: path0 += "/" + component3 
component3 = 'beta' : <type 'str'>
path0 = '/Volumes/ramdisk/test/epsilon' : <type 'str'>
=> path0 = '/Volumes/ramdisk/test/epsilon/beta' : <type 'str'>
==================================================
str0 += 'a'                                                             # STEP 21
ACTION: str0 += 'a' 
str0 = 'ebtrslhcn' : <type 'str'>
=> str0 = 'ebtrslhcna' : <type 'str'>
==================================================
str0 += 'x'                                                             # STEP 22
ACTION: str0 += 'x' 
str0 = 'ebtrslhcna' : <type 'str'>
=> str0 = 'ebtrslhcnax' : <type 'str'>
==================================================
str0 += 'y'                                                             # STEP 23
ACTION: str0 += 'y' 
str0 = 'ebtrslhcnax' : <type 'str'>
=> str0 = 'ebtrslhcnaxy' : <type 'str'>
==================================================
str0 += 'f'                                                             # STEP 24
ACTION: str0 += 'f' 
str0 = 'ebtrslhcnaxy' : <type 'str'>
=> str0 = 'ebtrslhcnaxyf' : <type 'str'>
==================================================
component3 = "delta"                                                    # STEP 25
ACTION: component3 = "delta" 
component3 = 'beta' : <type 'str'>
=> component3 = 'delta' : <type 'str'>
==================================================
path0 += "/" + component4                                               # STEP 26
ACTION: path0 += "/" + component4 
component4 = 'c' : <type 'str'>
path0 = '/Volumes/ramdisk/test/epsilon/beta' : <type 'str'>
=> path0 = '/Volumes/ramdisk/test/epsilon/beta/c' : <type 'str'>
==================================================
str1 = ""                                                               # STEP 27
ACTION: str1 = "" 
str1 = None : <type 'NoneType'>
=> str1 = '' : <type 'str'>
==================================================
component4 = "h"                                                        # STEP 28
ACTION: component4 = "h" 
component4 = 'c' : <type 'str'>
=> component4 = 'h' : <type 'str'>
==================================================
str0 += 'l'                                                             # STEP 29
ACTION: str0 += 'l' 
str0 = 'ebtrslhcnaxyf' : <type 'str'>
=> str0 = 'ebtrslhcnaxyfl' : <type 'str'>
==================================================
str1 += 'n'                                                             # STEP 30
ACTION: str1 += 'n' 
str1 = '' : <type 'str'>
=> str1 = 'n' : <type 'str'>
==================================================
str0 += 'g'                                                             # STEP 31
ACTION: str0 += 'g' 
str0 = 'ebtrslhcnaxyfl' : <type 'str'>
=> str0 = 'ebtrslhcnaxyflg' : <type 'str'>
==================================================
str0 += 'c'                                                             # STEP 32
ACTION: str0 += 'c' 
str0 = 'ebtrslhcnaxyflg' : <type 'str'>
=> str0 = 'ebtrslhcnaxyflgc' : <type 'str'>
==================================================
path2 = "/Volumes/ramdisk/test"                                         # STEP 33
ACTION: path2 = "/Volumes/ramdisk/test" 
path2 = None : <type 'NoneType'>
=> path2 = '/Volumes/ramdisk/test' : <type 'str'>
==================================================
path4 = "/Volumes/ramdisk/test"                                         # STEP 34
ACTION: path4 = "/Volumes/ramdisk/test" 
path4 = None : <type 'NoneType'>
=> path4 = '/Volumes/ramdisk/test' : <type 'str'>
==================================================
str0 += 'b'                                                             # STEP 35
ACTION: str0 += 'b' 
str0 = 'ebtrslhcnaxyflgc' : <type 'str'>
=> str0 = 'ebtrslhcnaxyflgcb' : <type 'str'>
==================================================
str1 += 'f'                                                             # STEP 36
ACTION: str1 += 'f' 
str1 = 'n' : <type 'str'>
=> str1 = 'nf' : <type 'str'>
==================================================
os0 = newFakeOS()                                                       # STEP 37
ACTION: os0 = newFakeOS() 
os0 = None : <type 'NoneType'>
os_REF0 = None : <type 'NoneType'>
RAISED EXCEPTION: <type 'exceptions.TypeError'> unsupported operand type(s) for /: 'str' and 'str'
ERROR: (<type 'exceptions.TypeError'>, TypeError("unsupported operand type(s) for /: 'str' and 'str'",), <traceback object at 0x1042ccd40>)
TRACEBACK:
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 48329, in safely
    act[2]()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 66, in act0
    self.p_os[0] = newFakeOS()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 21, in newFakeOS
    fs.CreateDirectory('/Volumes')
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 2055, in CreateDirectory
    if self.Exists(directory_path):
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1624, in Exists
    file_path = self.ResolvePath(file_path)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1718, in ResolvePath
    file_path = self.NormalizePath(self.NormalizeCase(file_path))
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1329, in NormalizeCase
    return components_to_path()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1305, in components_to_path
    normalized_path = (sep / normalized_path)
STOPPING TESTING DUE TO FAILED TEST
0.0318009853363 TOTAL RUNTIME
1 EXECUTED
38 TOTAL TEST OPERATIONS
0.00123596191406 TIME SPENT EXECUTING TEST OPERATIONS
0.00475978851318 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
1.59740447998e-05 TIME SPENT CHECKING PROPERTIES
0.00125193595886 TOTAL TIME SPENT RUNNING SUT
0.00390291213989 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
