Random testing using config=Config(swarmSwitch=None, maxMustHitBranch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, internal=False, exploit=None, seed=None, generalize=False, fastQuickAnalysis=False, stopWhenNoCoverage=None, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, maxMustHitStatement=None, noCoverageExploit=False, quickTests=False, relax=False, startExploitStall=0, enumerateEnabled=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, stopWhenHitStatement=None, biasLOC=None, progress=False, postCover=False, swarmLength=None, generateLOC=None, noSwarmDependencies=False, profile=False, LOCBaseline=0.2, noEnumerateEnabled=False, full=True, multiple=False, timedProgress=30, silentFail=False, ddmin=False, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.53126.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, markovP=1.0, logging=None, stopWhenHitBranch=None, LOCProbs=False, stopWhenStatements=None, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.0, depth=200, trackMaxCoverage=None, throughput=False, noCover=True, timeout=60, stutter=None, uncaught=False, markov=None, showActions=False, startExploit=0.0)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(' (True) == (False) ',), <traceback object at 0x102ebcb90>)
TRACEBACK:
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 48329, in safely
    act[2]()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 30349, in act566
    try: assert result == result_REF, " (%s) == (%s) " % (result, result_REF)
Original test has 21 steps

SAVING TEST AS failure.53126.test
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
os0 = newFakeOS()                                                        # STEP 0
ACTION: os0 = newFakeOS() 
os0 = None : <type 'NoneType'>
os_REF0 = None : <type 'NoneType'>
=> os0 = <pyfakefs.fake_filesystem.FakeOsModule object at 0x102ef3110> : <class 'pyfakefs.fake_filesystem.FakeOsModule'>
REFERENCE ACTION: os_REF0 = os 
=> os_REF0 = <module 'os' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'> : <type 'module'>
==================================================
component3 = "beta"                                                      # STEP 1
ACTION: component3 = "beta" 
component3 = None : <type 'NoneType'>
=> component3 = 'beta' : <type 'str'>
==================================================
path3 = "/Volumes/ramdisk/test"                                          # STEP 2
ACTION: path3 = "/Volumes/ramdisk/test" 
path3 = None : <type 'NoneType'>
=> path3 = '/Volumes/ramdisk/test' : <type 'str'>
==================================================
path0 = "/Volumes/ramdisk/test"                                          # STEP 3
ACTION: path0 = "/Volumes/ramdisk/test" 
path0 = None : <type 'NoneType'>
=> path0 = '/Volumes/ramdisk/test' : <type 'str'>
==================================================
component4 = "b"                                                         # STEP 4
ACTION: component4 = "b" 
component4 = None : <type 'NoneType'>
=> component4 = 'b' : <type 'str'>
==================================================
result = os0.path.lexists(path3)                                         # STEP 5
ACTION: result = os0.path.lexists(path3) 
os0 = <pyfakefs.fake_filesystem.FakeOsModule object at 0x102ef3110> : <class 'pyfakefs.fake_filesystem.FakeOsModule'>
path3 = '/Volumes/ramdisk/test' : <type 'str'>
os_REF0 = <module 'os' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'> : <type 'module'>
REFERENCE ACTION: result_REF = os_REF0.path.lexists(path3) 
==================================================
os0.makedirs(path3)                                                      # STEP 6
ACTION: os0.makedirs(path3) 
os0 = <pyfakefs.fake_filesystem.FakeOsModule object at 0x102ef3110> : <class 'pyfakefs.fake_filesystem.FakeOsModule'>
path3 = '/Volumes/ramdisk/test' : <type 'str'>
os_REF0 = <module 'os' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'> : <type 'module'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.OSError'> [Errno 17] Directory exists in fake filesystem: '/Volumes/ramdisk/test'
REFERENCE ACTION: os_REF0.makedirs(path3) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.OSError'> [Errno 17] File exists: '/Volumes/ramdisk/test'
==================================================
component1 = "d"                                                         # STEP 7
ACTION: component1 = "d" 
component1 = None : <type 'NoneType'>
=> component1 = 'd' : <type 'str'>
==================================================
path3 += "/" + component1                                                # STEP 8
ACTION: path3 += "/" + component1 
component1 = 'd' : <type 'str'>
path3 = '/Volumes/ramdisk/test' : <type 'str'>
=> path3 = '/Volumes/ramdisk/test/d' : <type 'str'>
==================================================
result = os0.path.lexists(path3)                                         # STEP 9
ACTION: result = os0.path.lexists(path3) 
os0 = <pyfakefs.fake_filesystem.FakeOsModule object at 0x102ef3110> : <class 'pyfakefs.fake_filesystem.FakeOsModule'>
path3 = '/Volumes/ramdisk/test/d' : <type 'str'>
os_REF0 = <module 'os' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'> : <type 'module'>
REFERENCE ACTION: result_REF = os_REF0.path.lexists(path3) 
==================================================
result = os0.path.abspath(path3)                                        # STEP 10
ACTION: result = os0.path.abspath(path3) 
os0 = <pyfakefs.fake_filesystem.FakeOsModule object at 0x102ef3110> : <class 'pyfakefs.fake_filesystem.FakeOsModule'>
path3 = '/Volumes/ramdisk/test/d' : <type 'str'>
os_REF0 = <module 'os' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'> : <type 'module'>
REFERENCE ACTION: result_REF = os_REF0.path.abspath(path3) 
==================================================
fd1 = os0.open(path3, os.O_RDONLY)                                      # STEP 11
ACTION: fd1 = os0.open(path3, os.O_RDONLY) 
os0 = <pyfakefs.fake_filesystem.FakeOsModule object at 0x102ef3110> : <class 'pyfakefs.fake_filesystem.FakeOsModule'>
path3 = '/Volumes/ramdisk/test/d' : <type 'str'>
fd1 = None : <type 'NoneType'>
os_REF0 = <module 'os' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'> : <type 'module'>
fd_REF1 = None : <type 'NoneType'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.OSError'> [Errno 2] No such file or directory: '/Volumes/ramdisk/test/d'
REFERENCE ACTION: fd_REF1 = os_REF0.open(path3, os.O_RDONLY) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.OSError'> [Errno 2] No such file or directory: '/Volumes/ramdisk/test/d'
==================================================
path3 += "/" + component3                                               # STEP 12
ACTION: path3 += "/" + component3 
component3 = 'beta' : <type 'str'>
path3 = '/Volumes/ramdisk/test/d' : <type 'str'>
=> path3 = '/Volumes/ramdisk/test/d/beta' : <type 'str'>
==================================================
component0 = "beta"                                                     # STEP 13
ACTION: component0 = "beta" 
component0 = None : <type 'NoneType'>
=> component0 = 'beta' : <type 'str'>
==================================================
component1 = "b"                                                        # STEP 14
ACTION: component1 = "b" 
component1 = 'd' : <type 'str'>
=> component1 = 'b' : <type 'str'>
==================================================
os0.remove(path0)                                                       # STEP 15
ACTION: os0.remove(path0) 
os0 = <pyfakefs.fake_filesystem.FakeOsModule object at 0x102ef3110> : <class 'pyfakefs.fake_filesystem.FakeOsModule'>
path0 = '/Volumes/ramdisk/test' : <type 'str'>
os_REF0 = <module 'os' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'> : <type 'module'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.OSError'> [Errno 21] Is a directory: '/Volumes/ramdisk/test'
REFERENCE ACTION: os_REF0.remove(path0) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.OSError'> [Errno 1] Operation not permitted: '/Volumes/ramdisk/test'
==================================================
component3 = "delta"                                                    # STEP 16
ACTION: component3 = "delta" 
component3 = 'beta' : <type 'str'>
=> component3 = 'delta' : <type 'str'>
==================================================
component2 = "a"                                                        # STEP 17
ACTION: component2 = "a" 
component2 = None : <type 'NoneType'>
=> component2 = 'a' : <type 'str'>
==================================================
path0 = "/Volumes/ramdisk/test"                                         # STEP 18
ACTION: path0 = "/Volumes/ramdisk/test" 
path0 = '/Volumes/ramdisk/test' : <type 'str'>
==================================================
path0 += "/" + component2                                               # STEP 19
ACTION: path0 += "/" + component2 
component2 = 'a' : <type 'str'>
path0 = '/Volumes/ramdisk/test' : <type 'str'>
=> path0 = '/Volumes/ramdisk/test/a' : <type 'str'>
==================================================
result = os0.path.isdir(path3)                                          # STEP 20
ACTION: result = os0.path.isdir(path3) 
os0 = <pyfakefs.fake_filesystem.FakeOsModule object at 0x102ef3110> : <class 'pyfakefs.fake_filesystem.FakeOsModule'>
path3 = '/Volumes/ramdisk/test/d/beta' : <type 'str'>
os_REF0 = <module 'os' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'> : <type 'module'>
REFERENCE ACTION: result_REF = os_REF0.path.isdir(path3) 
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(' (True) == (False) ',), <traceback object at 0x102ebc128>)
TRACEBACK:
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 48329, in safely
    act[2]()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 30349, in act566
    try: assert result == result_REF, " (%s) == (%s) " % (result, result_REF)
STOPPING TESTING DUE TO FAILED TEST
0.0519950389862 TOTAL RUNTIME
2 EXECUTED
221 TOTAL TEST OPERATIONS
0.0066180229187 TIME SPENT EXECUTING TEST OPERATIONS
0.0164730548859 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
0.000107526779175 TIME SPENT CHECKING PROPERTIES
0.00672554969788 TOTAL TIME SPENT RUNNING SUT
0.00619077682495 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
