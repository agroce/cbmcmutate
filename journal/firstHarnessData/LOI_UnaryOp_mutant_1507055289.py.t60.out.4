Random testing using config=Config(swarmSwitch=None, maxMustHitBranch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, internal=False, exploit=None, seed=None, generalize=False, fastQuickAnalysis=False, stopWhenNoCoverage=None, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, maxMustHitStatement=None, noCoverageExploit=False, quickTests=False, relax=False, startExploitStall=0, enumerateEnabled=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, stopWhenHitStatement=None, biasLOC=None, progress=False, postCover=False, swarmLength=None, generateLOC=None, noSwarmDependencies=False, profile=False, LOCBaseline=0.2, noEnumerateEnabled=False, full=True, multiple=False, timedProgress=30, silentFail=False, ddmin=False, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.63833.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, markovP=1.0, logging=None, stopWhenHitBranch=None, LOCProbs=False, stopWhenStatements=None, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.0, depth=200, trackMaxCoverage=None, throughput=False, noCover=True, timeout=60, stutter=None, uncaught=False, markov=None, showActions=False, startExploit=0.0)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10219e098>)
TRACEBACK:
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 48329, in safely
    act[2]()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 15565, in act353
    assert (type(raised) == type(refRaised))
Original test has 15 steps

SAVING TEST AS failure.63833.test
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
bytes1 = 0                                                               # STEP 0
ACTION: bytes1 = 0 
bytes1 = None : <type 'NoneType'>
=> bytes1 = 0 : <type 'int'>
==================================================
component4 = "omega"                                                     # STEP 1
ACTION: component4 = "omega" 
component4 = None : <type 'NoneType'>
=> component4 = 'omega' : <type 'str'>
==================================================
component3 = "alpha"                                                     # STEP 2
ACTION: component3 = "alpha" 
component3 = None : <type 'NoneType'>
=> component3 = 'alpha' : <type 'str'>
==================================================
bytes3 = 0                                                               # STEP 3
ACTION: bytes3 = 0 
bytes3 = None : <type 'NoneType'>
=> bytes3 = 0 : <type 'int'>
==================================================
component0 = "gamma"                                                     # STEP 4
ACTION: component0 = "gamma" 
component0 = None : <type 'NoneType'>
=> component0 = 'gamma' : <type 'str'>
==================================================
component2 = "e"                                                         # STEP 5
ACTION: component2 = "e" 
component2 = None : <type 'NoneType'>
=> component2 = 'e' : <type 'str'>
==================================================
component1 = "c"                                                         # STEP 6
ACTION: component1 = "c" 
component1 = None : <type 'NoneType'>
=> component1 = 'c' : <type 'str'>
==================================================
str0 = ""                                                                # STEP 7
ACTION: str0 = "" 
str0 = None : <type 'NoneType'>
=> str0 = '' : <type 'str'>
==================================================
str0 += 'e'                                                              # STEP 8
ACTION: str0 += 'e' 
str0 = '' : <type 'str'>
=> str0 = 'e' : <type 'str'>
==================================================
os0 = newFakeOS()                                                        # STEP 9
ACTION: os0 = newFakeOS() 
os0 = None : <type 'NoneType'>
os_REF0 = None : <type 'NoneType'>
=> os0 = <pyfakefs.fake_filesystem.FakeOsModule object at 0x102596490> : <class 'pyfakefs.fake_filesystem.FakeOsModule'>
REFERENCE ACTION: os_REF0 = os 
=> os_REF0 = <module 'os' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'> : <type 'module'>
==================================================
path2 = "/Volumes/ramdisk/test"                                         # STEP 10
ACTION: path2 = "/Volumes/ramdisk/test" 
path2 = None : <type 'NoneType'>
=> path2 = '/Volumes/ramdisk/test' : <type 'str'>
==================================================
str0 += 'v'                                                             # STEP 11
ACTION: str0 += 'v' 
str0 = 'e' : <type 'str'>
=> str0 = 'ev' : <type 'str'>
==================================================
result = os0.path.lexists(path2)                                        # STEP 12
ACTION: result = os0.path.lexists(path2) 
os0 = <pyfakefs.fake_filesystem.FakeOsModule object at 0x102596490> : <class 'pyfakefs.fake_filesystem.FakeOsModule'>
path2 = '/Volumes/ramdisk/test' : <type 'str'>
os_REF0 = <module 'os' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'> : <type 'module'>
REFERENCE ACTION: result_REF = os_REF0.path.lexists(path2) 
==================================================
path2 += "/" + component4                                               # STEP 13
ACTION: path2 += "/" + component4 
component4 = 'omega' : <type 'str'>
path2 = '/Volumes/ramdisk/test' : <type 'str'>
=> path2 = '/Volumes/ramdisk/test/omega' : <type 'str'>
==================================================
fd0 = os0.open(path2, os.O_CREAT | os.O_WRONLY | os.O_EXCL)             # STEP 14
ACTION: fd0 = os0.open(path2, os.O_CREAT | os.O_WRONLY | os.O_EXCL) 
os0 = <pyfakefs.fake_filesystem.FakeOsModule object at 0x102596490> : <class 'pyfakefs.fake_filesystem.FakeOsModule'>
path2 = '/Volumes/ramdisk/test/omega' : <type 'str'>
fd0 = None : <type 'NoneType'>
os_REF0 = <module 'os' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'> : <type 'module'>
fd_REF0 = None : <type 'NoneType'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IOError'> [Errno 20] Not a directory in fake filesystem: '/Volumes/ramdisk/test'
REFERENCE ACTION: fd_REF0 = os_REF0.open(path2, os.O_CREAT | os.O_WRONLY | os.O_EXCL) 
=> fd_REF0 = 4 : <type 'int'>
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1006c3248>)
TRACEBACK:
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 48329, in safely
    act[2]()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 15565, in act353
    assert (type(raised) == type(refRaised))
STOPPING TESTING DUE TO FAILED TEST
0.0466780662537 TOTAL RUNTIME
2 EXECUTED
215 TOTAL TEST OPERATIONS
0.00826406478882 TIME SPENT EXECUTING TEST OPERATIONS
0.0120143890381 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
0.000127553939819 TIME SPENT CHECKING PROPERTIES
0.00839161872864 TOTAL TIME SPENT RUNNING SUT
0.00702714920044 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
