Random testing using config=Config(swarmSwitch=None, maxMustHitBranch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, internal=False, exploit=None, seed=None, generalize=False, fastQuickAnalysis=False, stopWhenNoCoverage=None, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, maxMustHitStatement=None, noCoverageExploit=False, quickTests=False, relax=False, startExploitStall=0, enumerateEnabled=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, stopWhenHitStatement=None, biasLOC=None, progress=False, postCover=False, swarmLength=None, generateLOC=None, noSwarmDependencies=False, profile=False, LOCBaseline=0.2, noEnumerateEnabled=False, full=True, multiple=False, timedProgress=30, silentFail=False, ddmin=False, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.48008.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, markovP=1.0, logging=None, stopWhenHitBranch=None, LOCProbs=False, stopWhenStatements=None, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.0, depth=200, trackMaxCoverage=None, throughput=False, noCover=True, timeout=60, stutter=None, uncaught=False, markov=None, showActions=False, startExploit=0.0)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(" (['ramdisk']) == ([]) ",), <traceback object at 0x1005aa248>)
TRACEBACK:
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 48329, in safely
    act[2]()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 23174, in act460
    try: assert result == result_REF, " (%s) == (%s) " % (result, result_REF)
Original test has 41 steps

SAVING TEST AS failure.48008.test
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
component0 = "phi"                                                       # STEP 0
ACTION: component0 = "phi" 
component0 = None : <type 'NoneType'>
=> component0 = 'phi' : <type 'str'>
==================================================
component2 = "c"                                                         # STEP 1
ACTION: component2 = "c" 
component2 = None : <type 'NoneType'>
=> component2 = 'c' : <type 'str'>
==================================================
component4 = "d"                                                         # STEP 2
ACTION: component4 = "d" 
component4 = None : <type 'NoneType'>
=> component4 = 'd' : <type 'str'>
==================================================
component1 = "epsilon"                                                   # STEP 3
ACTION: component1 = "epsilon" 
component1 = None : <type 'NoneType'>
=> component1 = 'epsilon' : <type 'str'>
==================================================
str1 = ""                                                                # STEP 4
ACTION: str1 = "" 
str1 = None : <type 'NoneType'>
=> str1 = '' : <type 'str'>
==================================================
str1 += 'w'                                                              # STEP 5
ACTION: str1 += 'w' 
str1 = '' : <type 'str'>
=> str1 = 'w' : <type 'str'>
==================================================
component3 = "h"                                                         # STEP 6
ACTION: component3 = "h" 
component3 = None : <type 'NoneType'>
=> component3 = 'h' : <type 'str'>
==================================================
str1 += 'l'                                                              # STEP 7
ACTION: str1 += 'l' 
str1 = 'w' : <type 'str'>
=> str1 = 'wl' : <type 'str'>
==================================================
str1 += 'f'                                                              # STEP 8
ACTION: str1 += 'f' 
str1 = 'wl' : <type 'str'>
=> str1 = 'wlf' : <type 'str'>
==================================================
str1 += 'm'                                                              # STEP 9
ACTION: str1 += 'm' 
str1 = 'wlf' : <type 'str'>
=> str1 = 'wlfm' : <type 'str'>
==================================================
str1 += 'm'                                                             # STEP 10
ACTION: str1 += 'm' 
str1 = 'wlfm' : <type 'str'>
=> str1 = 'wlfmm' : <type 'str'>
==================================================
bytes0 = 0                                                              # STEP 11
ACTION: bytes0 = 0 
bytes0 = None : <type 'NoneType'>
=> bytes0 = 0 : <type 'int'>
==================================================
bytes1 = 0                                                              # STEP 12
ACTION: bytes1 = 0 
bytes1 = None : <type 'NoneType'>
=> bytes1 = 0 : <type 'int'>
==================================================
str1 += 'z'                                                             # STEP 13
ACTION: str1 += 'z' 
str1 = 'wlfmm' : <type 'str'>
=> str1 = 'wlfmmz' : <type 'str'>
==================================================
str1 += 'l'                                                             # STEP 14
ACTION: str1 += 'l' 
str1 = 'wlfmmz' : <type 'str'>
=> str1 = 'wlfmmzl' : <type 'str'>
==================================================
str1 += 'k'                                                             # STEP 15
ACTION: str1 += 'k' 
str1 = 'wlfmmzl' : <type 'str'>
=> str1 = 'wlfmmzlk' : <type 'str'>
==================================================
str1 += 'j'                                                             # STEP 16
ACTION: str1 += 'j' 
str1 = 'wlfmmzlk' : <type 'str'>
=> str1 = 'wlfmmzlkj' : <type 'str'>
==================================================
bytes2 = 0                                                              # STEP 17
ACTION: bytes2 = 0 
bytes2 = None : <type 'NoneType'>
=> bytes2 = 0 : <type 'int'>
==================================================
os0 = newFakeOS()                                                       # STEP 18
ACTION: os0 = newFakeOS() 
os0 = None : <type 'NoneType'>
os_REF0 = None : <type 'NoneType'>
=> os0 = <pyfakefs.fake_filesystem.FakeOsModule object at 0x1029f6190> : <class 'pyfakefs.fake_filesystem.FakeOsModule'>
REFERENCE ACTION: os_REF0 = os 
=> os_REF0 = <module 'os' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'> : <type 'module'>
==================================================
str1 += 'h'                                                             # STEP 19
ACTION: str1 += 'h' 
str1 = 'wlfmmzlkj' : <type 'str'>
=> str1 = 'wlfmmzlkjh' : <type 'str'>
==================================================
str1 += 'n'                                                             # STEP 20
ACTION: str1 += 'n' 
str1 = 'wlfmmzlkjh' : <type 'str'>
=> str1 = 'wlfmmzlkjhn' : <type 'str'>
==================================================
bytes1 += 1                                                             # STEP 21
ACTION: bytes1 += 1 
bytes1 = 0 : <type 'int'>
=> bytes1 = 1 : <type 'int'>
==================================================
str0 = ""                                                               # STEP 22
ACTION: str0 = "" 
str0 = None : <type 'NoneType'>
=> str0 = '' : <type 'str'>
==================================================
str0 += 'b'                                                             # STEP 23
ACTION: str0 += 'b' 
str0 = '' : <type 'str'>
=> str0 = 'b' : <type 'str'>
==================================================
str0 += 'j'                                                             # STEP 24
ACTION: str0 += 'j' 
str0 = 'b' : <type 'str'>
=> str0 = 'bj' : <type 'str'>
==================================================
str1 += 'v'                                                             # STEP 25
ACTION: str1 += 'v' 
str1 = 'wlfmmzlkjhn' : <type 'str'>
=> str1 = 'wlfmmzlkjhnv' : <type 'str'>
==================================================
str0 += 't'                                                             # STEP 26
ACTION: str0 += 't' 
str0 = 'bj' : <type 'str'>
=> str0 = 'bjt' : <type 'str'>
==================================================
bytes4 = 0                                                              # STEP 27
ACTION: bytes4 = 0 
bytes4 = None : <type 'NoneType'>
=> bytes4 = 0 : <type 'int'>
==================================================
str1 += 'u'                                                             # STEP 28
ACTION: str1 += 'u' 
str1 = 'wlfmmzlkjhnv' : <type 'str'>
=> str1 = 'wlfmmzlkjhnvu' : <type 'str'>
==================================================
str0 += 'u'                                                             # STEP 29
ACTION: str0 += 'u' 
str0 = 'bjt' : <type 'str'>
=> str0 = 'bjtu' : <type 'str'>
==================================================
str1 += 'b'                                                             # STEP 30
ACTION: str1 += 'b' 
str1 = 'wlfmmzlkjhnvu' : <type 'str'>
=> str1 = 'wlfmmzlkjhnvub' : <type 'str'>
==================================================
str0 += 'l'                                                             # STEP 31
ACTION: str0 += 'l' 
str0 = 'bjtu' : <type 'str'>
=> str0 = 'bjtul' : <type 'str'>
==================================================
str1 = ""                                                               # STEP 32
ACTION: str1 = "" 
str1 = 'wlfmmzlkjhnvub' : <type 'str'>
=> str1 = '' : <type 'str'>
==================================================
str0 += " "                                                             # STEP 33
ACTION: str0 += " " 
str0 = 'bjtul' : <type 'str'>
=> str0 = 'bjtul ' : <type 'str'>
==================================================
str0 += 'i'                                                             # STEP 34
ACTION: str0 += 'i' 
str0 = 'bjtul ' : <type 'str'>
=> str0 = 'bjtul i' : <type 'str'>
==================================================
str0 += 'c'                                                             # STEP 35
ACTION: str0 += 'c' 
str0 = 'bjtul i' : <type 'str'>
=> str0 = 'bjtul ic' : <type 'str'>
==================================================
str1 += 'u'                                                             # STEP 36
ACTION: str1 += 'u' 
str1 = '' : <type 'str'>
=> str1 = 'u' : <type 'str'>
==================================================
path2 = "/Volumes/ramdisk/test"                                         # STEP 37
ACTION: path2 = "/Volumes/ramdisk/test" 
path2 = None : <type 'NoneType'>
=> path2 = '/Volumes/ramdisk/test' : <type 'str'>
==================================================
str0 += 'i'                                                             # STEP 38
ACTION: str0 += 'i' 
str0 = 'bjtul ic' : <type 'str'>
=> str0 = 'bjtul ici' : <type 'str'>
==================================================
bytes2 += 1                                                             # STEP 39
ACTION: bytes2 += 1 
bytes2 = 0 : <type 'int'>
=> bytes2 = 1 : <type 'int'>
==================================================
result = sorted(os0.listdir(path2))                                     # STEP 40
ACTION: result = sorted(os0.listdir(path2)) 
os0 = <pyfakefs.fake_filesystem.FakeOsModule object at 0x1029f6190> : <class 'pyfakefs.fake_filesystem.FakeOsModule'>
path2 = '/Volumes/ramdisk/test' : <type 'str'>
os_REF0 = <module 'os' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'> : <type 'module'>
REFERENCE ACTION: result_REF = sorted(os_REF0.listdir(path2)) 
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(" (['ramdisk']) == ([]) ",), <traceback object at 0x1029e8b00>)
TRACEBACK:
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 48329, in safely
    act[2]()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 23174, in act460
    try: assert result == result_REF, " (%s) == (%s) " % (result, result_REF)
STOPPING TESTING DUE TO FAILED TEST
0.0252029895782 TOTAL RUNTIME
1 EXECUTED
41 TOTAL TEST OPERATIONS
0.00158309936523 TIME SPENT EXECUTING TEST OPERATIONS
0.00343656539917 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
1.95503234863e-05 TIME SPENT CHECKING PROPERTIES
0.00160264968872 TOTAL TIME SPENT RUNNING SUT
0.00313091278076 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
