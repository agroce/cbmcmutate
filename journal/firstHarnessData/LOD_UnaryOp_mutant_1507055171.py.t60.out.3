Random testing using config=Config(swarmSwitch=None, maxMustHitBranch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, internal=False, exploit=None, seed=None, generalize=False, fastQuickAnalysis=False, stopWhenNoCoverage=None, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, maxMustHitStatement=None, noCoverageExploit=False, quickTests=False, relax=False, startExploitStall=0, enumerateEnabled=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, stopWhenHitStatement=None, biasLOC=None, progress=False, postCover=False, swarmLength=None, generateLOC=None, noSwarmDependencies=False, profile=False, LOCBaseline=0.2, noEnumerateEnabled=False, full=True, multiple=False, timedProgress=30, silentFail=False, ddmin=False, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.56326.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, markovP=1.0, logging=None, stopWhenHitBranch=None, LOCProbs=False, stopWhenStatements=None, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.0, depth=200, trackMaxCoverage=None, throughput=False, noCover=True, timeout=60, stutter=None, uncaught=False, markov=None, showActions=False, startExploit=0.0)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1021108c0>)
TRACEBACK:
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 48329, in safely
    act[2]()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 15343, in act350
    assert (type(raised) == type(refRaised))
Original test has 30 steps

SAVING TEST AS failure.56326.test
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
component4 = "d"                                                         # STEP 0
ACTION: component4 = "d" 
component4 = None : <type 'NoneType'>
=> component4 = 'd' : <type 'str'>
==================================================
component3 = "g"                                                         # STEP 1
ACTION: component3 = "g" 
component3 = None : <type 'NoneType'>
=> component3 = 'g' : <type 'str'>
==================================================
component2 = "alpha"                                                     # STEP 2
ACTION: component2 = "alpha" 
component2 = None : <type 'NoneType'>
=> component2 = 'alpha' : <type 'str'>
==================================================
path4 = "/Volumes/ramdisk/test"                                          # STEP 3
ACTION: path4 = "/Volumes/ramdisk/test" 
path4 = None : <type 'NoneType'>
=> path4 = '/Volumes/ramdisk/test' : <type 'str'>
==================================================
component1 = "beta"                                                      # STEP 4
ACTION: component1 = "beta" 
component1 = None : <type 'NoneType'>
=> component1 = 'beta' : <type 'str'>
==================================================
component0 = "lambda"                                                    # STEP 5
ACTION: component0 = "lambda" 
component0 = None : <type 'NoneType'>
=> component0 = 'lambda' : <type 'str'>
==================================================
path4 += "/" + component4                                                # STEP 6
ACTION: path4 += "/" + component4 
component4 = 'd' : <type 'str'>
path4 = '/Volumes/ramdisk/test' : <type 'str'>
=> path4 = '/Volumes/ramdisk/test/d' : <type 'str'>
==================================================
path4 += "/" + component1                                                # STEP 7
ACTION: path4 += "/" + component1 
component1 = 'beta' : <type 'str'>
path4 = '/Volumes/ramdisk/test/d' : <type 'str'>
=> path4 = '/Volumes/ramdisk/test/d/beta' : <type 'str'>
==================================================
component1 = "phi"                                                       # STEP 8
ACTION: component1 = "phi" 
component1 = 'beta' : <type 'str'>
=> component1 = 'phi' : <type 'str'>
==================================================
path4 += "/" + component4                                                # STEP 9
ACTION: path4 += "/" + component4 
component4 = 'd' : <type 'str'>
path4 = '/Volumes/ramdisk/test/d/beta' : <type 'str'>
=> path4 = '/Volumes/ramdisk/test/d/beta/d' : <type 'str'>
==================================================
str3 = ""                                                               # STEP 10
ACTION: str3 = "" 
str3 = None : <type 'NoneType'>
=> str3 = '' : <type 'str'>
==================================================
path4 = "/Volumes/ramdisk/test"                                         # STEP 11
ACTION: path4 = "/Volumes/ramdisk/test" 
path4 = '/Volumes/ramdisk/test/d/beta/d' : <type 'str'>
=> path4 = '/Volumes/ramdisk/test' : <type 'str'>
==================================================
path4 += "/" + component2                                               # STEP 12
ACTION: path4 += "/" + component2 
component2 = 'alpha' : <type 'str'>
path4 = '/Volumes/ramdisk/test' : <type 'str'>
=> path4 = '/Volumes/ramdisk/test/alpha' : <type 'str'>
==================================================
component2 = "omega"                                                    # STEP 13
ACTION: component2 = "omega" 
component2 = 'alpha' : <type 'str'>
=> component2 = 'omega' : <type 'str'>
==================================================
str3 += 'b'                                                             # STEP 14
ACTION: str3 += 'b' 
str3 = '' : <type 'str'>
=> str3 = 'b' : <type 'str'>
==================================================
str3 += 'o'                                                             # STEP 15
ACTION: str3 += 'o' 
str3 = 'b' : <type 'str'>
=> str3 = 'bo' : <type 'str'>
==================================================
bytes4 = 0                                                              # STEP 16
ACTION: bytes4 = 0 
bytes4 = None : <type 'NoneType'>
=> bytes4 = 0 : <type 'int'>
==================================================
str3 += 's'                                                             # STEP 17
ACTION: str3 += 's' 
str3 = 'bo' : <type 'str'>
=> str3 = 'bos' : <type 'str'>
==================================================
component4 = "gamma"                                                    # STEP 18
ACTION: component4 = "gamma" 
component4 = 'd' : <type 'str'>
=> component4 = 'gamma' : <type 'str'>
==================================================
str3 += 'b'                                                             # STEP 19
ACTION: str3 += 'b' 
str3 = 'bos' : <type 'str'>
=> str3 = 'bosb' : <type 'str'>
==================================================
str3 += 'w'                                                             # STEP 20
ACTION: str3 += 'w' 
str3 = 'bosb' : <type 'str'>
=> str3 = 'bosbw' : <type 'str'>
==================================================
str3 += 'l'                                                             # STEP 21
ACTION: str3 += 'l' 
str3 = 'bosbw' : <type 'str'>
=> str3 = 'bosbwl' : <type 'str'>
==================================================
str3 += 'u'                                                             # STEP 22
ACTION: str3 += 'u' 
str3 = 'bosbwl' : <type 'str'>
=> str3 = 'bosbwlu' : <type 'str'>
==================================================
str1 = ""                                                               # STEP 23
ACTION: str1 = "" 
str1 = None : <type 'NoneType'>
=> str1 = '' : <type 'str'>
==================================================
str1 += 'g'                                                             # STEP 24
ACTION: str1 += 'g' 
str1 = '' : <type 'str'>
=> str1 = 'g' : <type 'str'>
==================================================
os0 = newFakeOS()                                                       # STEP 25
ACTION: os0 = newFakeOS() 
os0 = None : <type 'NoneType'>
os_REF0 = None : <type 'NoneType'>
=> os0 = <pyfakefs.fake_filesystem.FakeOsModule object at 0x1022d5890> : <class 'pyfakefs.fake_filesystem.FakeOsModule'>
REFERENCE ACTION: os_REF0 = os 
=> os_REF0 = <module 'os' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'> : <type 'module'>
==================================================
str1 += 'd'                                                             # STEP 26
ACTION: str1 += 'd' 
str1 = 'g' : <type 'str'>
=> str1 = 'gd' : <type 'str'>
==================================================
fd1 = os0.open(path4, os.O_RDWR)                                        # STEP 27
ACTION: fd1 = os0.open(path4, os.O_RDWR) 
os0 = <pyfakefs.fake_filesystem.FakeOsModule object at 0x1022d5890> : <class 'pyfakefs.fake_filesystem.FakeOsModule'>
path4 = '/Volumes/ramdisk/test/alpha' : <type 'str'>
fd1 = None : <type 'NoneType'>
os_REF0 = <module 'os' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'> : <type 'module'>
fd_REF1 = None : <type 'NoneType'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.OSError'> [Errno 2] No such file or directory: '/Volumes/ramdisk/test/alpha'
REFERENCE ACTION: fd_REF1 = os_REF0.open(path4, os.O_RDWR) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.OSError'> [Errno 2] No such file or directory: '/Volumes/ramdisk/test/alpha'
==================================================
str3 += 'w'                                                             # STEP 28
ACTION: str3 += 'w' 
str3 = 'bosbwlu' : <type 'str'>
=> str3 = 'bosbwluw' : <type 'str'>
==================================================
fd1 = os0.open(path4, os.O_CREAT | os.O_WRONLY)                         # STEP 29
ACTION: fd1 = os0.open(path4, os.O_CREAT | os.O_WRONLY) 
os0 = <pyfakefs.fake_filesystem.FakeOsModule object at 0x1022d5890> : <class 'pyfakefs.fake_filesystem.FakeOsModule'>
path4 = '/Volumes/ramdisk/test/alpha' : <type 'str'>
fd1 = None : <type 'NoneType'>
os_REF0 = <module 'os' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'> : <type 'module'>
fd_REF1 = None : <type 'NoneType'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.OSError'> [Errno 2] No such file or directory in fake filesystem: '/Volumes/ramdisk/test/alpha'
REFERENCE ACTION: fd_REF1 = os_REF0.open(path4, os.O_CREAT | os.O_WRONLY) 
=> fd_REF1 = 4 : <type 'int'>
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1038e8ea8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 48329, in safely
    act[2]()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 15343, in act350
    assert (type(raised) == type(refRaised))
STOPPING TESTING DUE TO FAILED TEST
0.0282700061798 TOTAL RUNTIME
1 EXECUTED
30 TOTAL TEST OPERATIONS
0.00219869613647 TIME SPENT EXECUTING TEST OPERATIONS
0.00226855278015 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
1.45435333252e-05 TIME SPENT CHECKING PROPERTIES
0.0022132396698 TOTAL TIME SPENT RUNNING SUT
0.00367403030396 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
