Random testing using config=Config(swarmSwitch=None, maxMustHitBranch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, internal=False, exploit=None, seed=None, generalize=False, fastQuickAnalysis=False, stopWhenNoCoverage=None, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, maxMustHitStatement=None, noCoverageExploit=False, quickTests=False, relax=False, startExploitStall=0, enumerateEnabled=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, stopWhenHitStatement=None, biasLOC=None, progress=False, postCover=False, swarmLength=None, generateLOC=None, noSwarmDependencies=False, profile=False, LOCBaseline=0.2, noEnumerateEnabled=False, full=True, multiple=False, timedProgress=30, silentFail=False, ddmin=False, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.66408.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, markovP=1.0, logging=None, stopWhenHitBranch=None, LOCProbs=False, stopWhenStatements=None, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.0, depth=200, trackMaxCoverage=None, throughput=False, noCover=True, timeout=60, stutter=None, uncaught=False, markov=None, showActions=False, startExploit=0.0)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x102239758>)
TRACEBACK:
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 48329, in safely
    act[2]()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 20901, in act426
    assert (type(raised) == type(refRaised))
Original test has 40 steps

SAVING TEST AS failure.66408.test
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
bytes4 = 0                                                               # STEP 0
ACTION: bytes4 = 0 
bytes4 = None : <type 'NoneType'>
=> bytes4 = 0 : <type 'int'>
==================================================
os0 = newFakeOS()                                                        # STEP 1
ACTION: os0 = newFakeOS() 
os0 = None : <type 'NoneType'>
os_REF0 = None : <type 'NoneType'>
=> os0 = <pyfakefs.fake_filesystem.FakeOsModule object at 0x1005a7910> : <class 'pyfakefs.fake_filesystem.FakeOsModule'>
REFERENCE ACTION: os_REF0 = os 
=> os_REF0 = <module 'os' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'> : <type 'module'>
==================================================
component0 = "g"                                                         # STEP 2
ACTION: component0 = "g" 
component0 = None : <type 'NoneType'>
=> component0 = 'g' : <type 'str'>
==================================================
component1 = "b"                                                         # STEP 3
ACTION: component1 = "b" 
component1 = None : <type 'NoneType'>
=> component1 = 'b' : <type 'str'>
==================================================
bytes3 = 0                                                               # STEP 4
ACTION: bytes3 = 0 
bytes3 = None : <type 'NoneType'>
=> bytes3 = 0 : <type 'int'>
==================================================
component2 = "b"                                                         # STEP 5
ACTION: component2 = "b" 
component2 = None : <type 'NoneType'>
=> component2 = 'b' : <type 'str'>
==================================================
path3 = "/Volumes/ramdisk/test"                                          # STEP 6
ACTION: path3 = "/Volumes/ramdisk/test" 
path3 = None : <type 'NoneType'>
=> path3 = '/Volumes/ramdisk/test' : <type 'str'>
==================================================
result = os0.path.isabs(path3)                                           # STEP 7
ACTION: result = os0.path.isabs(path3) 
os0 = <pyfakefs.fake_filesystem.FakeOsModule object at 0x1005a7910> : <class 'pyfakefs.fake_filesystem.FakeOsModule'>
path3 = '/Volumes/ramdisk/test' : <type 'str'>
os_REF0 = <module 'os' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'> : <type 'module'>
REFERENCE ACTION: result_REF = os_REF0.path.isabs(path3) 
==================================================
component4 = "g"                                                         # STEP 8
ACTION: component4 = "g" 
component4 = None : <type 'NoneType'>
=> component4 = 'g' : <type 'str'>
==================================================
path3 += "/" + component2                                                # STEP 9
ACTION: path3 += "/" + component2 
component2 = 'b' : <type 'str'>
path3 = '/Volumes/ramdisk/test' : <type 'str'>
=> path3 = '/Volumes/ramdisk/test/b' : <type 'str'>
==================================================
os0.symlink(path3,path3)                                                # STEP 10
ACTION: os0.symlink(path3,path3) 
os0 = <pyfakefs.fake_filesystem.FakeOsModule object at 0x1005a7910> : <class 'pyfakefs.fake_filesystem.FakeOsModule'>
path3 = '/Volumes/ramdisk/test/b' : <type 'str'>
os_REF0 = <module 'os' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'> : <type 'module'>
REFERENCE ACTION: os_REF0.symlink(path3,path3) 
==================================================
component3 = "g"                                                        # STEP 11
ACTION: component3 = "g" 
component3 = None : <type 'NoneType'>
=> component3 = 'g' : <type 'str'>
==================================================
str3 = ""                                                               # STEP 12
ACTION: str3 = "" 
str3 = None : <type 'NoneType'>
=> str3 = '' : <type 'str'>
==================================================
str3 += 's'                                                             # STEP 13
ACTION: str3 += 's' 
str3 = '' : <type 'str'>
=> str3 = 's' : <type 'str'>
==================================================
path1 = "/Volumes/ramdisk/test"                                         # STEP 14
ACTION: path1 = "/Volumes/ramdisk/test" 
path1 = None : <type 'NoneType'>
=> path1 = '/Volumes/ramdisk/test' : <type 'str'>
==================================================
path3 += "/" + component0                                               # STEP 15
ACTION: path3 += "/" + component0 
component0 = 'g' : <type 'str'>
path3 = '/Volumes/ramdisk/test/b' : <type 'str'>
=> path3 = '/Volumes/ramdisk/test/b/g' : <type 'str'>
==================================================
os0.rmdir(path3)                                                        # STEP 16
ACTION: os0.rmdir(path3) 
os0 = <pyfakefs.fake_filesystem.FakeOsModule object at 0x1005a7910> : <class 'pyfakefs.fake_filesystem.FakeOsModule'>
path3 = '/Volumes/ramdisk/test/b/g' : <type 'str'>
os_REF0 = <module 'os' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'> : <type 'module'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.OSError'> [Errno 62] Too many levels of symbolic links: '/Volumes/ramdisk/test/b'
REFERENCE ACTION: os_REF0.rmdir(path3) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.OSError'> [Errno 62] Too many levels of symbolic links: '/Volumes/ramdisk/test/b/g'
==================================================
str3 += 'q'                                                             # STEP 17
ACTION: str3 += 'q' 
str3 = 's' : <type 'str'>
=> str3 = 'sq' : <type 'str'>
==================================================
component0 = "d"                                                        # STEP 18
ACTION: component0 = "d" 
component0 = 'g' : <type 'str'>
=> component0 = 'd' : <type 'str'>
==================================================
str3 += 'r'                                                             # STEP 19
ACTION: str3 += 'r' 
str3 = 'sq' : <type 'str'>
=> str3 = 'sqr' : <type 'str'>
==================================================
os0.link(path1,path3)                                                   # STEP 20
ACTION: os0.link(path1,path3) 
os0 = <pyfakefs.fake_filesystem.FakeOsModule object at 0x1005a7910> : <class 'pyfakefs.fake_filesystem.FakeOsModule'>
path1 = '/Volumes/ramdisk/test' : <type 'str'>
path3 = '/Volumes/ramdisk/test/b/g' : <type 'str'>
os_REF0 = <module 'os' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'> : <type 'module'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.OSError'> [Errno 2] No such fake directory: '/Volumes/ramdisk/test/b'
REFERENCE ACTION: os_REF0.link(path1,path3) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.OSError'> [Errno 62] Too many levels of symbolic links
==================================================
fd1 = os0.open(path3, os.O_CREAT | os.O_WRONLY | os.O_TRUNC | os.O_EXCL)  # STEP 21
ACTION: fd1 = os0.open(path3, os.O_CREAT | os.O_WRONLY | os.O_TRUNC | os.O_EXCL) 
os0 = <pyfakefs.fake_filesystem.FakeOsModule object at 0x1005a7910> : <class 'pyfakefs.fake_filesystem.FakeOsModule'>
path3 = '/Volumes/ramdisk/test/b/g' : <type 'str'>
fd1 = None : <type 'NoneType'>
os_REF0 = <module 'os' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'> : <type 'module'>
fd_REF1 = None : <type 'NoneType'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.OSError'> [Errno 62] Too many levels of symbolic links: '/Volumes/ramdisk/test/b'
REFERENCE ACTION: fd_REF1 = os_REF0.open(path3, os.O_CREAT | os.O_WRONLY | os.O_TRUNC | os.O_EXCL) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.OSError'> [Errno 62] Too many levels of symbolic links: '/Volumes/ramdisk/test/b/g'
==================================================
path1 += "/" + component3                                               # STEP 22
ACTION: path1 += "/" + component3 
component3 = 'g' : <type 'str'>
path1 = '/Volumes/ramdisk/test' : <type 'str'>
=> path1 = '/Volumes/ramdisk/test/g' : <type 'str'>
==================================================
os0.rmdir(path3)                                                        # STEP 23
ACTION: os0.rmdir(path3) 
os0 = <pyfakefs.fake_filesystem.FakeOsModule object at 0x1005a7910> : <class 'pyfakefs.fake_filesystem.FakeOsModule'>
path3 = '/Volumes/ramdisk/test/b/g' : <type 'str'>
os_REF0 = <module 'os' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'> : <type 'module'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.OSError'> [Errno 62] Too many levels of symbolic links: '/Volumes/ramdisk/test/b'
REFERENCE ACTION: os_REF0.rmdir(path3) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.OSError'> [Errno 62] Too many levels of symbolic links: '/Volumes/ramdisk/test/b/g'
==================================================
str3 += 'h'                                                             # STEP 24
ACTION: str3 += 'h' 
str3 = 'sqr' : <type 'str'>
=> str3 = 'sqrh' : <type 'str'>
==================================================
stat4 = os0.lstat(path1)                                                # STEP 25
ACTION: stat4 = os0.lstat(path1) 
stat4 = None : <type 'NoneType'>
os0 = <pyfakefs.fake_filesystem.FakeOsModule object at 0x1005a7910> : <class 'pyfakefs.fake_filesystem.FakeOsModule'>
path1 = '/Volumes/ramdisk/test/g' : <type 'str'>
stat_REF4 = None : <type 'NoneType'>
os_REF0 = <module 'os' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'> : <type 'module'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.OSError'> [Errno 2] No such file or directory in the fake filesystem: '/Volumes/ramdisk/test/g'
REFERENCE ACTION: stat_REF4 = os_REF0.lstat(path1) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.OSError'> [Errno 2] No such file or directory: '/Volumes/ramdisk/test/g'
==================================================
bytes4 += 1                                                             # STEP 26
ACTION: bytes4 += 1 
bytes4 = 0 : <type 'int'>
=> bytes4 = 1 : <type 'int'>
==================================================
fd0 = os0.open(path1, os.O_CREAT | os.O_EXCL)                           # STEP 27
ACTION: fd0 = os0.open(path1, os.O_CREAT | os.O_EXCL) 
os0 = <pyfakefs.fake_filesystem.FakeOsModule object at 0x1005a7910> : <class 'pyfakefs.fake_filesystem.FakeOsModule'>
path1 = '/Volumes/ramdisk/test/g' : <type 'str'>
fd0 = None : <type 'NoneType'>
os_REF0 = <module 'os' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'> : <type 'module'>
fd_REF0 = None : <type 'NoneType'>
=> fd0 = 0 : <type 'int'>
REFERENCE ACTION: fd_REF0 = os_REF0.open(path1, os.O_CREAT | os.O_EXCL) 
=> fd_REF0 = 4 : <type 'int'>
==================================================
component2 = "e"                                                        # STEP 28
ACTION: component2 = "e" 
component2 = 'b' : <type 'str'>
=> component2 = 'e' : <type 'str'>
==================================================
result = os0.path.isabs(path3)                                          # STEP 29
ACTION: result = os0.path.isabs(path3) 
os0 = <pyfakefs.fake_filesystem.FakeOsModule object at 0x1005a7910> : <class 'pyfakefs.fake_filesystem.FakeOsModule'>
path3 = '/Volumes/ramdisk/test/b/g' : <type 'str'>
os_REF0 = <module 'os' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'> : <type 'module'>
REFERENCE ACTION: result_REF = os_REF0.path.isabs(path3) 
==================================================
path3 += "/" + component4                                               # STEP 30
ACTION: path3 += "/" + component4 
component4 = 'g' : <type 'str'>
path3 = '/Volumes/ramdisk/test/b/g' : <type 'str'>
=> path3 = '/Volumes/ramdisk/test/b/g/g' : <type 'str'>
==================================================
os0.makedirs(path1)                                                     # STEP 31
ACTION: os0.makedirs(path1) 
os0 = <pyfakefs.fake_filesystem.FakeOsModule object at 0x1005a7910> : <class 'pyfakefs.fake_filesystem.FakeOsModule'>
path1 = '/Volumes/ramdisk/test/g' : <type 'str'>
os_REF0 = <module 'os' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'> : <type 'module'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.OSError'> [Errno 17] Directory exists in fake filesystem: '/Volumes/ramdisk/test/g'
REFERENCE ACTION: os_REF0.makedirs(path1) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.OSError'> [Errno 17] File exists: '/Volumes/ramdisk/test/g'
==================================================
str3 += " "                                                             # STEP 32
ACTION: str3 += " " 
str3 = 'sqrh' : <type 'str'>
=> str3 = 'sqrh ' : <type 'str'>
==================================================
result = os0.path.isdir(path3)                                          # STEP 33
ACTION: result = os0.path.isdir(path3) 
os0 = <pyfakefs.fake_filesystem.FakeOsModule object at 0x1005a7910> : <class 'pyfakefs.fake_filesystem.FakeOsModule'>
path3 = '/Volumes/ramdisk/test/b/g/g' : <type 'str'>
os_REF0 = <module 'os' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'> : <type 'module'>
REFERENCE ACTION: result_REF = os_REF0.path.isdir(path3) 
==================================================
fd1 = os0.open(path3, os.O_CREAT | os.O_EXCL)                           # STEP 34
ACTION: fd1 = os0.open(path3, os.O_CREAT | os.O_EXCL) 
os0 = <pyfakefs.fake_filesystem.FakeOsModule object at 0x1005a7910> : <class 'pyfakefs.fake_filesystem.FakeOsModule'>
path3 = '/Volumes/ramdisk/test/b/g/g' : <type 'str'>
fd1 = None : <type 'NoneType'>
os_REF0 = <module 'os' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'> : <type 'module'>
fd_REF1 = None : <type 'NoneType'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.OSError'> [Errno 62] Too many levels of symbolic links: '/Volumes/ramdisk/test/b'
REFERENCE ACTION: fd_REF1 = os_REF0.open(path3, os.O_CREAT | os.O_EXCL) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.OSError'> [Errno 62] Too many levels of symbolic links: '/Volumes/ramdisk/test/b/g/g'
==================================================
path3 = "/Volumes/ramdisk/test"                                         # STEP 35
ACTION: path3 = "/Volumes/ramdisk/test" 
path3 = '/Volumes/ramdisk/test/b/g/g' : <type 'str'>
=> path3 = '/Volumes/ramdisk/test' : <type 'str'>
==================================================
fd1 = os0.open(path1, os.O_CREAT | os.O_WRONLY | os.O_EXCL)             # STEP 36
ACTION: fd1 = os0.open(path1, os.O_CREAT | os.O_WRONLY | os.O_EXCL) 
os0 = <pyfakefs.fake_filesystem.FakeOsModule object at 0x1005a7910> : <class 'pyfakefs.fake_filesystem.FakeOsModule'>
path1 = '/Volumes/ramdisk/test/g' : <type 'str'>
fd1 = None : <type 'NoneType'>
os_REF0 = <module 'os' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'> : <type 'module'>
fd_REF1 = None : <type 'NoneType'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.OSError'> [Errno 17] File exists: '/Volumes/ramdisk/test/g'
REFERENCE ACTION: fd_REF1 = os_REF0.open(path1, os.O_CREAT | os.O_WRONLY | os.O_EXCL) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.OSError'> [Errno 17] File exists: '/Volumes/ramdisk/test/g'
==================================================
component4 = "a"                                                        # STEP 37
ACTION: component4 = "a" 
component4 = 'g' : <type 'str'>
=> component4 = 'a' : <type 'str'>
==================================================
result = os0.path.lexists(path1)                                        # STEP 38
ACTION: result = os0.path.lexists(path1) 
os0 = <pyfakefs.fake_filesystem.FakeOsModule object at 0x1005a7910> : <class 'pyfakefs.fake_filesystem.FakeOsModule'>
path1 = '/Volumes/ramdisk/test/g' : <type 'str'>
os_REF0 = <module 'os' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'> : <type 'module'>
REFERENCE ACTION: result_REF = os_REF0.path.lexists(path1) 
==================================================
result = os0.read(fd0,bytes3)                                           # STEP 39
ACTION: result = os0.read(fd0,bytes3) 
bytes3 = 0 : <type 'int'>
os0 = <pyfakefs.fake_filesystem.FakeOsModule object at 0x1005a7910> : <class 'pyfakefs.fake_filesystem.FakeOsModule'>
fd0 = 0 : <type 'int'>
os_REF0 = <module 'os' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'> : <type 'module'>
fd_REF0 = 4 : <type 'int'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.OSError'> [Errno 9] File is not open for writing.
REFERENCE ACTION: result_REF = os_REF0.read(fd_REF0,bytes3) 
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x103027b48>)
TRACEBACK:
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 48329, in safely
    act[2]()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 20901, in act426
    assert (type(raised) == type(refRaised))
STOPPING TESTING DUE TO FAILED TEST
0.0969250202179 TOTAL RUNTIME
2 EXECUTED
240 TOTAL TEST OPERATIONS
0.0307619571686 TIME SPENT EXECUTING TEST OPERATIONS
0.0118069648743 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
0.000120401382446 TIME SPENT CHECKING PROPERTIES
0.030882358551 TOTAL TIME SPENT RUNNING SUT
0.00625205039978 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
