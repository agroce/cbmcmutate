Random testing using config=Config(swarmSwitch=None, maxMustHitBranch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, internal=False, exploit=None, seed=None, generalize=False, fastQuickAnalysis=False, stopWhenNoCoverage=None, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, maxMustHitStatement=None, noCoverageExploit=False, quickTests=False, relax=False, startExploitStall=0, enumerateEnabled=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, stopWhenHitStatement=None, biasLOC=None, progress=False, postCover=False, swarmLength=None, generateLOC=None, noSwarmDependencies=False, profile=False, LOCBaseline=0.2, noEnumerateEnabled=False, full=True, multiple=False, timedProgress=30, silentFail=False, ddmin=False, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.54604.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, markovP=1.0, logging=None, stopWhenHitBranch=None, LOCProbs=False, stopWhenStatements=None, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.0, depth=200, trackMaxCoverage=None, throughput=False, noCover=True, timeout=60, stutter=None, uncaught=False, markov=None, showActions=False, startExploit=0.0)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1016d6878>)
TRACEBACK:
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 48329, in safely
    act[2]()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 20055, in act414
    assert (type(raised) == type(refRaised))
Original test has 39 steps

SAVING TEST AS failure.54604.test
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
component2 = "alpha"                                                     # STEP 0
ACTION: component2 = "alpha" 
component2 = None : <type 'NoneType'>
=> component2 = 'alpha' : <type 'str'>
==================================================
path1 = "/Volumes/ramdisk/test"                                          # STEP 1
ACTION: path1 = "/Volumes/ramdisk/test" 
path1 = None : <type 'NoneType'>
=> path1 = '/Volumes/ramdisk/test' : <type 'str'>
==================================================
component4 = "beta"                                                      # STEP 2
ACTION: component4 = "beta" 
component4 = None : <type 'NoneType'>
=> component4 = 'beta' : <type 'str'>
==================================================
component3 = "g"                                                         # STEP 3
ACTION: component3 = "g" 
component3 = None : <type 'NoneType'>
=> component3 = 'g' : <type 'str'>
==================================================
component1 = "phi"                                                       # STEP 4
ACTION: component1 = "phi" 
component1 = None : <type 'NoneType'>
=> component1 = 'phi' : <type 'str'>
==================================================
os0 = newFakeOS()                                                        # STEP 5
ACTION: os0 = newFakeOS() 
os0 = None : <type 'NoneType'>
os_REF0 = None : <type 'NoneType'>
=> os0 = <pyfakefs.fake_filesystem.FakeOsModule object at 0x10165d110> : <class 'pyfakefs.fake_filesystem.FakeOsModule'>
REFERENCE ACTION: os_REF0 = os 
=> os_REF0 = <module 'os' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'> : <type 'module'>
==================================================
component0 = "d"                                                         # STEP 6
ACTION: component0 = "d" 
component0 = None : <type 'NoneType'>
=> component0 = 'd' : <type 'str'>
==================================================
result = sorted(os0.listdir(path1))                                      # STEP 7
ACTION: result = sorted(os0.listdir(path1)) 
os0 = <pyfakefs.fake_filesystem.FakeOsModule object at 0x10165d110> : <class 'pyfakefs.fake_filesystem.FakeOsModule'>
path1 = '/Volumes/ramdisk/test' : <type 'str'>
os_REF0 = <module 'os' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'> : <type 'module'>
REFERENCE ACTION: result_REF = sorted(os_REF0.listdir(path1)) 
==================================================
os0.mkdir(path1)                                                         # STEP 8
ACTION: os0.mkdir(path1) 
os0 = <pyfakefs.fake_filesystem.FakeOsModule object at 0x10165d110> : <class 'pyfakefs.fake_filesystem.FakeOsModule'>
path1 = '/Volumes/ramdisk/test' : <type 'str'>
os_REF0 = <module 'os' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'> : <type 'module'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.OSError'> [Errno 17] Fake object already exists: '/Volumes/ramdisk/test'
REFERENCE ACTION: os_REF0.mkdir(path1) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.OSError'> [Errno 17] File exists: '/Volumes/ramdisk/test'
==================================================
str2 = ""                                                                # STEP 9
ACTION: str2 = "" 
str2 = None : <type 'NoneType'>
=> str2 = '' : <type 'str'>
==================================================
str2 += 'n'                                                             # STEP 10
ACTION: str2 += 'n' 
str2 = '' : <type 'str'>
=> str2 = 'n' : <type 'str'>
==================================================
result = os0.path.exists(path1)                                         # STEP 11
ACTION: result = os0.path.exists(path1) 
os0 = <pyfakefs.fake_filesystem.FakeOsModule object at 0x10165d110> : <class 'pyfakefs.fake_filesystem.FakeOsModule'>
path1 = '/Volumes/ramdisk/test' : <type 'str'>
os_REF0 = <module 'os' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'> : <type 'module'>
REFERENCE ACTION: result_REF = os_REF0.path.exists(path1) 
==================================================
bytes2 = 0                                                              # STEP 12
ACTION: bytes2 = 0 
bytes2 = None : <type 'NoneType'>
=> bytes2 = 0 : <type 'int'>
==================================================
bytes0 = 0                                                              # STEP 13
ACTION: bytes0 = 0 
bytes0 = None : <type 'NoneType'>
=> bytes0 = 0 : <type 'int'>
==================================================
str2 += 's'                                                             # STEP 14
ACTION: str2 += 's' 
str2 = 'n' : <type 'str'>
=> str2 = 'ns' : <type 'str'>
==================================================
str2 += 'p'                                                             # STEP 15
ACTION: str2 += 'p' 
str2 = 'ns' : <type 'str'>
=> str2 = 'nsp' : <type 'str'>
==================================================
bytes0 += 1                                                             # STEP 16
ACTION: bytes0 += 1 
bytes0 = 0 : <type 'int'>
=> bytes0 = 1 : <type 'int'>
==================================================
str2 += 'c'                                                             # STEP 17
ACTION: str2 += 'c' 
str2 = 'nsp' : <type 'str'>
=> str2 = 'nspc' : <type 'str'>
==================================================
str2 += 'n'                                                             # STEP 18
ACTION: str2 += 'n' 
str2 = 'nspc' : <type 'str'>
=> str2 = 'nspcn' : <type 'str'>
==================================================
result = os0.path.isdir(path1)                                          # STEP 19
ACTION: result = os0.path.isdir(path1) 
os0 = <pyfakefs.fake_filesystem.FakeOsModule object at 0x10165d110> : <class 'pyfakefs.fake_filesystem.FakeOsModule'>
path1 = '/Volumes/ramdisk/test' : <type 'str'>
os_REF0 = <module 'os' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'> : <type 'module'>
REFERENCE ACTION: result_REF = os_REF0.path.isdir(path1) 
==================================================
result = os0.path.isfile(path1)                                         # STEP 20
ACTION: result = os0.path.isfile(path1) 
os0 = <pyfakefs.fake_filesystem.FakeOsModule object at 0x10165d110> : <class 'pyfakefs.fake_filesystem.FakeOsModule'>
path1 = '/Volumes/ramdisk/test' : <type 'str'>
os_REF0 = <module 'os' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'> : <type 'module'>
REFERENCE ACTION: result_REF = os_REF0.path.isfile(path1) 
==================================================
result = os0.path.isdir(path1)                                          # STEP 21
ACTION: result = os0.path.isdir(path1) 
os0 = <pyfakefs.fake_filesystem.FakeOsModule object at 0x10165d110> : <class 'pyfakefs.fake_filesystem.FakeOsModule'>
path1 = '/Volumes/ramdisk/test' : <type 'str'>
os_REF0 = <module 'os' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'> : <type 'module'>
REFERENCE ACTION: result_REF = os_REF0.path.isdir(path1) 
==================================================
bytes1 = 0                                                              # STEP 22
ACTION: bytes1 = 0 
bytes1 = None : <type 'NoneType'>
=> bytes1 = 0 : <type 'int'>
==================================================
os0.symlink(path1,path1)                                                # STEP 23
ACTION: os0.symlink(path1,path1) 
os0 = <pyfakefs.fake_filesystem.FakeOsModule object at 0x10165d110> : <class 'pyfakefs.fake_filesystem.FakeOsModule'>
path1 = '/Volumes/ramdisk/test' : <type 'str'>
os_REF0 = <module 'os' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'> : <type 'module'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.OSError'> [Errno 17] File already exists in fake filesystem: '/Volumes/ramdisk/test'
REFERENCE ACTION: os_REF0.symlink(path1,path1) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.OSError'> [Errno 17] File exists
==================================================
str1 = ""                                                               # STEP 24
ACTION: str1 = "" 
str1 = None : <type 'NoneType'>
=> str1 = '' : <type 'str'>
==================================================
path1 += "/" + component2                                               # STEP 25
ACTION: path1 += "/" + component2 
component2 = 'alpha' : <type 'str'>
path1 = '/Volumes/ramdisk/test' : <type 'str'>
=> path1 = '/Volumes/ramdisk/test/alpha' : <type 'str'>
==================================================
str1 += 'b'                                                             # STEP 26
ACTION: str1 += 'b' 
str1 = '' : <type 'str'>
=> str1 = 'b' : <type 'str'>
==================================================
stat3 = os0.stat(path1)                                                 # STEP 27
ACTION: stat3 = os0.stat(path1) 
stat3 = None : <type 'NoneType'>
os0 = <pyfakefs.fake_filesystem.FakeOsModule object at 0x10165d110> : <class 'pyfakefs.fake_filesystem.FakeOsModule'>
path1 = '/Volumes/ramdisk/test/alpha' : <type 'str'>
stat_REF3 = None : <type 'NoneType'>
os_REF0 = <module 'os' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'> : <type 'module'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.OSError'> [Errno 2] No such file or directory in fake filesystem: '/Volumes/ramdisk/test/alpha'
REFERENCE ACTION: stat_REF3 = os_REF0.stat(path1) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.OSError'> [Errno 2] No such file or directory: '/Volumes/ramdisk/test/alpha'
==================================================
fd0 = os0.open(path1, os.O_CREAT | os.O_WRONLY | os.O_TRUNC)            # STEP 28
ACTION: fd0 = os0.open(path1, os.O_CREAT | os.O_WRONLY | os.O_TRUNC) 
os0 = <pyfakefs.fake_filesystem.FakeOsModule object at 0x10165d110> : <class 'pyfakefs.fake_filesystem.FakeOsModule'>
path1 = '/Volumes/ramdisk/test/alpha' : <type 'str'>
fd0 = None : <type 'NoneType'>
os_REF0 = <module 'os' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'> : <type 'module'>
fd_REF0 = None : <type 'NoneType'>
=> fd0 = 0 : <type 'int'>
REFERENCE ACTION: fd_REF0 = os_REF0.open(path1, os.O_CREAT | os.O_WRONLY | os.O_TRUNC) 
=> fd_REF0 = 4 : <type 'int'>
==================================================
stat0 = os0.stat(path1)                                                 # STEP 29
ACTION: stat0 = os0.stat(path1) 
stat0 = None : <type 'NoneType'>
os0 = <pyfakefs.fake_filesystem.FakeOsModule object at 0x10165d110> : <class 'pyfakefs.fake_filesystem.FakeOsModule'>
path1 = '/Volumes/ramdisk/test/alpha' : <type 'str'>
stat_REF0 = None : <type 'NoneType'>
os_REF0 = <module 'os' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'> : <type 'module'>
=> stat0 = <pyfakefs.fake_filesystem._FakeStatResult object at 0x1016d7250> : <class 'pyfakefs.fake_filesystem._FakeStatResult'>
REFERENCE ACTION: stat_REF0 = os_REF0.stat(path1) 
=> stat_REF0 = posix.stat_result(st_mode=33261, st_ino=8559194, st_dev=16777224, st_nlink=1, st_uid=501, st_gid=20, st_size=0, st_atime=1507266366, st_mtime=1507266366, st_ctime=1507266366) : <type 'posix.stat_result'>
==================================================
component2 = "alpha"                                                    # STEP 30
ACTION: component2 = "alpha" 
component2 = 'alpha' : <type 'str'>
==================================================
fd1 = os0.open(path1, os.O_CREAT | os.O_WRONLY | os.O_TRUNC | os.O_EXCL)  # STEP 31
ACTION: fd1 = os0.open(path1, os.O_CREAT | os.O_WRONLY | os.O_TRUNC | os.O_EXCL) 
os0 = <pyfakefs.fake_filesystem.FakeOsModule object at 0x10165d110> : <class 'pyfakefs.fake_filesystem.FakeOsModule'>
path1 = '/Volumes/ramdisk/test/alpha' : <type 'str'>
fd1 = None : <type 'NoneType'>
os_REF0 = <module 'os' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'> : <type 'module'>
fd_REF1 = None : <type 'NoneType'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.OSError'> [Errno 17] File exists: '/Volumes/ramdisk/test/alpha'
REFERENCE ACTION: fd_REF1 = os_REF0.open(path1, os.O_CREAT | os.O_WRONLY | os.O_TRUNC | os.O_EXCL) 
REFERENCE ACTION RAISED EXCEPTION: <type 'exceptions.OSError'> [Errno 17] File exists: '/Volumes/ramdisk/test/alpha'
==================================================
str1 += 'f'                                                             # STEP 32
ACTION: str1 += 'f' 
str1 = 'b' : <type 'str'>
=> str1 = 'bf' : <type 'str'>
==================================================
str2 += 's'                                                             # STEP 33
ACTION: str2 += 's' 
str2 = 'nspcn' : <type 'str'>
=> str2 = 'nspcns' : <type 'str'>
==================================================
str1 += 'i'                                                             # STEP 34
ACTION: str1 += 'i' 
str1 = 'bf' : <type 'str'>
=> str1 = 'bfi' : <type 'str'>
==================================================
stat1 = os0.stat(path1)                                                 # STEP 35
ACTION: stat1 = os0.stat(path1) 
stat1 = None : <type 'NoneType'>
os0 = <pyfakefs.fake_filesystem.FakeOsModule object at 0x10165d110> : <class 'pyfakefs.fake_filesystem.FakeOsModule'>
path1 = '/Volumes/ramdisk/test/alpha' : <type 'str'>
stat_REF1 = None : <type 'NoneType'>
os_REF0 = <module 'os' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'> : <type 'module'>
=> stat1 = <pyfakefs.fake_filesystem._FakeStatResult object at 0x1016d7d50> : <class 'pyfakefs.fake_filesystem._FakeStatResult'>
REFERENCE ACTION: stat_REF1 = os_REF0.stat(path1) 
=> stat_REF1 = posix.stat_result(st_mode=33261, st_ino=8559194, st_dev=16777224, st_nlink=1, st_uid=501, st_gid=20, st_size=0, st_atime=1507266366, st_mtime=1507266366, st_ctime=1507266366) : <type 'posix.stat_result'>
==================================================
os0.write(fd0,str2)                                                     # STEP 36
ACTION: os0.write(fd0,str2) 
str2 = 'nspcns' : <type 'str'>
os0 = <pyfakefs.fake_filesystem.FakeOsModule object at 0x10165d110> : <class 'pyfakefs.fake_filesystem.FakeOsModule'>
fd0 = 0 : <type 'int'>
os_REF0 = <module 'os' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'> : <type 'module'>
fd_REF0 = 4 : <type 'int'>
REFERENCE ACTION: os_REF0.write(fd_REF0,str2) 
==================================================
path1 += "/" + component2                                               # STEP 37
ACTION: path1 += "/" + component2 
component2 = 'alpha' : <type 'str'>
path1 = '/Volumes/ramdisk/test/alpha' : <type 'str'>
=> path1 = '/Volumes/ramdisk/test/alpha/alpha' : <type 'str'>
==================================================
os0.write(fd0,str1)                                                     # STEP 38
ACTION: os0.write(fd0,str1) 
str1 = 'bfi' : <type 'str'>
os0 = <pyfakefs.fake_filesystem.FakeOsModule object at 0x10165d110> : <class 'pyfakefs.fake_filesystem.FakeOsModule'>
fd0 = 0 : <type 'int'>
os_REF0 = <module 'os' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'> : <type 'module'>
fd_REF0 = 4 : <type 'int'>
RAISED EXPECTED EXCEPTION: <type 'exceptions.IOError'> [Errno 28] Fake file object: size must be a non-negative integer, but is 0: 'alpha'
REFERENCE ACTION: os_REF0.write(fd_REF0,str1) 
ERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1005aa248>)
TRACEBACK:
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 48329, in safely
    act[2]()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 20055, in act414
    assert (type(raised) == type(refRaised))
STOPPING TESTING DUE TO FAILED TEST
0.0364098548889 TOTAL RUNTIME
1 EXECUTED
39 TOTAL TEST OPERATIONS
0.0045919418335 TIME SPENT EXECUTING TEST OPERATIONS
0.00334906578064 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
2.3365020752e-05 TIME SPENT CHECKING PROPERTIES
0.00461530685425 TOTAL TIME SPENT RUNNING SUT
0.00431299209595 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
