Random testing using config=Config(swarmSwitch=None, maxMustHitBranch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, internal=False, exploit=None, seed=None, generalize=False, fastQuickAnalysis=False, stopWhenNoCoverage=None, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, maxMustHitStatement=None, noCoverageExploit=False, quickTests=False, relax=False, startExploitStall=0, enumerateEnabled=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, stopWhenHitStatement=None, biasLOC=None, progress=False, postCover=False, swarmLength=None, generateLOC=None, noSwarmDependencies=False, profile=False, LOCBaseline=0.2, noEnumerateEnabled=False, full=True, multiple=False, timedProgress=30, silentFail=False, ddmin=False, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.55921.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, markovP=1.0, logging=None, stopWhenHitBranch=None, LOCProbs=False, stopWhenStatements=None, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.0, depth=200, trackMaxCoverage=None, throughput=False, noCover=True, timeout=60, stutter=None, uncaught=False, markov=None, showActions=False, startExploit=0.0)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.TypeError'>, TypeError('an integer is required',), <traceback object at 0x103b8c1b8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 48329, in safely
    act[2]()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 26359, in act504
    self.p_stat[3] = self.p_os[0].lstat(self.p_path[1])
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 3560, in lstat
    return self.filesystem.GetStat(entry_path, follow_symlinks=False)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1081, in GetStat
    file_object = self.ResolveObject(entry_path, follow_symlinks, allow_fd=True)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1829, in ResolveObject
    return self.GetOpenFile(file_path).GetObject()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1209, in GetOpenFile
    raise TypeError('an integer is required')
Original test has 18 steps

SAVING TEST AS failure.55921.test
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
path1 = "/Volumes/ramdisk/test"                                          # STEP 0
ACTION: path1 = "/Volumes/ramdisk/test" 
path1 = None : <type 'NoneType'>
=> path1 = '/Volumes/ramdisk/test' : <type 'str'>
==================================================
bytes4 = 0                                                               # STEP 1
ACTION: bytes4 = 0 
bytes4 = None : <type 'NoneType'>
=> bytes4 = 0 : <type 'int'>
==================================================
str1 = ""                                                                # STEP 2
ACTION: str1 = "" 
str1 = None : <type 'NoneType'>
=> str1 = '' : <type 'str'>
==================================================
component4 = "b"                                                         # STEP 3
ACTION: component4 = "b" 
component4 = None : <type 'NoneType'>
=> component4 = 'b' : <type 'str'>
==================================================
component0 = "e"                                                         # STEP 4
ACTION: component0 = "e" 
component0 = None : <type 'NoneType'>
=> component0 = 'e' : <type 'str'>
==================================================
component3 = "d"                                                         # STEP 5
ACTION: component3 = "d" 
component3 = None : <type 'NoneType'>
=> component3 = 'd' : <type 'str'>
==================================================
str1 += 'a'                                                              # STEP 6
ACTION: str1 += 'a' 
str1 = '' : <type 'str'>
=> str1 = 'a' : <type 'str'>
==================================================
str1 += " "                                                              # STEP 7
ACTION: str1 += " " 
str1 = 'a' : <type 'str'>
=> str1 = 'a ' : <type 'str'>
==================================================
component2 = "epsilon"                                                   # STEP 8
ACTION: component2 = "epsilon" 
component2 = None : <type 'NoneType'>
=> component2 = 'epsilon' : <type 'str'>
==================================================
path1 += "/" + component0                                                # STEP 9
ACTION: path1 += "/" + component0 
component0 = 'e' : <type 'str'>
path1 = '/Volumes/ramdisk/test' : <type 'str'>
=> path1 = '/Volumes/ramdisk/test/e' : <type 'str'>
==================================================
str1 += 'x'                                                             # STEP 10
ACTION: str1 += 'x' 
str1 = 'a ' : <type 'str'>
=> str1 = 'a x' : <type 'str'>
==================================================
path1 += "/" + component3                                               # STEP 11
ACTION: path1 += "/" + component3 
component3 = 'd' : <type 'str'>
path1 = '/Volumes/ramdisk/test/e' : <type 'str'>
=> path1 = '/Volumes/ramdisk/test/e/d' : <type 'str'>
==================================================
component3 = "c"                                                        # STEP 12
ACTION: component3 = "c" 
component3 = 'd' : <type 'str'>
=> component3 = 'c' : <type 'str'>
==================================================
os0 = newFakeOS()                                                       # STEP 13
ACTION: os0 = newFakeOS() 
os0 = None : <type 'NoneType'>
os_REF0 = None : <type 'NoneType'>
=> os0 = <pyfakefs.fake_filesystem.FakeOsModule object at 0x101ec32d0> : <class 'pyfakefs.fake_filesystem.FakeOsModule'>
REFERENCE ACTION: os_REF0 = os 
=> os_REF0 = <module 'os' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'> : <type 'module'>
==================================================
component0 = "epsilon"                                                  # STEP 14
ACTION: component0 = "epsilon" 
component0 = 'e' : <type 'str'>
=> component0 = 'epsilon' : <type 'str'>
==================================================
str3 = ""                                                               # STEP 15
ACTION: str3 = "" 
str3 = None : <type 'NoneType'>
=> str3 = '' : <type 'str'>
==================================================
result = os0.path.isdir(path1)                                          # STEP 16
ACTION: result = os0.path.isdir(path1) 
os0 = <pyfakefs.fake_filesystem.FakeOsModule object at 0x101ec32d0> : <class 'pyfakefs.fake_filesystem.FakeOsModule'>
path1 = '/Volumes/ramdisk/test/e/d' : <type 'str'>
os_REF0 = <module 'os' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'> : <type 'module'>
REFERENCE ACTION: result_REF = os_REF0.path.isdir(path1) 
==================================================
stat3 = os0.lstat(path1)                                                # STEP 17
ACTION: stat3 = os0.lstat(path1) 
stat3 = None : <type 'NoneType'>
os0 = <pyfakefs.fake_filesystem.FakeOsModule object at 0x101ec32d0> : <class 'pyfakefs.fake_filesystem.FakeOsModule'>
path1 = '/Volumes/ramdisk/test/e/d' : <type 'str'>
stat_REF3 = None : <type 'NoneType'>
os_REF0 = <module 'os' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'> : <type 'module'>
RAISED EXCEPTION: <type 'exceptions.TypeError'> an integer is required
ERROR: (<type 'exceptions.TypeError'>, TypeError('an integer is required',), <traceback object at 0x1042d1f38>)
TRACEBACK:
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 48329, in safely
    act[2]()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 26359, in act504
    self.p_stat[3] = self.p_os[0].lstat(self.p_path[1])
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 3560, in lstat
    return self.filesystem.GetStat(entry_path, follow_symlinks=False)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1081, in GetStat
    file_object = self.ResolveObject(entry_path, follow_symlinks, allow_fd=True)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1829, in ResolveObject
    return self.GetOpenFile(file_path).GetObject()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1209, in GetOpenFile
    raise TypeError('an integer is required')
STOPPING TESTING DUE TO FAILED TEST
0.052029132843 TOTAL RUNTIME
3 EXECUTED
418 TOTAL TEST OPERATIONS
0.00632572174072 TIME SPENT EXECUTING TEST OPERATIONS
0.01921916008 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
0.000163316726685 TIME SPENT CHECKING PROPERTIES
0.00648903846741 TOTAL TIME SPENT RUNNING SUT
0.00727272033691 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
