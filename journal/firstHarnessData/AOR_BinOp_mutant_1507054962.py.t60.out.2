Random testing using config=Config(swarmSwitch=None, maxMustHitBranch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, internal=False, exploit=None, seed=None, generalize=False, fastQuickAnalysis=False, stopWhenNoCoverage=None, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, maxMustHitStatement=None, noCoverageExploit=False, quickTests=False, relax=False, startExploitStall=0, enumerateEnabled=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, stopWhenHitStatement=None, biasLOC=None, progress=False, postCover=False, swarmLength=None, generateLOC=None, noSwarmDependencies=False, profile=False, LOCBaseline=0.2, noEnumerateEnabled=False, full=True, multiple=False, timedProgress=30, silentFail=False, ddmin=False, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.62578.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, markovP=1.0, logging=None, stopWhenHitBranch=None, LOCProbs=False, stopWhenStatements=None, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.0, depth=200, trackMaxCoverage=None, throughput=False, noCover=True, timeout=60, stutter=None, uncaught=False, markov=None, showActions=False, startExploit=0.0)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.TypeError'>, TypeError("unsupported operand type(s) for //: 'str' and 'str'",), <traceback object at 0x1038c32d8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 48329, in safely
    act[2]()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 66, in act0
    self.p_os[0] = newFakeOS()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 21, in newFakeOS
    fs.CreateDirectory('/Volumes')
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 2055, in CreateDirectory
    if self.Exists(directory_path):
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1624, in Exists
    file_path = self.ResolvePath(file_path)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1718, in ResolvePath
    file_path = self.NormalizePath(self.NormalizeCase(file_path))
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1329, in NormalizeCase
    return components_to_path()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1305, in components_to_path
    normalized_path = (sep // normalized_path)
Original test has 45 steps

SAVING TEST AS failure.62578.test
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
component4 = "e"                                                         # STEP 0
ACTION: component4 = "e" 
component4 = None : <type 'NoneType'>
=> component4 = 'e' : <type 'str'>
==================================================
path4 = "/Volumes/ramdisk/test"                                          # STEP 1
ACTION: path4 = "/Volumes/ramdisk/test" 
path4 = None : <type 'NoneType'>
=> path4 = '/Volumes/ramdisk/test' : <type 'str'>
==================================================
component3 = "lambda"                                                    # STEP 2
ACTION: component3 = "lambda" 
component3 = None : <type 'NoneType'>
=> component3 = 'lambda' : <type 'str'>
==================================================
str3 = ""                                                                # STEP 3
ACTION: str3 = "" 
str3 = None : <type 'NoneType'>
=> str3 = '' : <type 'str'>
==================================================
str2 = ""                                                                # STEP 4
ACTION: str2 = "" 
str2 = None : <type 'NoneType'>
=> str2 = '' : <type 'str'>
==================================================
str3 += 'm'                                                              # STEP 5
ACTION: str3 += 'm' 
str3 = '' : <type 'str'>
=> str3 = 'm' : <type 'str'>
==================================================
str2 += 'r'                                                              # STEP 6
ACTION: str2 += 'r' 
str2 = '' : <type 'str'>
=> str2 = 'r' : <type 'str'>
==================================================
component2 = "gamma"                                                     # STEP 7
ACTION: component2 = "gamma" 
component2 = None : <type 'NoneType'>
=> component2 = 'gamma' : <type 'str'>
==================================================
str3 += 'q'                                                              # STEP 8
ACTION: str3 += 'q' 
str3 = 'm' : <type 'str'>
=> str3 = 'mq' : <type 'str'>
==================================================
path4 += "/" + component3                                                # STEP 9
ACTION: path4 += "/" + component3 
component3 = 'lambda' : <type 'str'>
path4 = '/Volumes/ramdisk/test' : <type 'str'>
=> path4 = '/Volumes/ramdisk/test/lambda' : <type 'str'>
==================================================
str2 += 'k'                                                             # STEP 10
ACTION: str2 += 'k' 
str2 = 'r' : <type 'str'>
=> str2 = 'rk' : <type 'str'>
==================================================
str3 += " "                                                             # STEP 11
ACTION: str3 += " " 
str3 = 'mq' : <type 'str'>
=> str3 = 'mq ' : <type 'str'>
==================================================
str3 += 's'                                                             # STEP 12
ACTION: str3 += 's' 
str3 = 'mq ' : <type 'str'>
=> str3 = 'mq s' : <type 'str'>
==================================================
component1 = "h"                                                        # STEP 13
ACTION: component1 = "h" 
component1 = None : <type 'NoneType'>
=> component1 = 'h' : <type 'str'>
==================================================
str2 += 's'                                                             # STEP 14
ACTION: str2 += 's' 
str2 = 'rk' : <type 'str'>
=> str2 = 'rks' : <type 'str'>
==================================================
str4 = ""                                                               # STEP 15
ACTION: str4 = "" 
str4 = None : <type 'NoneType'>
=> str4 = '' : <type 'str'>
==================================================
str2 += 'y'                                                             # STEP 16
ACTION: str2 += 'y' 
str2 = 'rks' : <type 'str'>
=> str2 = 'rksy' : <type 'str'>
==================================================
component0 = "alpha"                                                    # STEP 17
ACTION: component0 = "alpha" 
component0 = None : <type 'NoneType'>
=> component0 = 'alpha' : <type 'str'>
==================================================
str4 += 'e'                                                             # STEP 18
ACTION: str4 += 'e' 
str4 = '' : <type 'str'>
=> str4 = 'e' : <type 'str'>
==================================================
str3 = ""                                                               # STEP 19
ACTION: str3 = "" 
str3 = 'mq s' : <type 'str'>
=> str3 = '' : <type 'str'>
==================================================
str2 += 'w'                                                             # STEP 20
ACTION: str2 += 'w' 
str2 = 'rksy' : <type 'str'>
=> str2 = 'rksyw' : <type 'str'>
==================================================
component3 = "g"                                                        # STEP 21
ACTION: component3 = "g" 
component3 = 'lambda' : <type 'str'>
=> component3 = 'g' : <type 'str'>
==================================================
str3 += 'd'                                                             # STEP 22
ACTION: str3 += 'd' 
str3 = '' : <type 'str'>
=> str3 = 'd' : <type 'str'>
==================================================
str2 += 't'                                                             # STEP 23
ACTION: str2 += 't' 
str2 = 'rksyw' : <type 'str'>
=> str2 = 'rksywt' : <type 'str'>
==================================================
str4 += 'y'                                                             # STEP 24
ACTION: str4 += 'y' 
str4 = 'e' : <type 'str'>
=> str4 = 'ey' : <type 'str'>
==================================================
str3 += 'l'                                                             # STEP 25
ACTION: str3 += 'l' 
str3 = 'd' : <type 'str'>
=> str3 = 'dl' : <type 'str'>
==================================================
str3 += 'q'                                                             # STEP 26
ACTION: str3 += 'q' 
str3 = 'dl' : <type 'str'>
=> str3 = 'dlq' : <type 'str'>
==================================================
str4 += 'd'                                                             # STEP 27
ACTION: str4 += 'd' 
str4 = 'ey' : <type 'str'>
=> str4 = 'eyd' : <type 'str'>
==================================================
str2 += 'p'                                                             # STEP 28
ACTION: str2 += 'p' 
str2 = 'rksywt' : <type 'str'>
=> str2 = 'rksywtp' : <type 'str'>
==================================================
str2 += 'h'                                                             # STEP 29
ACTION: str2 += 'h' 
str2 = 'rksywtp' : <type 'str'>
=> str2 = 'rksywtph' : <type 'str'>
==================================================
str4 += 'z'                                                             # STEP 30
ACTION: str4 += 'z' 
str4 = 'eyd' : <type 'str'>
=> str4 = 'eydz' : <type 'str'>
==================================================
str2 += 'l'                                                             # STEP 31
ACTION: str2 += 'l' 
str2 = 'rksywtph' : <type 'str'>
=> str2 = 'rksywtphl' : <type 'str'>
==================================================
str2 += 'k'                                                             # STEP 32
ACTION: str2 += 'k' 
str2 = 'rksywtphl' : <type 'str'>
=> str2 = 'rksywtphlk' : <type 'str'>
==================================================
path4 += "/" + component1                                               # STEP 33
ACTION: path4 += "/" + component1 
component1 = 'h' : <type 'str'>
path4 = '/Volumes/ramdisk/test/lambda' : <type 'str'>
=> path4 = '/Volumes/ramdisk/test/lambda/h' : <type 'str'>
==================================================
str4 += 'y'                                                             # STEP 34
ACTION: str4 += 'y' 
str4 = 'eydz' : <type 'str'>
=> str4 = 'eydzy' : <type 'str'>
==================================================
str4 += 'e'                                                             # STEP 35
ACTION: str4 += 'e' 
str4 = 'eydzy' : <type 'str'>
=> str4 = 'eydzye' : <type 'str'>
==================================================
str4 = ""                                                               # STEP 36
ACTION: str4 = "" 
str4 = 'eydzye' : <type 'str'>
=> str4 = '' : <type 'str'>
==================================================
str3 += 'v'                                                             # STEP 37
ACTION: str3 += 'v' 
str3 = 'dlq' : <type 'str'>
=> str3 = 'dlqv' : <type 'str'>
==================================================
component1 = "f"                                                        # STEP 38
ACTION: component1 = "f" 
component1 = 'h' : <type 'str'>
=> component1 = 'f' : <type 'str'>
==================================================
str3 += 'g'                                                             # STEP 39
ACTION: str3 += 'g' 
str3 = 'dlqv' : <type 'str'>
=> str3 = 'dlqvg' : <type 'str'>
==================================================
str3 += 'k'                                                             # STEP 40
ACTION: str3 += 'k' 
str3 = 'dlqvg' : <type 'str'>
=> str3 = 'dlqvgk' : <type 'str'>
==================================================
str3 += 'a'                                                             # STEP 41
ACTION: str3 += 'a' 
str3 = 'dlqvgk' : <type 'str'>
=> str3 = 'dlqvgka' : <type 'str'>
==================================================
str4 += 'a'                                                             # STEP 42
ACTION: str4 += 'a' 
str4 = '' : <type 'str'>
=> str4 = 'a' : <type 'str'>
==================================================
str3 += 'c'                                                             # STEP 43
ACTION: str3 += 'c' 
str3 = 'dlqvgka' : <type 'str'>
=> str3 = 'dlqvgkac' : <type 'str'>
==================================================
os0 = newFakeOS()                                                       # STEP 44
ACTION: os0 = newFakeOS() 
os0 = None : <type 'NoneType'>
os_REF0 = None : <type 'NoneType'>
RAISED EXCEPTION: <type 'exceptions.TypeError'> unsupported operand type(s) for //: 'str' and 'str'
ERROR: (<type 'exceptions.TypeError'>, TypeError("unsupported operand type(s) for //: 'str' and 'str'",), <traceback object at 0x1006c3320>)
TRACEBACK:
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 48329, in safely
    act[2]()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 66, in act0
    self.p_os[0] = newFakeOS()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 21, in newFakeOS
    fs.CreateDirectory('/Volumes')
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 2055, in CreateDirectory
    if self.Exists(directory_path):
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1624, in Exists
    file_path = self.ResolvePath(file_path)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1718, in ResolvePath
    file_path = self.NormalizePath(self.NormalizeCase(file_path))
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1329, in NormalizeCase
    return components_to_path()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1305, in components_to_path
    normalized_path = (sep // normalized_path)
STOPPING TESTING DUE TO FAILED TEST
0.0267889499664 TOTAL RUNTIME
1 EXECUTED
45 TOTAL TEST OPERATIONS
0.00132489204407 TIME SPENT EXECUTING TEST OPERATIONS
0.00236630439758 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
1.83582305908e-05 TIME SPENT CHECKING PROPERTIES
0.00134325027466 TOTAL TIME SPENT RUNNING SUT
0.00428199768066 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
