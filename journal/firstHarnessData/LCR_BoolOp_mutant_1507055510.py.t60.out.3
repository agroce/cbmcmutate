Random testing using config=Config(swarmSwitch=None, maxMustHitBranch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, internal=False, exploit=None, seed=None, generalize=False, fastQuickAnalysis=False, stopWhenNoCoverage=None, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, maxMustHitStatement=None, noCoverageExploit=False, quickTests=False, relax=False, startExploitStall=0, enumerateEnabled=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, stopWhenHitStatement=None, biasLOC=None, progress=False, postCover=False, swarmLength=None, generateLOC=None, noSwarmDependencies=False, profile=False, LOCBaseline=0.2, noEnumerateEnabled=False, full=True, multiple=False, timedProgress=30, silentFail=False, ddmin=False, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.55925.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, markovP=1.0, logging=None, stopWhenHitBranch=None, LOCProbs=False, stopWhenStatements=None, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.0, depth=200, trackMaxCoverage=None, throughput=False, noCover=True, timeout=60, stutter=None, uncaught=False, markov=None, showActions=False, startExploit=0.0)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.TypeError'>, TypeError('an integer is required',), <traceback object at 0x103d185a8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 48329, in safely
    act[2]()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 16783, in act370
    self.p_fd[1] = self.p_os[0].open(self.p_path[4], os.O_CREAT)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 3316, in open
    self.chmod(file_path, mode)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 3730, in chmod
    self.filesystem.ChangeMode(path, mode, follow_symlinks)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1096, in ChangeMode
    file_object = self.ResolveObject(path, follow_symlinks, allow_fd=True)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1829, in ResolveObject
    return self.GetOpenFile(file_path).GetObject()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1209, in GetOpenFile
    raise TypeError('an integer is required')
Original test has 49 steps

SAVING TEST AS failure.55925.test
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
bytes1 = 0                                                               # STEP 0
ACTION: bytes1 = 0 
bytes1 = None : <type 'NoneType'>
=> bytes1 = 0 : <type 'int'>
==================================================
component3 = "phi"                                                       # STEP 1
ACTION: component3 = "phi" 
component3 = None : <type 'NoneType'>
=> component3 = 'phi' : <type 'str'>
==================================================
component4 = "e"                                                         # STEP 2
ACTION: component4 = "e" 
component4 = None : <type 'NoneType'>
=> component4 = 'e' : <type 'str'>
==================================================
component2 = "epsilon"                                                   # STEP 3
ACTION: component2 = "epsilon" 
component2 = None : <type 'NoneType'>
=> component2 = 'epsilon' : <type 'str'>
==================================================
str1 = ""                                                                # STEP 4
ACTION: str1 = "" 
str1 = None : <type 'NoneType'>
=> str1 = '' : <type 'str'>
==================================================
component1 = "delta"                                                     # STEP 5
ACTION: component1 = "delta" 
component1 = None : <type 'NoneType'>
=> component1 = 'delta' : <type 'str'>
==================================================
component0 = "a"                                                         # STEP 6
ACTION: component0 = "a" 
component0 = None : <type 'NoneType'>
=> component0 = 'a' : <type 'str'>
==================================================
str1 += 'o'                                                              # STEP 7
ACTION: str1 += 'o' 
str1 = '' : <type 'str'>
=> str1 = 'o' : <type 'str'>
==================================================
str1 += 'h'                                                              # STEP 8
ACTION: str1 += 'h' 
str1 = 'o' : <type 'str'>
=> str1 = 'oh' : <type 'str'>
==================================================
str1 += 'w'                                                              # STEP 9
ACTION: str1 += 'w' 
str1 = 'oh' : <type 'str'>
=> str1 = 'ohw' : <type 'str'>
==================================================
path2 = "/Volumes/ramdisk/test"                                         # STEP 10
ACTION: path2 = "/Volumes/ramdisk/test" 
path2 = None : <type 'NoneType'>
=> path2 = '/Volumes/ramdisk/test' : <type 'str'>
==================================================
str1 += 'z'                                                             # STEP 11
ACTION: str1 += 'z' 
str1 = 'ohw' : <type 'str'>
=> str1 = 'ohwz' : <type 'str'>
==================================================
str1 += 'y'                                                             # STEP 12
ACTION: str1 += 'y' 
str1 = 'ohwz' : <type 'str'>
=> str1 = 'ohwzy' : <type 'str'>
==================================================
bytes0 = 0                                                              # STEP 13
ACTION: bytes0 = 0 
bytes0 = None : <type 'NoneType'>
=> bytes0 = 0 : <type 'int'>
==================================================
str1 += 'i'                                                             # STEP 14
ACTION: str1 += 'i' 
str1 = 'ohwzy' : <type 'str'>
=> str1 = 'ohwzyi' : <type 'str'>
==================================================
bytes1 += 1                                                             # STEP 15
ACTION: bytes1 += 1 
bytes1 = 0 : <type 'int'>
=> bytes1 = 1 : <type 'int'>
==================================================
str1 += 'l'                                                             # STEP 16
ACTION: str1 += 'l' 
str1 = 'ohwzyi' : <type 'str'>
=> str1 = 'ohwzyil' : <type 'str'>
==================================================
str1 += 'r'                                                             # STEP 17
ACTION: str1 += 'r' 
str1 = 'ohwzyil' : <type 'str'>
=> str1 = 'ohwzyilr' : <type 'str'>
==================================================
str1 += 't'                                                             # STEP 18
ACTION: str1 += 't' 
str1 = 'ohwzyilr' : <type 'str'>
=> str1 = 'ohwzyilrt' : <type 'str'>
==================================================
str1 += 's'                                                             # STEP 19
ACTION: str1 += 's' 
str1 = 'ohwzyilrt' : <type 'str'>
=> str1 = 'ohwzyilrts' : <type 'str'>
==================================================
str1 += 'm'                                                             # STEP 20
ACTION: str1 += 'm' 
str1 = 'ohwzyilrts' : <type 'str'>
=> str1 = 'ohwzyilrtsm' : <type 'str'>
==================================================
str1 += 'f'                                                             # STEP 21
ACTION: str1 += 'f' 
str1 = 'ohwzyilrtsm' : <type 'str'>
=> str1 = 'ohwzyilrtsmf' : <type 'str'>
==================================================
path2 += "/" + component0                                               # STEP 22
ACTION: path2 += "/" + component0 
component0 = 'a' : <type 'str'>
path2 = '/Volumes/ramdisk/test' : <type 'str'>
=> path2 = '/Volumes/ramdisk/test/a' : <type 'str'>
==================================================
bytes2 = 0                                                              # STEP 23
ACTION: bytes2 = 0 
bytes2 = None : <type 'NoneType'>
=> bytes2 = 0 : <type 'int'>
==================================================
str1 += 'z'                                                             # STEP 24
ACTION: str1 += 'z' 
str1 = 'ohwzyilrtsmf' : <type 'str'>
=> str1 = 'ohwzyilrtsmfz' : <type 'str'>
==================================================
path4 = "/Volumes/ramdisk/test"                                         # STEP 25
ACTION: path4 = "/Volumes/ramdisk/test" 
path4 = None : <type 'NoneType'>
=> path4 = '/Volumes/ramdisk/test' : <type 'str'>
==================================================
str2 = ""                                                               # STEP 26
ACTION: str2 = "" 
str2 = None : <type 'NoneType'>
=> str2 = '' : <type 'str'>
==================================================
str1 += 'g'                                                             # STEP 27
ACTION: str1 += 'g' 
str1 = 'ohwzyilrtsmfz' : <type 'str'>
=> str1 = 'ohwzyilrtsmfzg' : <type 'str'>
==================================================
path2 += "/" + component2                                               # STEP 28
ACTION: path2 += "/" + component2 
component2 = 'epsilon' : <type 'str'>
path2 = '/Volumes/ramdisk/test/a' : <type 'str'>
=> path2 = '/Volumes/ramdisk/test/a/epsilon' : <type 'str'>
==================================================
str2 += 'u'                                                             # STEP 29
ACTION: str2 += 'u' 
str2 = '' : <type 'str'>
=> str2 = 'u' : <type 'str'>
==================================================
str2 += 'x'                                                             # STEP 30
ACTION: str2 += 'x' 
str2 = 'u' : <type 'str'>
=> str2 = 'ux' : <type 'str'>
==================================================
str2 += 'd'                                                             # STEP 31
ACTION: str2 += 'd' 
str2 = 'ux' : <type 'str'>
=> str2 = 'uxd' : <type 'str'>
==================================================
component2 = "h"                                                        # STEP 32
ACTION: component2 = "h" 
component2 = 'epsilon' : <type 'str'>
=> component2 = 'h' : <type 'str'>
==================================================
component0 = "omega"                                                    # STEP 33
ACTION: component0 = "omega" 
component0 = 'a' : <type 'str'>
=> component0 = 'omega' : <type 'str'>
==================================================
str1 += 'c'                                                             # STEP 34
ACTION: str1 += 'c' 
str1 = 'ohwzyilrtsmfzg' : <type 'str'>
=> str1 = 'ohwzyilrtsmfzgc' : <type 'str'>
==================================================
str2 += 'c'                                                             # STEP 35
ACTION: str2 += 'c' 
str2 = 'uxd' : <type 'str'>
=> str2 = 'uxdc' : <type 'str'>
==================================================
str2 += 'w'                                                             # STEP 36
ACTION: str2 += 'w' 
str2 = 'uxdc' : <type 'str'>
=> str2 = 'uxdcw' : <type 'str'>
==================================================
str0 = ""                                                               # STEP 37
ACTION: str0 = "" 
str0 = None : <type 'NoneType'>
=> str0 = '' : <type 'str'>
==================================================
str1 += 'y'                                                             # STEP 38
ACTION: str1 += 'y' 
str1 = 'ohwzyilrtsmfzgc' : <type 'str'>
=> str1 = 'ohwzyilrtsmfzgcy' : <type 'str'>
==================================================
str1 += 'j'                                                             # STEP 39
ACTION: str1 += 'j' 
str1 = 'ohwzyilrtsmfzgcy' : <type 'str'>
=> str1 = 'ohwzyilrtsmfzgcyj' : <type 'str'>
==================================================
str1 += 'g'                                                             # STEP 40
ACTION: str1 += 'g' 
str1 = 'ohwzyilrtsmfzgcyj' : <type 'str'>
=> str1 = 'ohwzyilrtsmfzgcyjg' : <type 'str'>
==================================================
str1 += 'g'                                                             # STEP 41
ACTION: str1 += 'g' 
str1 = 'ohwzyilrtsmfzgcyjg' : <type 'str'>
=> str1 = 'ohwzyilrtsmfzgcyjgg' : <type 'str'>
==================================================
str0 += 'k'                                                             # STEP 42
ACTION: str0 += 'k' 
str0 = '' : <type 'str'>
=> str0 = 'k' : <type 'str'>
==================================================
str0 += 'o'                                                             # STEP 43
ACTION: str0 += 'o' 
str0 = 'k' : <type 'str'>
=> str0 = 'ko' : <type 'str'>
==================================================
path4 += "/" + component0                                               # STEP 44
ACTION: path4 += "/" + component0 
component0 = 'omega' : <type 'str'>
path4 = '/Volumes/ramdisk/test' : <type 'str'>
=> path4 = '/Volumes/ramdisk/test/omega' : <type 'str'>
==================================================
str2 += 'j'                                                             # STEP 45
ACTION: str2 += 'j' 
str2 = 'uxdcw' : <type 'str'>
=> str2 = 'uxdcwj' : <type 'str'>
==================================================
os0 = newFakeOS()                                                       # STEP 46
ACTION: os0 = newFakeOS() 
os0 = None : <type 'NoneType'>
os_REF0 = None : <type 'NoneType'>
=> os0 = <pyfakefs.fake_filesystem.FakeOsModule object at 0x103853210> : <class 'pyfakefs.fake_filesystem.FakeOsModule'>
REFERENCE ACTION: os_REF0 = os 
=> os_REF0 = <module 'os' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'> : <type 'module'>
==================================================
path2 = "/Volumes/ramdisk/test"                                         # STEP 47
ACTION: path2 = "/Volumes/ramdisk/test" 
path2 = '/Volumes/ramdisk/test/a/epsilon' : <type 'str'>
=> path2 = '/Volumes/ramdisk/test' : <type 'str'>
==================================================
fd1 = os0.open(path4, os.O_CREAT)                                       # STEP 48
ACTION: fd1 = os0.open(path4, os.O_CREAT) 
os0 = <pyfakefs.fake_filesystem.FakeOsModule object at 0x103853210> : <class 'pyfakefs.fake_filesystem.FakeOsModule'>
path4 = '/Volumes/ramdisk/test/omega' : <type 'str'>
fd1 = None : <type 'NoneType'>
os_REF0 = <module 'os' from '/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/os.pyc'> : <type 'module'>
fd_REF1 = None : <type 'NoneType'>
RAISED EXCEPTION: <type 'exceptions.TypeError'> an integer is required
ERROR: (<type 'exceptions.TypeError'>, TypeError('an integer is required',), <traceback object at 0x104a15680>)
TRACEBACK:
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 48329, in safely
    act[2]()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 16783, in act370
    self.p_fd[1] = self.p_os[0].open(self.p_path[4], os.O_CREAT)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 3316, in open
    self.chmod(file_path, mode)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 3730, in chmod
    self.filesystem.ChangeMode(path, mode, follow_symlinks)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1096, in ChangeMode
    file_object = self.ResolveObject(path, follow_symlinks, allow_fd=True)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1829, in ResolveObject
    return self.GetOpenFile(file_path).GetObject()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1209, in GetOpenFile
    raise TypeError('an integer is required')
STOPPING TESTING DUE TO FAILED TEST
0.0263268947601 TOTAL RUNTIME
1 EXECUTED
49 TOTAL TEST OPERATIONS
0.00169324874878 TIME SPENT EXECUTING TEST OPERATIONS
0.00431132316589 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
1.85966491699e-05 TIME SPENT CHECKING PROPERTIES
0.00171184539795 TOTAL TIME SPENT RUNNING SUT
0.00304293632507 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
