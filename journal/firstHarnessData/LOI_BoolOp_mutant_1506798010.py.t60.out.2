Random testing using config=Config(swarmSwitch=None, maxMustHitBranch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, internal=False, exploit=None, seed=None, generalize=False, fastQuickAnalysis=False, stopWhenNoCoverage=None, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, maxMustHitStatement=None, noCoverageExploit=False, quickTests=False, relax=False, startExploitStall=0, enumerateEnabled=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, biasLOC=None, progress=False, postCover=False, swarmLength=None, generateLOC=None, noSwarmDependencies=False, profile=False, LOCBaseline=0.2, noEnumerateEnabled=False, full=True, multiple=False, timedProgress=30, silentFail=False, ddmin=False, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.36368.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, markovP=1.0, logging=None, LOCProbs=False, stopWhenStatements=None, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.0, depth=200, trackMaxCoverage=None, throughput=False, noCover=True, timeout=60, stutter=None, uncaught=False, markov=None, showActions=False, startExploit=0.0)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.TypeError'>, TypeError("'FakeOsModule' object is not iterable",), <traceback object at 0x103bdfe18>)
TRACEBACK:
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 48329, in safely
    act[2]()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 66, in act0
    self.p_os[0] = newFakeOS()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 24, in newFakeOS
    fakeOS = pyfakefs.fake_filesystem.FakeOsModule(fs)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1717, in __init__
    self.path = FakePathModule(self.filesystem, self)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1464, in __init__
    self._os_path.os, self.os = os_module
Original test has 18 steps

SAVING TEST AS failure.36368.test
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
component1 = "alpha"                                                     # STEP 0
ACTION: component1 = "alpha" 
component1 = None : <type 'NoneType'>
=> component1 = 'alpha' : <type 'str'>
==================================================
component4 = "h"                                                         # STEP 1
ACTION: component4 = "h" 
component4 = None : <type 'NoneType'>
=> component4 = 'h' : <type 'str'>
==================================================
component0 = "alpha"                                                     # STEP 2
ACTION: component0 = "alpha" 
component0 = None : <type 'NoneType'>
=> component0 = 'alpha' : <type 'str'>
==================================================
component3 = "gamma"                                                     # STEP 3
ACTION: component3 = "gamma" 
component3 = None : <type 'NoneType'>
=> component3 = 'gamma' : <type 'str'>
==================================================
str0 = ""                                                                # STEP 4
ACTION: str0 = "" 
str0 = None : <type 'NoneType'>
=> str0 = '' : <type 'str'>
==================================================
str0 += 'o'                                                              # STEP 5
ACTION: str0 += 'o' 
str0 = '' : <type 'str'>
=> str0 = 'o' : <type 'str'>
==================================================
str0 += 'd'                                                              # STEP 6
ACTION: str0 += 'd' 
str0 = 'o' : <type 'str'>
=> str0 = 'od' : <type 'str'>
==================================================
str0 += 'z'                                                              # STEP 7
ACTION: str0 += 'z' 
str0 = 'od' : <type 'str'>
=> str0 = 'odz' : <type 'str'>
==================================================
str0 += 'h'                                                              # STEP 8
ACTION: str0 += 'h' 
str0 = 'odz' : <type 'str'>
=> str0 = 'odzh' : <type 'str'>
==================================================
component2 = "beta"                                                      # STEP 9
ACTION: component2 = "beta" 
component2 = None : <type 'NoneType'>
=> component2 = 'beta' : <type 'str'>
==================================================
str0 += 'u'                                                             # STEP 10
ACTION: str0 += 'u' 
str0 = 'odzh' : <type 'str'>
=> str0 = 'odzhu' : <type 'str'>
==================================================
str0 += 'e'                                                             # STEP 11
ACTION: str0 += 'e' 
str0 = 'odzhu' : <type 'str'>
=> str0 = 'odzhue' : <type 'str'>
==================================================
str0 += 'h'                                                             # STEP 12
ACTION: str0 += 'h' 
str0 = 'odzhue' : <type 'str'>
=> str0 = 'odzhueh' : <type 'str'>
==================================================
str0 += 'z'                                                             # STEP 13
ACTION: str0 += 'z' 
str0 = 'odzhueh' : <type 'str'>
=> str0 = 'odzhuehz' : <type 'str'>
==================================================
str0 += 'o'                                                             # STEP 14
ACTION: str0 += 'o' 
str0 = 'odzhuehz' : <type 'str'>
=> str0 = 'odzhuehzo' : <type 'str'>
==================================================
str0 = ""                                                               # STEP 15
ACTION: str0 = "" 
str0 = 'odzhuehzo' : <type 'str'>
=> str0 = '' : <type 'str'>
==================================================
str0 += 'u'                                                             # STEP 16
ACTION: str0 += 'u' 
str0 = '' : <type 'str'>
=> str0 = 'u' : <type 'str'>
==================================================
os0 = newFakeOS()                                                       # STEP 17
ACTION: os0 = newFakeOS() 
os0 = None : <type 'NoneType'>
os_REF0 = None : <type 'NoneType'>
RAISED EXCEPTION: <type 'exceptions.TypeError'> 'FakeOsModule' object is not iterable
ERROR: (<type 'exceptions.TypeError'>, TypeError("'FakeOsModule' object is not iterable",), <traceback object at 0x1042c5e60>)
TRACEBACK:
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 48329, in safely
    act[2]()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 66, in act0
    self.p_os[0] = newFakeOS()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 24, in newFakeOS
    fakeOS = pyfakefs.fake_filesystem.FakeOsModule(fs)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1717, in __init__
    self.path = FakePathModule(self.filesystem, self)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 1464, in __init__
    self._os_path.os, self.os = os_module
STOPPING TESTING DUE TO FAILED TEST
0.0230541229248 TOTAL RUNTIME
1 EXECUTED
18 TOTAL TEST OPERATIONS
0.00091814994812 TIME SPENT EXECUTING TEST OPERATIONS
0.00143480300903 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
7.86781311035e-06 TIME SPENT CHECKING PROPERTIES
0.00092601776123 TOTAL TIME SPENT RUNNING SUT
0.00376987457275 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
