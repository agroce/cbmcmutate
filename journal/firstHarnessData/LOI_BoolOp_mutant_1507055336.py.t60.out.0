Random testing using config=Config(swarmSwitch=None, maxMustHitBranch=None, verbose=False, reducePool=False, failedLogging=None, exploitBestHint=1, greedyStutter=False, internal=False, exploit=None, seed=None, generalize=False, fastQuickAnalysis=False, stopWhenNoCoverage=None, useHints=False, localize=False, total=False, speed='FAST', probs=None, normalize=False, verboseExploit=False, highLowSwarm=None, replayable=False, essentials=False, maxMustHitStatement=None, noCoverageExploit=False, quickTests=False, relax=False, startExploitStall=0, enumerateEnabled=False, uniqueValuesAnalysis=False, swarm=False, noReassign=False, html=None, stopWhenHitStatement=None, biasLOC=None, progress=False, postCover=False, swarmLength=None, generateLOC=None, noSwarmDependencies=False, profile=False, LOCBaseline=0.2, noEnumerateEnabled=False, full=True, multiple=False, timedProgress=30, silentFail=False, ddmin=False, swarmP=0.5, stopWhenBranches=None, noAlphaConvert=False, coverFile='coverage.out', readQuick=False, verboseActions=False, running=False, computeFeatureStats=False, compareFails=False, swarmProbs=None, output='failure.48390.test', genDepth=None, Pcrossover=0.2, quickAnalysis=False, keepLast=False, exploitCeiling=0.1, markovP=1.0, logging=None, stopWhenHitBranch=None, LOCProbs=False, stopWhenStatements=None, noCheck=False, maxTests=-1, noExceptionMatch=False, Pmutate=0.0, depth=200, trackMaxCoverage=None, throughput=False, noCover=True, timeout=60, stutter=None, uncaught=False, markov=None, showActions=False, startExploit=0.0)
UNCAUGHT EXCEPTION
ERROR: (<type 'exceptions.TypeError'>, TypeError('str() takes at most 1 argument (3 given)',), <traceback object at 0x102a44638>)
TRACEBACK:
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 48329, in safely
    act[2]()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 66, in act0
    self.p_os[0] = newFakeOS()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 17, in newFakeOS
    fs = pyfakefs.fake_filesystem.FakeFilesystem()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 863, in __init__
    self.root = FakeDirectory(self.path_separator, filesystem=self)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 649, in __init__
    FakeFile.__init__(self, name, (stat.S_IFDIR | perm_bits), {}, filesystem=filesystem)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 368, in __init__
    self._byte_contents = self._encode_contents(contents)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 440, in _encode_contents
    contents = bytes(contents, (self.encoding or locale.getpreferredencoding(False)), self.errors)
Original test has 43 steps

SAVING TEST AS failure.48390.test
FINAL VERSION OF TEST, WITH LOGGED REPLAY:
bytes3 = 0                                                               # STEP 0
ACTION: bytes3 = 0 
bytes3 = None : <type 'NoneType'>
=> bytes3 = 0 : <type 'int'>
==================================================
component4 = "c"                                                         # STEP 1
ACTION: component4 = "c" 
component4 = None : <type 'NoneType'>
=> component4 = 'c' : <type 'str'>
==================================================
component0 = "d"                                                         # STEP 2
ACTION: component0 = "d" 
component0 = None : <type 'NoneType'>
=> component0 = 'd' : <type 'str'>
==================================================
component2 = "h"                                                         # STEP 3
ACTION: component2 = "h" 
component2 = None : <type 'NoneType'>
=> component2 = 'h' : <type 'str'>
==================================================
path1 = "/Volumes/ramdisk/test"                                          # STEP 4
ACTION: path1 = "/Volumes/ramdisk/test" 
path1 = None : <type 'NoneType'>
=> path1 = '/Volumes/ramdisk/test' : <type 'str'>
==================================================
str1 = ""                                                                # STEP 5
ACTION: str1 = "" 
str1 = None : <type 'NoneType'>
=> str1 = '' : <type 'str'>
==================================================
path0 = "/Volumes/ramdisk/test"                                          # STEP 6
ACTION: path0 = "/Volumes/ramdisk/test" 
path0 = None : <type 'NoneType'>
=> path0 = '/Volumes/ramdisk/test' : <type 'str'>
==================================================
str1 += 'x'                                                              # STEP 7
ACTION: str1 += 'x' 
str1 = '' : <type 'str'>
=> str1 = 'x' : <type 'str'>
==================================================
str1 += 'q'                                                              # STEP 8
ACTION: str1 += 'q' 
str1 = 'x' : <type 'str'>
=> str1 = 'xq' : <type 'str'>
==================================================
str1 += 'o'                                                              # STEP 9
ACTION: str1 += 'o' 
str1 = 'xq' : <type 'str'>
=> str1 = 'xqo' : <type 'str'>
==================================================
component3 = "e"                                                        # STEP 10
ACTION: component3 = "e" 
component3 = None : <type 'NoneType'>
=> component3 = 'e' : <type 'str'>
==================================================
str1 += 'o'                                                             # STEP 11
ACTION: str1 += 'o' 
str1 = 'xqo' : <type 'str'>
=> str1 = 'xqoo' : <type 'str'>
==================================================
path0 += "/" + component4                                               # STEP 12
ACTION: path0 += "/" + component4 
component4 = 'c' : <type 'str'>
path0 = '/Volumes/ramdisk/test' : <type 'str'>
=> path0 = '/Volumes/ramdisk/test/c' : <type 'str'>
==================================================
component4 = "a"                                                        # STEP 13
ACTION: component4 = "a" 
component4 = 'c' : <type 'str'>
=> component4 = 'a' : <type 'str'>
==================================================
component1 = "e"                                                        # STEP 14
ACTION: component1 = "e" 
component1 = None : <type 'NoneType'>
=> component1 = 'e' : <type 'str'>
==================================================
bytes4 = 0                                                              # STEP 15
ACTION: bytes4 = 0 
bytes4 = None : <type 'NoneType'>
=> bytes4 = 0 : <type 'int'>
==================================================
str1 += 'o'                                                             # STEP 16
ACTION: str1 += 'o' 
str1 = 'xqoo' : <type 'str'>
=> str1 = 'xqooo' : <type 'str'>
==================================================
str1 += 'f'                                                             # STEP 17
ACTION: str1 += 'f' 
str1 = 'xqooo' : <type 'str'>
=> str1 = 'xqooof' : <type 'str'>
==================================================
str1 += 'i'                                                             # STEP 18
ACTION: str1 += 'i' 
str1 = 'xqooof' : <type 'str'>
=> str1 = 'xqooofi' : <type 'str'>
==================================================
path3 = "/Volumes/ramdisk/test"                                         # STEP 19
ACTION: path3 = "/Volumes/ramdisk/test" 
path3 = None : <type 'NoneType'>
=> path3 = '/Volumes/ramdisk/test' : <type 'str'>
==================================================
bytes0 = 0                                                              # STEP 20
ACTION: bytes0 = 0 
bytes0 = None : <type 'NoneType'>
=> bytes0 = 0 : <type 'int'>
==================================================
path3 += "/" + component3                                               # STEP 21
ACTION: path3 += "/" + component3 
component3 = 'e' : <type 'str'>
path3 = '/Volumes/ramdisk/test' : <type 'str'>
=> path3 = '/Volumes/ramdisk/test/e' : <type 'str'>
==================================================
component3 = "b"                                                        # STEP 22
ACTION: component3 = "b" 
component3 = 'e' : <type 'str'>
=> component3 = 'b' : <type 'str'>
==================================================
path3 += "/" + component0                                               # STEP 23
ACTION: path3 += "/" + component0 
component0 = 'd' : <type 'str'>
path3 = '/Volumes/ramdisk/test/e' : <type 'str'>
=> path3 = '/Volumes/ramdisk/test/e/d' : <type 'str'>
==================================================
path3 += "/" + component2                                               # STEP 24
ACTION: path3 += "/" + component2 
component2 = 'h' : <type 'str'>
path3 = '/Volumes/ramdisk/test/e/d' : <type 'str'>
=> path3 = '/Volumes/ramdisk/test/e/d/h' : <type 'str'>
==================================================
path1 += "/" + component4                                               # STEP 25
ACTION: path1 += "/" + component4 
component4 = 'a' : <type 'str'>
path1 = '/Volumes/ramdisk/test' : <type 'str'>
=> path1 = '/Volumes/ramdisk/test/a' : <type 'str'>
==================================================
str1 += 's'                                                             # STEP 26
ACTION: str1 += 's' 
str1 = 'xqooofi' : <type 'str'>
=> str1 = 'xqooofis' : <type 'str'>
==================================================
component0 = "d"                                                        # STEP 27
ACTION: component0 = "d" 
component0 = 'd' : <type 'str'>
==================================================
path3 += "/" + component2                                               # STEP 28
ACTION: path3 += "/" + component2 
component2 = 'h' : <type 'str'>
path3 = '/Volumes/ramdisk/test/e/d/h' : <type 'str'>
=> path3 = '/Volumes/ramdisk/test/e/d/h/h' : <type 'str'>
==================================================
path3 = "/Volumes/ramdisk/test"                                         # STEP 29
ACTION: path3 = "/Volumes/ramdisk/test" 
path3 = '/Volumes/ramdisk/test/e/d/h/h' : <type 'str'>
=> path3 = '/Volumes/ramdisk/test' : <type 'str'>
==================================================
str1 += 'o'                                                             # STEP 30
ACTION: str1 += 'o' 
str1 = 'xqooofis' : <type 'str'>
=> str1 = 'xqooofiso' : <type 'str'>
==================================================
component4 = "beta"                                                     # STEP 31
ACTION: component4 = "beta" 
component4 = 'a' : <type 'str'>
=> component4 = 'beta' : <type 'str'>
==================================================
bytes1 = 0                                                              # STEP 32
ACTION: bytes1 = 0 
bytes1 = None : <type 'NoneType'>
=> bytes1 = 0 : <type 'int'>
==================================================
str1 += 'w'                                                             # STEP 33
ACTION: str1 += 'w' 
str1 = 'xqooofiso' : <type 'str'>
=> str1 = 'xqooofisow' : <type 'str'>
==================================================
component2 = "g"                                                        # STEP 34
ACTION: component2 = "g" 
component2 = 'h' : <type 'str'>
=> component2 = 'g' : <type 'str'>
==================================================
str1 += 'r'                                                             # STEP 35
ACTION: str1 += 'r' 
str1 = 'xqooofisow' : <type 'str'>
=> str1 = 'xqooofisowr' : <type 'str'>
==================================================
str1 += 'z'                                                             # STEP 36
ACTION: str1 += 'z' 
str1 = 'xqooofisowr' : <type 'str'>
=> str1 = 'xqooofisowrz' : <type 'str'>
==================================================
path3 += "/" + component0                                               # STEP 37
ACTION: path3 += "/" + component0 
component0 = 'd' : <type 'str'>
path3 = '/Volumes/ramdisk/test' : <type 'str'>
=> path3 = '/Volumes/ramdisk/test/d' : <type 'str'>
==================================================
path3 += "/" + component4                                               # STEP 38
ACTION: path3 += "/" + component4 
component4 = 'beta' : <type 'str'>
path3 = '/Volumes/ramdisk/test/d' : <type 'str'>
=> path3 = '/Volumes/ramdisk/test/d/beta' : <type 'str'>
==================================================
component4 = "d"                                                        # STEP 39
ACTION: component4 = "d" 
component4 = 'beta' : <type 'str'>
=> component4 = 'd' : <type 'str'>
==================================================
str1 += 'p'                                                             # STEP 40
ACTION: str1 += 'p' 
str1 = 'xqooofisowrz' : <type 'str'>
=> str1 = 'xqooofisowrzp' : <type 'str'>
==================================================
path3 += "/" + component0                                               # STEP 41
ACTION: path3 += "/" + component0 
component0 = 'd' : <type 'str'>
path3 = '/Volumes/ramdisk/test/d/beta' : <type 'str'>
=> path3 = '/Volumes/ramdisk/test/d/beta/d' : <type 'str'>
==================================================
os0 = newFakeOS()                                                       # STEP 42
ACTION: os0 = newFakeOS() 
os0 = None : <type 'NoneType'>
os_REF0 = None : <type 'NoneType'>
RAISED EXCEPTION: <type 'exceptions.TypeError'> str() takes at most 1 argument (3 given)
ERROR: (<type 'exceptions.TypeError'>, TypeError('str() takes at most 1 argument (3 given)',), <traceback object at 0x1005aa2d8>)
TRACEBACK:
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 48329, in safely
    act[2]()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 66, in act0
    self.p_os[0] = newFakeOS()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/sut.py", line 17, in newFakeOS
    fs = pyfakefs.fake_filesystem.FakeFilesystem()
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 863, in __init__
    self.root = FakeDirectory(self.path_separator, filesystem=self)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 649, in __init__
    FakeFile.__init__(self, name, (stat.S_IFDIR | perm_bits), {}, filesystem=filesystem)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 368, in __init__
    self._byte_contents = self._encode_contents(contents)
  File "/Users/alex/tstl/examples/mutateProbe/pyfakefs/pyfakefs/fake_filesystem.py", line 440, in _encode_contents
    contents = bytes(contents, (self.encoding or locale.getpreferredencoding(False)), self.errors)
STOPPING TESTING DUE TO FAILED TEST
0.0215060710907 TOTAL RUNTIME
1 EXECUTED
43 TOTAL TEST OPERATIONS
0.000689506530762 TIME SPENT EXECUTING TEST OPERATIONS
0.00298595428467 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS
1.71661376953e-05 TIME SPENT CHECKING PROPERTIES
0.000706672668457 TOTAL TIME SPENT RUNNING SUT
0.00362610816956 TIME SPENT RESTARTING
0.0 TIME SPENT REDUCING TEST CASES
