It is not surprising that there should be a correspondence between the ideas of Popper and the effort to verify and test software systems.  Popper is clear that his approach is meant as an answer to all the fundamental problems of epistemology.  Even such highly practical popular guides to software testing as the well-known book of Kaner, Bach, and Pettichord \cite{kaner} argue that software testing is essentially an epistemological discipline.

Everything here is about falsification:  a test, ideally, and a counterexample, by definition, falsifies the claim a program satisfies a specification.  But a surviving non-equivalent, mutant can falsify the claim that a specification or test harness or test suite is sufficiently falsifiable and constraining to be of use, and let us further refine our effort.  Only repeated, serious effort to falsify all that can be falsified can bring us to (still provisional) confidence.

P 19 "the more they prohibit the more they say"
Laws = Specs/harnesses
Line between spec and method not so important; sum of what is prohibited is shared, and most critical.