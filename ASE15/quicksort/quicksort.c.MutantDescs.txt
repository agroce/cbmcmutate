4: /* MUTANT (del_stmt) */ /*     int i, j, p, t; */ 
5: /* MUTANT (rep_op) */    if (n <= 2)
5: /* MUTANT (rep_op) */    if (n > 2)
5: /* MUTANT (rep_op) */    if (n >= 2)
5: /* MUTANT (rep_op) */    if (n == 2)
5: /* MUTANT (rep_op) */    if (n != 2)
5: /* MUTANT (rep_const) */    if (n < 0)
5: /* MUTANT (rep_const) */    if (n < 1)
5: /* MUTANT (rep_const) */    if (n < -1)
5: /* MUTANT (rep_const) */    if (n < ((2)+1))
5: /* MUTANT (rep_const) */    if (n < ((2)-1))
5: /* MUTANT (negate) */    if(! (n < 2))
7: /* MUTANT (del_stmt) */ /*     p = a[n / 2]; */ 
7: /* MUTANT (rep_const) */    p = a[n / 0];
7: /* MUTANT (rep_const) */    p = a[n / 1];
7: /* MUTANT (rep_const) */    p = a[n / -1];
7: /* MUTANT (rep_const) */    p = a[n / ((2)+1)];
7: /* MUTANT (rep_const) */    p = a[n / ((2)-1)];
8: /* MUTANT (rep_op) */    for (i = 0, j = n - 1;; i--, j--) {
8: /* MUTANT (rep_op) */    for (i = 0, j = n - 1;; i++, j++) {
8: /* MUTANT (rep_const) */    for (i = 1, j = n - 1;; i++, j--) {
8: /* MUTANT (rep_const) */    for (i = -1, j = n - 1;; i++, j--) {
8: /* MUTANT (rep_const) */    for (i = 0, j = n - 0;; i++, j--) {
8: /* MUTANT (rep_const) */    for (i = 0, j = n - -1;; i++, j--) {
8: /* MUTANT (rep_const) */    for (i = 0, j = n - ((1)+1);; i++, j--) {
9: /* MUTANT (rep_op) */        while (a[i] <= p)
9: /* MUTANT (rep_op) */        while (a[i] > p)
9: /* MUTANT (rep_op) */        while (a[i] >= p)
9: /* MUTANT (rep_op) */        while (a[i] == p)
9: /* MUTANT (rep_op) */        while (a[i] != p)
9: /* MUTANT (negate) */        while(! (a[i] < p))
10: /* MUTANT (rep_op) */            i--;
11: /* MUTANT (rep_op) */        while (p <= a[j])
11: /* MUTANT (rep_op) */        while (p > a[j])
11: /* MUTANT (rep_op) */        while (p >= a[j])
11: /* MUTANT (rep_op) */        while (p == a[j])
11: /* MUTANT (rep_op) */        while (p != a[j])
11: /* MUTANT (negate) */        while(! (p < a[j]))
12: /* MUTANT (rep_op) */            j++;
13: /* MUTANT (rep_op) */        if (i <= j)
13: /* MUTANT (rep_op) */        if (i < j)
13: /* MUTANT (rep_op) */        if (i > j)
13: /* MUTANT (rep_op) */        if (i == j)
13: /* MUTANT (rep_op) */        if (i != j)
13: /* MUTANT (negate) */        if(! (i >= j))
15: /* MUTANT (del_stmt) */ /*         t = a[i]; */ 
16: /* MUTANT (del_stmt) */ /*         a[i] = a[j]; */ 
17: /* MUTANT (del_stmt) */ /*         a[j] = t; */ 
20: /* MUTANT (del_stmt) */ /*     quick_sort(a + i, n - i); */ 
20: /* MUTANT (rep_op) */    quick_sort(a - i, n - i);
20: /* MUTANT (rep_op) */    quick_sort(a * i, n - i);
20: /* MUTANT (rep_op) */    quick_sort(a % i, n - i);
