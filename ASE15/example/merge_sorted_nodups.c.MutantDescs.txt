4: /* MUTANT (del_stmt) */ /*   int apos = 0, bpos = 0, cpos = -1, csize = 0; */ 
4: /* MUTANT (rep_const) */  int apos = 1, bpos = 0, cpos = -1, csize = 0;
4: /* MUTANT (rep_const) */  int apos = -1, bpos = 0, cpos = -1, csize = 0;
4: /* MUTANT (rep_const) */  int apos = 0, bpos = 1, cpos = -1, csize = 0;
4: /* MUTANT (rep_const) */  int apos = 0, bpos = -1, cpos = -1, csize = 0;
4: /* MUTANT (rep_const) */  int apos = 0, bpos = 0, cpos = 0, csize = 0;
4: /* MUTANT (rep_const) */  int apos = 0, bpos = 0, cpos = 1, csize = 0;
4: /* MUTANT (rep_const) */  int apos = 0, bpos = 0, cpos = ((-1)+1), csize = 0;
4: /* MUTANT (rep_const) */  int apos = 0, bpos = 0, cpos = ((-1)-1), csize = 0;
4: /* MUTANT (rep_const) */  int apos = 0, bpos = 0, cpos = -1, csize = 1;
4: /* MUTANT (rep_const) */  int apos = 0, bpos = 0, cpos = -1, csize = -1;
5: /* MUTANT (rep_op) */  while ((apos <= asize) || (bpos < bsize)) {
5: /* MUTANT (rep_op) */  while ((apos > asize) || (bpos < bsize)) {
5: /* MUTANT (rep_op) */  while ((apos >= asize) || (bpos < bsize)) {
5: /* MUTANT (rep_op) */  while ((apos == asize) || (bpos < bsize)) {
5: /* MUTANT (rep_op) */  while ((apos != asize) || (bpos < bsize)) {
5: /* MUTANT (rep_op) */  while ((apos < asize) && (bpos < bsize)) {
5: /* MUTANT (rep_op) */  while ((apos < asize) || (bpos <= bsize)) {
5: /* MUTANT (rep_op) */  while ((apos < asize) || (bpos > bsize)) {
5: /* MUTANT (rep_op) */  while ((apos < asize) || (bpos >= bsize)) {
5: /* MUTANT (rep_op) */  while ((apos < asize) || (bpos == bsize)) {
5: /* MUTANT (rep_op) */  while ((apos < asize) || (bpos != bsize)) {
5: /* MUTANT (negate) */  while(! ((apos < asize) || (bpos < bsize))) {
6: /* MUTANT (rep_op) */    if ((apos <= asize) && ((bpos >= bsize) || (a[apos] < b[bpos]))) {
6: /* MUTANT (rep_op) */    if ((apos > asize) && ((bpos >= bsize) || (a[apos] < b[bpos]))) {
6: /* MUTANT (rep_op) */    if ((apos >= asize) && ((bpos >= bsize) || (a[apos] < b[bpos]))) {
6: /* MUTANT (rep_op) */    if ((apos == asize) && ((bpos >= bsize) || (a[apos] < b[bpos]))) {
6: /* MUTANT (rep_op) */    if ((apos != asize) && ((bpos >= bsize) || (a[apos] < b[bpos]))) {
6: /* MUTANT (rep_op) */    if ((apos < asize) || ((bpos >= bsize) || (a[apos] < b[bpos]))) {
6: /* MUTANT (rep_op) */    if ((apos < asize) && ((bpos <= bsize) || (a[apos] < b[bpos]))) {
6: /* MUTANT (rep_op) */    if ((apos < asize) && ((bpos < bsize) || (a[apos] < b[bpos]))) {
6: /* MUTANT (rep_op) */    if ((apos < asize) && ((bpos > bsize) || (a[apos] < b[bpos]))) {
6: /* MUTANT (rep_op) */    if ((apos < asize) && ((bpos == bsize) || (a[apos] < b[bpos]))) {
6: /* MUTANT (rep_op) */    if ((apos < asize) && ((bpos != bsize) || (a[apos] < b[bpos]))) {
6: /* MUTANT (rep_op) */    if ((apos < asize) && ((bpos >= bsize) && (a[apos] < b[bpos]))) {
6: /* MUTANT (rep_op) */    if ((apos < asize) && ((bpos >= bsize) || (a[apos] <= b[bpos]))) {
6: /* MUTANT (rep_op) */    if ((apos < asize) && ((bpos >= bsize) || (a[apos] > b[bpos]))) {
6: /* MUTANT (rep_op) */    if ((apos < asize) && ((bpos >= bsize) || (a[apos] >= b[bpos]))) {
6: /* MUTANT (rep_op) */    if ((apos < asize) && ((bpos >= bsize) || (a[apos] == b[bpos]))) {
6: /* MUTANT (rep_op) */    if ((apos < asize) && ((bpos >= bsize) || (a[apos] != b[bpos]))) {
6: /* MUTANT (negate) */    if(! ((apos < asize) && ((bpos >= bsize) || (a[apos] < b[bpos])))) {
7: /* MUTANT (rep_op) */      if ((cpos != -1) || (c[cpos] != a[apos])) {
7: /* MUTANT (rep_op) */      if ((cpos == -1) && (c[cpos] != a[apos])) {
7: /* MUTANT (rep_op) */      if ((cpos == -1) || (c[cpos] == a[apos])) {
7: /* MUTANT (rep_const) */      if ((cpos == 0) || (c[cpos] != a[apos])) {
7: /* MUTANT (rep_const) */      if ((cpos == 1) || (c[cpos] != a[apos])) {
7: /* MUTANT (rep_const) */      if ((cpos == ((-1)+1)) || (c[cpos] != a[apos])) {
7: /* MUTANT (rep_const) */      if ((cpos == ((-1)-1)) || (c[cpos] != a[apos])) {
7: /* MUTANT (negate) */      if(! ((cpos == -1) || (c[cpos] != a[apos]))) {
8: /* MUTANT (del_stmt) */ /* 	c[++cpos] = a[apos]; */ 
8: /* MUTANT (rep_op) */	c[--cpos] = a[apos];
9: /* MUTANT (del_stmt) */ /* 	csize++; */ 
9: /* MUTANT (rep_op) */	csize--;
11: /* MUTANT (rep_op) */      apos--;
13: /* MUTANT (rep_op) */      if ((cpos != -1) || (c[cpos] != b[bpos])) {
13: /* MUTANT (rep_op) */      if ((cpos == -1) && (c[cpos] != b[bpos])) {
13: /* MUTANT (rep_op) */      if ((cpos == -1) || (c[cpos] == b[bpos])) {
13: /* MUTANT (rep_const) */      if ((cpos == 0) || (c[cpos] != b[bpos])) {
13: /* MUTANT (rep_const) */      if ((cpos == 1) || (c[cpos] != b[bpos])) {
13: /* MUTANT (rep_const) */      if ((cpos == ((-1)+1)) || (c[cpos] != b[bpos])) {
13: /* MUTANT (rep_const) */      if ((cpos == ((-1)-1)) || (c[cpos] != b[bpos])) {
13: /* MUTANT (negate) */      if(! ((cpos == -1) || (c[cpos] != b[bpos]))) {
14: /* MUTANT (del_stmt) */ /* 	c[++cpos] = b[bpos]; */ 
14: /* MUTANT (rep_op) */	c[--cpos] = b[bpos];
15: /* MUTANT (del_stmt) */ /* 	csize++; */ 
15: /* MUTANT (rep_op) */	csize--;
17: /* MUTANT (rep_op) */      bpos--;      
