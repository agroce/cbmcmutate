46: /* MUTANT (del_stmt) */ /* static void __rcu_process_callbacks(struct rcu_ctrlblk *rcp); */ 
47: /* MUTANT (del_stmt) */ /* static void rcu_process_callbacks(struct softirq_action *unused); */ 
52: /* MUTANT (del_stmt) */ /* static long long rcu_dynticks_nesting = DYNTICK_TASK_EXIT_IDLE; */ 
59: /* MUTANT (negate) */	if(! (newval)) {
62: /* MUTANT (del_stmt) */ /* 		rcu_dynticks_nesting = newval; */ 
63: /* MUTANT (del_stmt) */ /* 		return; */ 
67: /* MUTANT (rep_op) */	if (IS_ENABLED(CONFIG_RCU_TRACE) || !is_idle_task(current)) {
67: /* MUTANT (negate) */	if(! (IS_ENABLED(CONFIG_RCU_TRACE) && !is_idle_task(current))) {
68: /* MUTANT (del_stmt) */ /* 		struct task_struct *idle __maybe_unused = idle_task(smp_processor_id()); */ 
72: /* MUTANT (del_stmt) */ /* 		ftrace_dump(DUMP_ALL); */ 
73: /* MUTANT (rep_const) */		WARN_ONCE(0, "Current pid: %d comm: %s / Idle pid: %d comm: %s",
73: /* MUTANT (rep_const) */		WARN_ONCE(-1, "Current pid: %d comm: %s / Idle pid: %d comm: %s",
73: /* MUTANT (rep_const) */		WARN_ONCE(((1)+1), "Current pid: %d comm: %s / Idle pid: %d comm: %s",
78: /* MUTANT (del_stmt) */ /* 	barrier(); */ 
79: /* MUTANT (del_stmt) */ /* 	rcu_dynticks_nesting = newval; */ 
88: /* MUTANT (del_stmt) */ /* 	unsigned long flags; */ 
89: /* MUTANT (del_stmt) */ /* 	long long newval; */ 
91: /* MUTANT (del_stmt) */ /* 	local_irq_save(flags); */ 
92: /* MUTANT (del_stmt) */ /* 	WARN_ON_ONCE((rcu_dynticks_nesting & DYNTICK_TASK_NEST_MASK) == 0); */ 
92: /* MUTANT (rep_op) */	WARN_ON_ONCE((rcu_dynticks_nesting & DYNTICK_TASK_NEST_MASK) != 0);
92: /* MUTANT (rep_const) */	WARN_ON_ONCE((rcu_dynticks_nesting & DYNTICK_TASK_NEST_MASK) == 1);
92: /* MUTANT (rep_const) */	WARN_ON_ONCE((rcu_dynticks_nesting & DYNTICK_TASK_NEST_MASK) == -1);
93: /* MUTANT (rep_op) */	if ((rcu_dynticks_nesting & DYNTICK_TASK_NEST_MASK) != DYNTICK_TASK_NEST_VALUE) {
93: /* MUTANT (negate) */	if(! ((rcu_dynticks_nesting & DYNTICK_TASK_NEST_MASK) == DYNTICK_TASK_NEST_VALUE)) {
94: /* MUTANT (del_stmt) */ /* 		newval = 0; */ 
94: /* MUTANT (rep_const) */		newval = 1;
94: /* MUTANT (rep_const) */		newval = -1;
97: /* MUTANT (del_stmt) */ /* 		newval = rcu_dynticks_nesting - DYNTICK_TASK_NEST_VALUE; */ 
100: /* MUTANT (del_stmt) */ /* 	local_irq_restore(flags); */ 
109: /* MUTANT (del_stmt) */ /* 	unsigned long flags; */ 
110: /* MUTANT (del_stmt) */ /* 	long long newval; */ 
112: /* MUTANT (del_stmt) */ /* 	local_irq_save(flags); */ 
113: /* MUTANT (del_stmt) */ /* 	newval = rcu_dynticks_nesting - 1; */ 
113: /* MUTANT (rep_const) */	newval = rcu_dynticks_nesting - 0;
113: /* MUTANT (rep_const) */	newval = rcu_dynticks_nesting - -1;
113: /* MUTANT (rep_const) */	newval = rcu_dynticks_nesting - ((1)+1);
114: /* MUTANT (del_stmt) */ /* 	WARN_ON_ONCE(newval < 0); */ 
114: /* MUTANT (rep_op) */	WARN_ON_ONCE(newval <= 0);
114: /* MUTANT (rep_op) */	WARN_ON_ONCE(newval > 0);
114: /* MUTANT (rep_op) */	WARN_ON_ONCE(newval >= 0);
114: /* MUTANT (rep_op) */	WARN_ON_ONCE(newval == 0);
114: /* MUTANT (rep_op) */	WARN_ON_ONCE(newval != 0);
114: /* MUTANT (rep_const) */	WARN_ON_ONCE(newval < 1);
114: /* MUTANT (rep_const) */	WARN_ON_ONCE(newval < -1);
115: /* MUTANT (del_stmt) */ /* 	rcu_idle_enter_common(newval); */ 
116: /* MUTANT (del_stmt) */ /* 	local_irq_restore(flags); */ 
123: /* MUTANT (negate) */	if(! (oldval)) {
126: /* MUTANT (del_stmt) */ /* 		return; */ 
129: /* MUTANT (rep_op) */	if (IS_ENABLED(CONFIG_RCU_TRACE) || !is_idle_task(current)) {
129: /* MUTANT (negate) */	if(! (IS_ENABLED(CONFIG_RCU_TRACE) && !is_idle_task(current))) {
130: /* MUTANT (del_stmt) */ /* 		struct task_struct *idle __maybe_unused = idle_task(smp_processor_id()); */ 
134: /* MUTANT (del_stmt) */ /* 		ftrace_dump(DUMP_ALL); */ 
135: /* MUTANT (rep_const) */		WARN_ONCE(0, "Current pid: %d comm: %s / Idle pid: %d comm: %s",
135: /* MUTANT (rep_const) */		WARN_ONCE(-1, "Current pid: %d comm: %s / Idle pid: %d comm: %s",
135: /* MUTANT (rep_const) */		WARN_ONCE(((1)+1), "Current pid: %d comm: %s / Idle pid: %d comm: %s",
146: /* MUTANT (del_stmt) */ /* 	unsigned long flags; */ 
147: /* MUTANT (del_stmt) */ /* 	long long oldval; */ 
149: /* MUTANT (del_stmt) */ /* 	local_irq_save(flags); */ 
150: /* MUTANT (del_stmt) */ /* 	oldval = rcu_dynticks_nesting; */ 
151: /* MUTANT (del_stmt) */ /* 	WARN_ON_ONCE(rcu_dynticks_nesting < 0); */ 
151: /* MUTANT (rep_op) */	WARN_ON_ONCE(rcu_dynticks_nesting <= 0);
151: /* MUTANT (rep_op) */	WARN_ON_ONCE(rcu_dynticks_nesting > 0);
151: /* MUTANT (rep_op) */	WARN_ON_ONCE(rcu_dynticks_nesting >= 0);
151: /* MUTANT (rep_op) */	WARN_ON_ONCE(rcu_dynticks_nesting == 0);
151: /* MUTANT (rep_op) */	WARN_ON_ONCE(rcu_dynticks_nesting != 0);
151: /* MUTANT (rep_const) */	WARN_ON_ONCE(rcu_dynticks_nesting < 1);
151: /* MUTANT (rep_const) */	WARN_ON_ONCE(rcu_dynticks_nesting < -1);
152: /* MUTANT (negate) */	if(! (rcu_dynticks_nesting & DYNTICK_TASK_NEST_MASK)) {
153: /* MUTANT (del_stmt) */ /* 		rcu_dynticks_nesting += DYNTICK_TASK_NEST_VALUE; */ 
153: /* MUTANT (rep_op) */		rcu_dynticks_nesting -= DYNTICK_TASK_NEST_VALUE;
153: /* MUTANT (rep_op) */		rcu_dynticks_nesting *= DYNTICK_TASK_NEST_VALUE;
153: /* MUTANT (rep_op) */		rcu_dynticks_nesting %= DYNTICK_TASK_NEST_VALUE;
156: /* MUTANT (del_stmt) */ /* 		rcu_dynticks_nesting = DYNTICK_TASK_EXIT_IDLE; */ 
159: /* MUTANT (del_stmt) */ /* 	local_irq_restore(flags); */ 
168: /* MUTANT (del_stmt) */ /* 	unsigned long flags; */ 
169: /* MUTANT (del_stmt) */ /* 	long long oldval; */ 
171: /* MUTANT (del_stmt) */ /* 	local_irq_save(flags); */ 
172: /* MUTANT (del_stmt) */ /* 	oldval = rcu_dynticks_nesting; */ 
173: /* MUTANT (del_stmt) */ /* 	rcu_dynticks_nesting++; */ 
173: /* MUTANT (rep_op) */	rcu_dynticks_nesting--;
174: /* MUTANT (del_stmt) */ /* 	WARN_ON_ONCE(rcu_dynticks_nesting == 0); */ 
174: /* MUTANT (rep_op) */	WARN_ON_ONCE(rcu_dynticks_nesting != 0);
174: /* MUTANT (rep_const) */	WARN_ON_ONCE(rcu_dynticks_nesting == 1);
174: /* MUTANT (rep_const) */	WARN_ON_ONCE(rcu_dynticks_nesting == -1);
175: /* MUTANT (del_stmt) */ /* 	rcu_idle_exit_common(oldval); */ 
176: /* MUTANT (del_stmt) */ /* 	local_irq_restore(flags); */ 
187: /* MUTANT (del_stmt) */ /* 	return rcu_dynticks_nesting; */ 
200: /* MUTANT (del_stmt) */ /* 	return rcu_dynticks_nesting <= 1; */ 
200: /* MUTANT (rep_op) */	return rcu_dynticks_nesting < 1;
200: /* MUTANT (rep_op) */	return rcu_dynticks_nesting > 1;
200: /* MUTANT (rep_op) */	return rcu_dynticks_nesting >= 1;
200: /* MUTANT (rep_op) */	return rcu_dynticks_nesting == 1;
200: /* MUTANT (rep_op) */	return rcu_dynticks_nesting != 1;
200: /* MUTANT (rep_const) */	return rcu_dynticks_nesting <= 0;
200: /* MUTANT (rep_const) */	return rcu_dynticks_nesting <= -1;
200: /* MUTANT (rep_const) */	return rcu_dynticks_nesting <= ((1)+1);
210: /* MUTANT (del_stmt) */ /* 	RCU_TRACE(reset_cpu_stall_ticks(rcp)); */ 
211: /* MUTANT (rep_op) */	if (rcp->rcucblist == NULL && rcp->donetail != rcp->curtail) {
211: /* MUTANT (rep_op) */	if (rcp->rcucblist != NULL || rcp->donetail != rcp->curtail) {
211: /* MUTANT (rep_op) */	if (rcp->rcucblist != NULL && rcp->donetail == rcp->curtail) {
211: /* MUTANT (negate) */	if(! (rcp->rcucblist != NULL && rcp->donetail != rcp->curtail)) {
212: /* MUTANT (del_stmt) */ /* 		rcp->donetail = rcp->curtail; */ 
213: /* MUTANT (del_stmt) */ /* 		return 1; */ 
213: /* MUTANT (rep_const) */		return 0;
213: /* MUTANT (rep_const) */		return -1;
213: /* MUTANT (rep_const) */		return ((1)+1);
216: /* MUTANT (rep_const) */	return 1;
216: /* MUTANT (rep_const) */	return -1;
226: /* MUTANT (del_stmt) */ /* 	unsigned long flags; */ 
228: /* MUTANT (del_stmt) */ /* 	local_irq_save(flags); */ 
229: /* MUTANT (rep_op) */	if (rcu_qsctr_help(&rcu_sched_ctrlblk) - rcu_qsctr_help(&rcu_bh_ctrlblk)) {
229: /* MUTANT (rep_op) */	if (rcu_qsctr_help(&rcu_sched_ctrlblk) * rcu_qsctr_help(&rcu_bh_ctrlblk)) {
229: /* MUTANT (rep_op) */	if (rcu_qsctr_help(&rcu_sched_ctrlblk) % rcu_qsctr_help(&rcu_bh_ctrlblk)) {
229: /* MUTANT (negate) */	if(! (rcu_qsctr_help(&rcu_sched_ctrlblk) + rcu_qsctr_help(&rcu_bh_ctrlblk))) {
230: /* MUTANT (del_stmt) */ /* 		raise_softirq(RCU_SOFTIRQ); */  
240: /* MUTANT (del_stmt) */ /* 	unsigned long flags; */ 
242: /* MUTANT (del_stmt) */ /* 	local_irq_save(flags); */ 
243: /* MUTANT (negate) */	if(! (rcu_qsctr_help(&rcu_bh_ctrlblk))) {
244: /* MUTANT (del_stmt) */ /* 		raise_softirq(RCU_SOFTIRQ); */ 
257: /* MUTANT (del_stmt) */ /* 	RCU_TRACE(check_cpu_stalls()); */ 
258: /* MUTANT (rep_op) */	if (user && rcu_is_cpu_rrupt_from_idle()) {
258: /* MUTANT (negate) */	if(! (user || rcu_is_cpu_rrupt_from_idle())) {
259: /* MUTANT (del_stmt) */ /* 		rcu_sched_qs(); */ 
261: /* MUTANT (negate) */	else if(! (!in_softirq())) {
262: /* MUTANT (del_stmt) */ /* 		rcu_bh_qs(); */ 
264: /* MUTANT (negate) */	if(! (user)) {
265: /* MUTANT (del_stmt) */ /* 		rcu_note_voluntary_context_switch(current); */ 
275: /* MUTANT (del_stmt) */ /* 	const char *rn = NULL; */ 
276: /* MUTANT (del_stmt) */ /* 	struct rcu_head *next, *list; */ 
277: /* MUTANT (del_stmt) */ /* 	unsigned long flags; */ 
278: /* MUTANT (del_stmt) */ /* 	RCU_TRACE(int cb_count = 0); */ 
278: /* MUTANT (rep_const) */	RCU_TRACE(int cb_count = 1);
278: /* MUTANT (rep_const) */	RCU_TRACE(int cb_count = -1);
281: /* MUTANT (rep_op) */	if (&rcp->rcucblist != rcp->donetail) {
281: /* MUTANT (negate) */	if(! (&rcp->rcucblist == rcp->donetail)) {
282: /* MUTANT (del_stmt) */ /* 		RCU_TRACE(trace_rcu_batch_start(rcp->name, 0, 0, -1)); */ 
282: /* MUTANT (rep_const) */		RCU_TRACE(trace_rcu_batch_start(rcp->name, 1, 0, -1));
282: /* MUTANT (rep_const) */		RCU_TRACE(trace_rcu_batch_start(rcp->name, -1, 0, -1));
282: /* MUTANT (rep_const) */		RCU_TRACE(trace_rcu_batch_start(rcp->name, 0, 1, -1));
282: /* MUTANT (rep_const) */		RCU_TRACE(trace_rcu_batch_start(rcp->name, 0, -1, -1));
282: /* MUTANT (rep_const) */		RCU_TRACE(trace_rcu_batch_start(rcp->name, 0, 0, 0));
282: /* MUTANT (rep_const) */		RCU_TRACE(trace_rcu_batch_start(rcp->name, 0, 0, 1));
282: /* MUTANT (rep_const) */		RCU_TRACE(trace_rcu_batch_start(rcp->name, 0, 0, ((-1)+1)));
282: /* MUTANT (rep_const) */		RCU_TRACE(trace_rcu_batch_start(rcp->name, 0, 0, ((-1)-1)));
283: /* MUTANT (rep_const) */		RCU_TRACE(trace_rcu_batch_end(rcp->name, 1,
283: /* MUTANT (rep_const) */		RCU_TRACE(trace_rcu_batch_end(rcp->name, -1,
288: /* MUTANT (del_stmt) */ /* 		return; */ 
293: /* MUTANT (del_stmt) */ /* 	RCU_TRACE(trace_rcu_batch_start(rcp->name, 0, rcp->qlen, -1)); */ 
293: /* MUTANT (rep_const) */	RCU_TRACE(trace_rcu_batch_start(rcp->name, 1, rcp->qlen, -1));
293: /* MUTANT (rep_const) */	RCU_TRACE(trace_rcu_batch_start(rcp->name, -1, rcp->qlen, -1));
293: /* MUTANT (rep_const) */	RCU_TRACE(trace_rcu_batch_start(rcp->name, 0, rcp->qlen, 0));
293: /* MUTANT (rep_const) */	RCU_TRACE(trace_rcu_batch_start(rcp->name, 0, rcp->qlen, 1));
293: /* MUTANT (rep_const) */	RCU_TRACE(trace_rcu_batch_start(rcp->name, 0, rcp->qlen, ((-1)+1)));
293: /* MUTANT (rep_const) */	RCU_TRACE(trace_rcu_batch_start(rcp->name, 0, rcp->qlen, ((-1)-1)));
294: /* MUTANT (del_stmt) */ /* 	list = rcp->rcucblist; */ 
295: /* MUTANT (del_stmt) */ /* 	rcp->rcucblist = *rcp->donetail; */ 
296: /* MUTANT (del_stmt) */ /* 	*rcp->donetail = NULL; */ 
297: /* MUTANT (rep_op) */	if (rcp->curtail != rcp->donetail) {
297: /* MUTANT (negate) */	if(! (rcp->curtail == rcp->donetail)) {
298: /* MUTANT (del_stmt) */ /* 		rcp->curtail = &rcp->rcucblist; */ 
301: /* MUTANT (del_stmt) */ /* 	local_irq_restore(flags); */ 
304: /* MUTANT (del_stmt) */ /* 	RCU_TRACE(rn = rcp->name); */ 
305: /* MUTANT (negate) */	while(! (list)) {
306: /* MUTANT (del_stmt) */ /* 		next = list->next; */ 
307: /* MUTANT (del_stmt) */ /* 		prefetch(next); */ 
308: /* MUTANT (del_stmt) */ /* 		debug_rcu_head_unqueue(list); */ 
309: /* MUTANT (del_stmt) */ /* 		local_bh_disable(); */ 
310: /* MUTANT (del_stmt) */ /* 		__rcu_reclaim(rn, list); */ 
311: /* MUTANT (del_stmt) */ /* 		local_bh_enable(); */ 
312: /* MUTANT (del_stmt) */ /* 		list = next; */ 
313: /* MUTANT (del_stmt) */ /* 		RCU_TRACE(cb_count++); */ 
313: /* MUTANT (rep_op) */		RCU_TRACE(cb_count--);
317: /* MUTANT (rep_const) */cb_count, 1, need_resched(),
317: /* MUTANT (rep_const) */cb_count, -1, need_resched(),
324: /* MUTANT (del_stmt) */ /* 	__rcu_process_callbacks(&rcu_sched_ctrlblk); */ 
325: /* MUTANT (del_stmt) */ /* 	__rcu_process_callbacks(&rcu_bh_ctrlblk); */ 
343: /* MUTANT (rep_op) */	rcu_lockdep_assert(!lock_is_held(&rcu_bh_lock_map) ||
344: /* MUTANT (rep_op) */!lock_is_held(&rcu_lock_map) ||
347: /* MUTANT (del_stmt) */ /* 	cond_resched(); */ 
358: /* MUTANT (del_stmt) */ /* 	unsigned long flags; */ 
360: /* MUTANT (del_stmt) */ /* 	debug_rcu_head_queue(head); */ 
361: /* MUTANT (del_stmt) */ /* 	head->func = func; */ 
362: /* MUTANT (del_stmt) */ /* 	head->next = NULL; */ 
364: /* MUTANT (del_stmt) */ /* 	local_irq_save(flags); */ 
365: /* MUTANT (del_stmt) */ /* 	*rcp->curtail = head; */ 
366: /* MUTANT (del_stmt) */ /* 	rcp->curtail = &head->next; */ 
367: /* MUTANT (del_stmt) */ /* 	RCU_TRACE(rcp->qlen++); */ 
367: /* MUTANT (rep_op) */	RCU_TRACE(rcp->qlen--);
368: /* MUTANT (del_stmt) */ /* 	local_irq_restore(flags); */ 
378: /* MUTANT (del_stmt) */ /* 	__call_rcu(head, func, &rcu_sched_ctrlblk); */ 
388: /* MUTANT (del_stmt) */ /* 	__call_rcu(head, func, &rcu_bh_ctrlblk); */ 
394: /* MUTANT (del_stmt) */ /* 	open_softirq(RCU_SOFTIRQ, rcu_process_callbacks); */ 
396: /* MUTANT (del_stmt) */ /* 	rcu_early_boot_tests(); */ 
