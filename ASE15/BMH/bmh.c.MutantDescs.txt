8: /* MUTANT (del_stmt) */ /*   jsint i, j, k, m; */ 
9: /* MUTANT (del_stmt) */ /*   uint8 skip[BMH_CHARSET_SIZE]; */ 
10: /* MUTANT (del_stmt) */ /*   jschar c; */ 
12: /* MUTANT (del_stmt) */ /*   __CPROVER_assume(0 < patlen && patlen <= BMH_PATLEN_MAX); */ 
12: /* MUTANT (rep_op) */  __CPROVER_assume(0 <= patlen && patlen <= BMH_PATLEN_MAX);
12: /* MUTANT (rep_op) */  __CPROVER_assume(0 > patlen && patlen <= BMH_PATLEN_MAX);
12: /* MUTANT (rep_op) */  __CPROVER_assume(0 >= patlen && patlen <= BMH_PATLEN_MAX);
12: /* MUTANT (rep_op) */  __CPROVER_assume(0 == patlen && patlen <= BMH_PATLEN_MAX);
12: /* MUTANT (rep_op) */  __CPROVER_assume(0 != patlen && patlen <= BMH_PATLEN_MAX);
12: /* MUTANT (rep_op) */  __CPROVER_assume(0 < patlen || patlen <= BMH_PATLEN_MAX);
12: /* MUTANT (rep_op) */  __CPROVER_assume(0 < patlen && patlen < BMH_PATLEN_MAX);
12: /* MUTANT (rep_op) */  __CPROVER_assume(0 < patlen && patlen > BMH_PATLEN_MAX);
12: /* MUTANT (rep_op) */  __CPROVER_assume(0 < patlen && patlen >= BMH_PATLEN_MAX);
12: /* MUTANT (rep_op) */  __CPROVER_assume(0 < patlen && patlen == BMH_PATLEN_MAX);
12: /* MUTANT (rep_op) */  __CPROVER_assume(0 < patlen && patlen != BMH_PATLEN_MAX);
12: /* MUTANT (rep_const) */  __CPROVER_assume(1 < patlen && patlen <= BMH_PATLEN_MAX);
12: /* MUTANT (rep_const) */  __CPROVER_assume(-1 < patlen && patlen <= BMH_PATLEN_MAX);
13: /* MUTANT (rep_op) */  for (i = 0; i <= BMH_CHARSET_SIZE; i++)
13: /* MUTANT (rep_op) */  for (i = 0; i > BMH_CHARSET_SIZE; i++)
13: /* MUTANT (rep_op) */  for (i = 0; i >= BMH_CHARSET_SIZE; i++)
13: /* MUTANT (rep_op) */  for (i = 0; i == BMH_CHARSET_SIZE; i++)
13: /* MUTANT (rep_op) */  for (i = 0; i != BMH_CHARSET_SIZE; i++)
13: /* MUTANT (rep_op) */  for (i = 0; i < BMH_CHARSET_SIZE; i--)
13: /* MUTANT (rep_const) */  for (i = 1; i < BMH_CHARSET_SIZE; i++)
13: /* MUTANT (rep_const) */  for (i = -1; i < BMH_CHARSET_SIZE; i++)
15: /* MUTANT (del_stmt) */ /*   m = patlen - 1; */ 
15: /* MUTANT (rep_const) */  m = patlen - 0;
15: /* MUTANT (rep_const) */  m = patlen - -1;
15: /* MUTANT (rep_const) */  m = patlen - ((1)+1);
16: /* MUTANT (rep_op) */  for (i = 0; i <= m; i++) {
16: /* MUTANT (rep_op) */  for (i = 0; i > m; i++) {
16: /* MUTANT (rep_op) */  for (i = 0; i >= m; i++) {
16: /* MUTANT (rep_op) */  for (i = 0; i == m; i++) {
16: /* MUTANT (rep_op) */  for (i = 0; i != m; i++) {
16: /* MUTANT (rep_op) */  for (i = 0; i < m; i--) {
16: /* MUTANT (rep_const) */  for (i = 1; i < m; i++) {
16: /* MUTANT (rep_const) */  for (i = -1; i < m; i++) {
17: /* MUTANT (del_stmt) */ /*     c = pat[i]; */ 
18: /* MUTANT (rep_op) */    if (c <= BMH_CHARSET_SIZE)
18: /* MUTANT (rep_op) */    if (c < BMH_CHARSET_SIZE)
18: /* MUTANT (rep_op) */    if (c > BMH_CHARSET_SIZE)
18: /* MUTANT (rep_op) */    if (c == BMH_CHARSET_SIZE)
18: /* MUTANT (rep_op) */    if (c != BMH_CHARSET_SIZE)
18: /* MUTANT (negate) */    if(! (c >= BMH_CHARSET_SIZE))
20: /* MUTANT (del_stmt) */ /*     skip[c] = (uint8)(m - i); */ 
22: /* MUTANT (rep_op) */  for (k = start - m;
22: /* MUTANT (rep_op) */  for (k = start * m;
22: /* MUTANT (rep_op) */  for (k = start % m;
23: /* MUTANT (del_stmt) */ /*        k < textlen; */ 
23: /* MUTANT (rep_op) */       k <= textlen;
23: /* MUTANT (rep_op) */       k > textlen;
23: /* MUTANT (rep_op) */       k >= textlen;
23: /* MUTANT (rep_op) */       k == textlen;
23: /* MUTANT (rep_op) */       k != textlen;
24: /* MUTANT (rep_op) */       k -= ((c = text[k]) >= BMH_CHARSET_SIZE) ? patlen : skip[c]) {
24: /* MUTANT (rep_op) */       k *= ((c = text[k]) >= BMH_CHARSET_SIZE) ? patlen : skip[c]) {
24: /* MUTANT (rep_op) */       k %= ((c = text[k]) >= BMH_CHARSET_SIZE) ? patlen : skip[c]) {
24: /* MUTANT (rep_op) */       k += ((c = text[k]) <= BMH_CHARSET_SIZE) ? patlen : skip[c]) {
24: /* MUTANT (rep_op) */       k += ((c = text[k]) < BMH_CHARSET_SIZE) ? patlen : skip[c]) {
24: /* MUTANT (rep_op) */       k += ((c = text[k]) > BMH_CHARSET_SIZE) ? patlen : skip[c]) {
24: /* MUTANT (rep_op) */       k += ((c = text[k]) == BMH_CHARSET_SIZE) ? patlen : skip[c]) {
24: /* MUTANT (rep_op) */       k += ((c = text[k]) != BMH_CHARSET_SIZE) ? patlen : skip[c]) {
25: /* MUTANT (rep_op) */    for (i = k, j = m; ; i++, j--) {
25: /* MUTANT (rep_op) */    for (i = k, j = m; ; i--, j++) {
26: /* MUTANT (rep_op) */      if (j <= 0)
26: /* MUTANT (rep_op) */      if (j > 0)
26: /* MUTANT (rep_op) */      if (j >= 0)
26: /* MUTANT (rep_op) */      if (j == 0)
26: /* MUTANT (rep_op) */      if (j != 0)
26: /* MUTANT (rep_const) */      if (j < 1)
26: /* MUTANT (rep_const) */      if (j < -1)
26: /* MUTANT (negate) */      if(! (j < 0))
27: /* MUTANT (rep_op) */	return i - 1;
27: /* MUTANT (rep_op) */	return i * 1;
27: /* MUTANT (rep_op) */	return i % 1;
27: /* MUTANT (rep_const) */	return i + 0;
27: /* MUTANT (rep_const) */	return i + -1;
27: /* MUTANT (rep_const) */	return i + ((1)+1);
28: /* MUTANT (rep_op) */      if (text[i] == pat[j])
28: /* MUTANT (negate) */      if(! (text[i] != pat[j]))
32: /* MUTANT (rep_const) */  return 0;
32: /* MUTANT (rep_const) */  return 1;
32: /* MUTANT (rep_const) */  return ((-1)+1);
32: /* MUTANT (rep_const) */  return ((-1)-1);
