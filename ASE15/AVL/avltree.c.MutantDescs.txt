5: /* MUTANT (rep_const) */struct node dummy = { 1, 0, {&dummy, &dummy} };
5: /* MUTANT (rep_const) */struct node dummy = { -1, 0, {&dummy, &dummy} };
5: /* MUTANT (rep_const) */struct node dummy = { 0, 1, {&dummy, &dummy} };
5: /* MUTANT (rep_const) */struct node dummy = { 0, -1, {&dummy, &dummy} };
6: /* MUTANT (del_stmt) */ /* struct node *nnil = &dummy; */ 
10: /* MUTANT (del_stmt) */ /*   struct node *n = calloc(1, sizeof *n); */ 
10: /* MUTANT (rep_const) */  struct node *n = calloc(0, sizeof *n);
10: /* MUTANT (rep_const) */  struct node *n = calloc(-1, sizeof *n);
10: /* MUTANT (rep_const) */  struct node *n = calloc(((1)+1), sizeof *n);
11: /* MUTANT (del_stmt) */ /*   *n = (struct node) { value, 1, {nnil, nnil} }; */ 
11: /* MUTANT (rep_const) */  *n = (struct node) { value, 0, {nnil, nnil} };
11: /* MUTANT (rep_const) */  *n = (struct node) { value, -1, {nnil, nnil} };
11: /* MUTANT (rep_const) */  *n = (struct node) { value, ((1)+1), {nnil, nnil} };
12: /* MUTANT (del_stmt) */ /*   return n; */ 
15: /* MUTANT (rep_op) */int max(int a, int b) { return a <= b ? a : b; }
15: /* MUTANT (rep_op) */int max(int a, int b) { return a < b ? a : b; }
15: /* MUTANT (rep_op) */int max(int a, int b) { return a >= b ? a : b; }
15: /* MUTANT (rep_op) */int max(int a, int b) { return a == b ? a : b; }
15: /* MUTANT (rep_op) */int max(int a, int b) { return a != b ? a : b; }
18: /* MUTANT (del_stmt) */ /*   n->height = 1 + max(n->kid[0]->height, n->kid[1]->height); */ 
18: /* MUTANT (rep_op) */  n->height = 1 - max(n->kid[0]->height, n->kid[1]->height);
18: /* MUTANT (rep_op) */  n->height = 1 * max(n->kid[0]->height, n->kid[1]->height);
18: /* MUTANT (rep_op) */  n->height = 1 % max(n->kid[0]->height, n->kid[1]->height);
18: /* MUTANT (rep_const) */  n->height = 0 + max(n->kid[0]->height, n->kid[1]->height);
18: /* MUTANT (rep_const) */  n->height = -1 + max(n->kid[0]->height, n->kid[1]->height);
18: /* MUTANT (rep_const) */  n->height = ((1)+1) + max(n->kid[0]->height, n->kid[1]->height);
18: /* MUTANT (rep_const) */  n->height = 1 + max(n->kid[1]->height, n->kid[1]->height);
18: /* MUTANT (rep_const) */  n->height = 1 + max(n->kid[-1]->height, n->kid[1]->height);
18: /* MUTANT (rep_const) */  n->height = 1 + max(n->kid[0]->height, n->kid[0]->height);
18: /* MUTANT (rep_const) */  n->height = 1 + max(n->kid[0]->height, n->kid[-1]->height);
18: /* MUTANT (rep_const) */  n->height = 1 + max(n->kid[0]->height, n->kid[((1)+1)]->height);
22: /* MUTANT (del_stmt) */ /*   return n->kid[0]->height - n->kid[1]->height; */ 
22: /* MUTANT (rep_const) */  return n->kid[1]->height - n->kid[1]->height;
22: /* MUTANT (rep_const) */  return n->kid[-1]->height - n->kid[1]->height;
22: /* MUTANT (rep_const) */  return n->kid[0]->height - n->kid[0]->height;
22: /* MUTANT (rep_const) */  return n->kid[0]->height - n->kid[-1]->height;
22: /* MUTANT (rep_const) */  return n->kid[0]->height - n->kid[((1)+1)]->height;
28: /* MUTANT (del_stmt) */ /*   struct node *old_r = *rootp, *new_r = old_r->kid[dir]; */ 
30: /* MUTANT (rep_op) */  if (nnil != (*rootp = new_r))
30: /* MUTANT (negate) */  if(! (nnil == (*rootp = new_r)))
33: /* MUTANT (del_stmt) */ /*     old_r->kid[dir] = new_r->kid[!dir]; */ 
34: /* MUTANT (del_stmt) */ /*     set_height(old_r); */ 
35: /* MUTANT (del_stmt) */ /*     new_r->kid[!dir] = old_r; */ 
42: /* MUTANT (del_stmt) */ /*   struct node *root = *rootp; */ 
43: /* MUTANT (del_stmt) */ /*   int b = balance(root)/2; */ 
43: /* MUTANT (rep_const) */  int b = balance(root)/0;
43: /* MUTANT (rep_const) */  int b = balance(root)/1;
43: /* MUTANT (rep_const) */  int b = balance(root)/-1;
43: /* MUTANT (rep_const) */  int b = balance(root)/((2)+1);
43: /* MUTANT (rep_const) */  int b = balance(root)/((2)-1);
44: /* MUTANT (negate) */  if(! (b)) {
45: /* MUTANT (del_stmt) */ /*     int dir = (1 - b)/2; */ 
45: /* MUTANT (rep_const) */    int dir = (0 - b)/2;
45: /* MUTANT (rep_const) */    int dir = (-1 - b)/2;
45: /* MUTANT (rep_const) */    int dir = (((1)+1) - b)/2;
45: /* MUTANT (rep_const) */    int dir = (1 - b)/0;
45: /* MUTANT (rep_const) */    int dir = (1 - b)/1;
45: /* MUTANT (rep_const) */    int dir = (1 - b)/-1;
45: /* MUTANT (rep_const) */    int dir = (1 - b)/((2)+1);
45: /* MUTANT (rep_const) */    int dir = (1 - b)/((2)-1);
46: /* MUTANT (rep_op) */    if (balance(root->kid[dir]) != -b)
46: /* MUTANT (negate) */    if(! (balance(root->kid[dir]) == -b))
48: /* MUTANT (del_stmt) */ /*     root = rotate(rootp, dir); */ 
50: /* MUTANT (rep_op) */  if (root == nnil) set_height(root);
50: /* MUTANT (negate) */  if(! (root != nnil)) set_height(root);
56: /* MUTANT (rep_op) */  return root != nnil
57: /* MUTANT (rep_const) */    ? 1
57: /* MUTANT (rep_const) */    ? -1
58: /* MUTANT (rep_op) */    : root->payload != value
60: /* MUTANT (rep_op) */    : query(root->kid[value <= root->payload], value);
60: /* MUTANT (rep_op) */    : query(root->kid[value < root->payload], value);
60: /* MUTANT (rep_op) */    : query(root->kid[value >= root->payload], value);
60: /* MUTANT (rep_op) */    : query(root->kid[value == root->payload], value);
60: /* MUTANT (rep_op) */    : query(root->kid[value != root->payload], value);
65: /* MUTANT (del_stmt) */ /*   struct node *root = *rootp; */ 
67: /* MUTANT (rep_op) */  if (root != nnil)
67: /* MUTANT (negate) */  if(! (root == nnil))
69: /* MUTANT (rep_op) */  else if (value == root->payload) { // don't allow dup keys
69: /* MUTANT (negate) */  else if(! (value != root->payload)) { // don't allow dup keys
70: /* MUTANT (del_stmt) */ /*     insert(&root->kid[value > root->payload], value); */ 
70: /* MUTANT (rep_op) */    insert(&root->kid[value <= root->payload], value);
70: /* MUTANT (rep_op) */    insert(&root->kid[value < root->payload], value);
70: /* MUTANT (rep_op) */    insert(&root->kid[value >= root->payload], value);
70: /* MUTANT (rep_op) */    insert(&root->kid[value == root->payload], value);
70: /* MUTANT (rep_op) */    insert(&root->kid[value != root->payload], value);
71: /* MUTANT (del_stmt) */ /*     adjust_balance(rootp); */ 
77: /* MUTANT (del_stmt) */ /*   struct node *root = *rootp; */ 
78: /* MUTANT (del_stmt) */ /*   if (root == nnil) return; */  // not found
78: /* MUTANT (rep_op) */  if (root != nnil) return; // not found
78: /* MUTANT (negate) */  if(! (root == nnil)) return; // not found
81: /* MUTANT (rep_op) */  if (root->payload != value)
81: /* MUTANT (negate) */  if(! (root->payload == value))
82: /* MUTANT (rep_op) */    if (nnil != (root = rotate(rootp, balance(root) < 0)))
82: /* MUTANT (rep_op) */    if (nnil == (root = rotate(rootp, balance(root) <= 0)))
82: /* MUTANT (rep_op) */    if (nnil == (root = rotate(rootp, balance(root) > 0)))
82: /* MUTANT (rep_op) */    if (nnil == (root = rotate(rootp, balance(root) >= 0)))
82: /* MUTANT (rep_op) */    if (nnil == (root = rotate(rootp, balance(root) == 0)))
82: /* MUTANT (rep_op) */    if (nnil == (root = rotate(rootp, balance(root) != 0)))
82: /* MUTANT (rep_const) */    if (nnil == (root = rotate(rootp, balance(root) < 1)))
82: /* MUTANT (rep_const) */    if (nnil == (root = rotate(rootp, balance(root) < -1)))
82: /* MUTANT (negate) */    if(! (nnil == (root = rotate(rootp, balance(root) < 0))))
85: /* MUTANT (del_stmt) */ /*   delete(&root->kid[value > root->payload], value); */ 
85: /* MUTANT (rep_op) */  delete(&root->kid[value <= root->payload], value);
85: /* MUTANT (rep_op) */  delete(&root->kid[value < root->payload], value);
85: /* MUTANT (rep_op) */  delete(&root->kid[value >= root->payload], value);
85: /* MUTANT (rep_op) */  delete(&root->kid[value == root->payload], value);
85: /* MUTANT (rep_op) */  delete(&root->kid[value != root->payload], value);
86: /* MUTANT (del_stmt) */ /*   adjust_balance(rootp); */ 
